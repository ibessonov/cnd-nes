    .bank 14
    .org $C000

NMI:
    PHP                                 ; Push processor status on stack.
    PHA                                 ; Push A register on stack.
    TXA
    PHA                                 ; Push X register on stack.
    TYA
    PHA                                 ; Push Y register on stack.

    LDA <DisplayDisabled
    ORA <$9A ; #C008
    BEQ L7_C00F                         ; If both values are zeroes.
    JMP L7_C0A1                         ; Else.
L7_C00F:
    LDA <PpuCtrlVal                     ; Read stored PPU control register value.
    AND #%01111000                      ; Sprite table address; Background table address; Sprite size; PPU master/slave.
    STA PPU_CTRL_REG                    ; Set PPU configuration.
    LDA PPU_STATUS_REG                  ; Read PPU status to reset latches.
    LDA #$00                            ; A = 0
    STA PPU_MASK_REG                    ; Disable display.
    STA OAM_ADDR_REG                    ; Use default Object Attribute Memory address.
    LDA #HIGH(OAM)
    STA OAM_DMA_REG                     ; Copy CPU page $02xx to internal PPU OAM memory.

    LDA <VRamBuffer3Dirty               ; A = VRamBuffer3Dirty
    BEQ L7_C033                         ; branch if (A == 0)
    LDX #$80                            ; else
    JSR CopyVRamBufferToVRam
    LDA #$00
    STA <VRamBuffer3Dirty               ; VRamBuffer3Dirty = 0
L7_C033:
    LDA <VRamBuffer2Dirty               ; A = VRamBuffer2Dirty
    BEQ L7_C040                         ; branch if (A == 0)
    LDX #$58                            ; else
    JSR CopyVRamBufferToVRam
    LDA #$00
    STA <VRamBuffer2Dirty               ; VRamBuffer2Dirty = 0
L7_C040:
    LDA <VRamBuffer1Dirty               ; A = VRamBuffer1Dirty
    BEQ L7_C047                         ; Branch if (A == 0)
    JSR L7_C115
L7_C047:
    LDA <NextChrBank0                   ; A = NextChrBank0
    BEQ L7_C050                         ; Branch if (A == 0)
    AND #$1F                            ; Crop meaningless bytes.
    JSR SetChrBank0                     ; Set CHR bank 0.
L7_C050:
    LDA <NextChrBank1                   ; A = NextChrBank1
    BEQ L7_C059                         ; Branch if (A == 0)
    AND #$1F                            ; Crop meaningless bits.
    JSR SetChrBank1                     ; Set CHR bank 1.
L7_C059:
    LDA <PalettesOutdated
    BEQ L7_C086                         ; Branch if palettes require no updates.
    LDX #$00
    STX <PalettesOutdated               ; PalettesOutdated = 0
    LDA PPU_STATUS_REG                  ; Reset PPU latches.

    LDA #HIGH(PALETTES_VRAM_ADDR)
    STA PPU_ADDR_REG
    STX PPU_ADDR_REG                    ; Write palettes VRAM address.
    LDY #$20                            ; Y = #$20
L7_C06E:
    LDA Palettes, X                     ; Copy bytes from page $03xx to VRAM.
    STA PPU_DATA_REG
    INX
    DEY
    BNE L7_C06E

    LDA #HIGH(PALETTES_VRAM_ADDR)       ; Why?
    STA PPU_ADDR_REG
    STY PPU_ADDR_REG
    STY PPU_ADDR_REG
    STY PPU_ADDR_REG                    ; Write $0000 to VRAM address.
L7_C086:
    LDA PPU_STATUS_REG                  ; Reset PPU latches.
    LDA <ScrollX                        ; Set scroll values.
    STA PPU_SCROLL_REG
    LDA <ScrollY
    STA PPU_SCROLL_REG
    LDA <PpuMaskVal                     ; Set PPU mask register value.
    STA PPU_MASK_REG
    LDA <$FD                            ; Set PPU control register value.                           Make sense of the calculation.
    AND #$01 ; #C09A
    ORA <PpuCtrlVal ; #C09C
    STA PPU_CTRL_REG

L7_C0A1:
    INC <$92 ; #C0A1
    LDX #$FF
    STX <NmiFinishedFlag

    INX ; #C0A7
    LDY #$04                            ; X = 0, Y = #$04
; Arr = $80
; for (y = 0; y < 4; y++)
;   if (Arr[y][x] == 1 && --Arr[y][x + 1] == 0)
;     Arr[y][x] = 4
L7_C0AA:
    LDA <$80, X ; #C0AA
    CMP #$01 ; #C0AC
    BNE L7_C0B8 ; #C0AE
    DEC <$81, X ; #C0B0
    BNE L7_C0B8 ; #C0B2
    LDA #$04 ; #C0B4
    STA <$80, X ; #C0B6
L7_C0B8:
    INX ; #C0B8
    INX ; #C0B9
    INX ; #C0BA
    INX ; #C0BB
    DEY ; #C0BC
    BNE L7_C0AA ; #C0BD

    LDA <$F5
    BEQ NmiSetPrgBank3                  ; Branch if <$F5 is zero.
    INC <$F6
    BNE NmiReturn                       ; Return from NMI if <$F6 is not zero.

NmiSetPrgBank3:
    LDA #BANK_3                         ; Set first PRG bank to 3.
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0

L7_C0DC:
    LDX <SfxQueueReadIdx
    LDA <SfxQueue, X                    ; A = SfxQueue[X = SfxQueueReadIdx]
    CMP #SFX_Q_NULL
    BEQ L7_C0F6                         ; Break if SFX_Q_NULL found.
    PHA
    LDA #SFX_Q_NULL
    STA <SfxQueue, X                    ; SfxQueue[X] = SFX_Q_NULL
    INX
    TXA
    AND #SFX_Q_IDX_MASK
    STA <SfxQueueReadIdx
    PLA
    JSR L3_8003                         ; This should play a sound, bank 3.
    JMP L7_C0DC

L7_C0F6:
    JSR $8000 ; #C0F6
    LDA <CurPrgBank ; #C0F9
    STA $FFF0 ; #C0FB
    LSR A ; #C0FE
    STA $FFF0 ; #C0FF
    LSR A ; #C102
    STA $FFF0 ; #C103
    LSR A ; #C106
    STA $FFF0 ; #C107
    LSR A ; #C10A
    STA $FFF0 ; #C10B
NmiReturn:
    PLA
    TAY                                 ; Restore Y register from stack.
    PLA
    TAX                                 ; Restore X register from stack.
    PLA                                 ; Restore A register from stack.
    PLP                                 ; Restore processor status from stack.
    RTI                                 ; Return from interruption.

L7_C115:
    LDX #$00                            ; Fall to subsequent code with param X = 0.
    STX <VRamBuffer1Dirty               ; VRamBuffer1Dirty = 0

; Write some arbitrary data to VRAM.
; X - param (#$80, #$58, #$00)
; Data format : { addrMsb, addrLsb, len - 1, data[len] }*,  %1xxxxxxx
CopyVRamBufferToVRam:
    LDA VRamBufferBase, X               ; Read A from VRamBufferBase[X]
    BMI FinishVRamBufferCopy            ; Return if (A < 0)
    STA PPU_ADDR_REG                    ; Write A as MSB of VRAM address.
    LDA (VRamBufferBase + 1), X         ; Read next byte to A.
    STA PPU_ADDR_REG                    ; Write it as LSB.
    LDY (VRamBufferBase + 2), X         ; Read next byte to Y.
CopyNextByteFromVRamBuffer:
    LDA (VRamBufferBase + 3), X         ; Read next byte to A.
    STA PPU_DATA_REG                    ; Write it to VRAM.
    INX                                 ; X++
    DEY                                 ; Y--
    BPL CopyNextByteFromVRamBuffer      ; Write Y bytes.
    INX                                 ; X += 3
    INX
    INX
    BNE CopyVRamBufferToVRam            ; Repeat if X is not zero.
FinishVRamBufferCopy:
    RTS


    LDA <PpuCtrlVal ; #C13A
    AND #$11 ; #C13C
    STA <PpuCtrlVal ; #C13E
    STA $2000 ; #C140
    RTS ; #C143


    LDA <PpuCtrlVal ; #C144
    ORA #$80 ; #C146
    STA <PpuCtrlVal ; #C148
    STA $2000 ; #C14A
    RTS ; #C14D


DisableDisplay:
    INC <DisplayDisabled
    LDA #%00000000                      ; Hide everything.
    STA <PpuMaskVal
    STA PPU_MASK_REG
    RTS


EnableDisplay:
    DEC <DisplayDisabled
    LDA #%00011110                      ; Show everything.
    STA <PpuMaskVal
    STA PPU_MASK_REG
    RTS


ReadJoypadsInput:
    LDX #$01                            ; High strobe.
    STX JOYPAD1_REG
    DEX                                 ; Low strobe.
    STX JOYPAD1_REG                     ; Ready to poll controllers.

    LDX #$08                            ; 8 buttons.
PollNextButton:
    LDA JOYPAD1_REG                     ; Read state of controller 1.
    LSR A
    ROL <Joypad1Tmp                     ; Rotate and accumulate new button state.
    LSR A
    ROL <$00                            ; Rotate <$00 and accumulate expansion status.

    LDA JOYPAD2_REG                     ; Read state of controller 2.
    LSR A
    ROL <Joypad2Tmp                     ; Rotate and accumulate new button state.
    LSR A
    ROL <$01                            ; Rotate <$01 and accumulate expansion status.
    DEX
    BNE PollNextButton                  ; Continue for other buttons.

    LDA <$00
    ORA <Joypad1Tmp
    STA <Joypad1Tmp                     ; Merge buttons state and expansion status.
                                        ; Probably to support controllers in expansion port on Famicom.
    LDA <$01
    ORA <Joypad2Tmp
    STA <Joypad2Tmp                     ; Same for controller 2.

    LDX #$01                            ; 2 iterations for 2 controllers.
SplitToTappedAndPressed:
    LDA <Joypad1Tmp, X                  ; A = Joypad1Tmp
    TAY                                 ; Y = A
    EOR <Joypad1Pressed, X              ; A ^= Joypad1Pressed
    AND <Joypad1Tmp, X                  ; A &= status
    STA <Joypad1Tapped, X               ; Joypad1Tapped = A
    STY <Joypad1Pressed, X              ; Joypad1Pressed = Y
    DEX
    BPL SplitToTappedAndPressed

    LDX #$03
CleanInvalidInputs:
    LDA <Joypad, X
    AND #(BUTTON_UP | BUTTON_DOWN)
    CMP #(BUTTON_UP | BUTTON_DOWN)
    BEQ L7_C1B0                         ; Clean if both Up and Down were pressed/tapped.
    LDA <Joypad, X
    AND #(BUTTON_LEFT | BUTTON_RIGHT)
    CMP #(BUTTON_LEFT | BUTTON_RIGHT)
    BNE L7_C1B6                         ; Clean if both Left and Right were pressed/tapped.
L7_C1B0:
    LDA <Joypad, X
    AND #~(BUTTON_UP | BUTTON_DOWN | BUTTON_LEFT | BUTTON_RIGHT)
    STA <Joypad, X                      ; Erase all d-pad inputs.
L7_C1B6:
    DEX                                 ; --X
    BPL CleanInvalidInputs              ; Continue if X >= 0
    RTS


; A - MSB of VRAM new address.
; X - byte to write to VRAM.
; Y - number of pages to write to VRAM. 0 is interpreted as 256.
FillScreen:
    STA <$00                            ; Preserve value of A.
    STX <$01                            ; Preserve value of X.
    STY <$02                            ; Preserve value of Y.
    LDA PPU_STATUS_REG                  ; Read PPU status to reset latches.
    LDA <PpuCtrlVal
    AND #$FE                            ; Forced even nametable.
    STA PPU_CTRL_REG                    ; Set PPU configuration.
    LDA <$00                            ; Read A parameter value.
    STA PPU_ADDR_REG                    ; Set MSB of VRAM address.
    LDY #$00
    STY PPU_ADDR_REG                    ; Set LSB of VRAM to zero.

    LDX #$04                            ; X = 4
    CMP #$20                            ;
    BCS L7_C1DC                         ; Branch if A >= $20,
    LDX <$02                            ; Read original Y value to X.
L7_C1DC:
    LDY #$00                            ; Y = 0
    LDA <$01                            ; Read original X parameter to A.
L7_C1E0:
    STA PPU_DATA_REG                    ; Write A to VRAM.
    DEY                                 ; Y--;
    BNE L7_C1E0                         ; 256 iterations.
    DEX                                 ; X--;
    BNE L7_C1E0                         ; X iterations.

    LDY <$02                            ; Read original Y parameter to Y.
    LDA <$00                            ; Read original A parameter to A.
    CMP #$20                            ; Compare MSB of VRAM address with #$20.
    BCC L7_C203                         ; Branch if A < #$20.

    ADC #$02                            ; A += 2 + C, C = 1?
    STA PPU_ADDR_REG                    ; MSB
    LDA #$C0                            ;
    STA PPU_ADDR_REG                    ; LSB
    LDX #$40 ; #C1FB
L7_C1FD:
    STY PPU_DATA_REG
    DEX
    BNE L7_C1FD                         ; Write Y to VRAM #$40 times (X).

L7_C203:
    LDX <$01                            ; Read original X parameter to X.
    RTS                                 ; Return, WTF? I'll ignore the rest for now.


    PHA ; #C206
    TXA ; #C207
    STY <$01 ; #C208
    CLC ; #C20A
    SBC <$01 ; #C20B
    TAX ; #C20D
    PLA ; #C20E
    LDY #$00 ; #C20F
    STY <$00 ; #C211
L7_C213:
    STA [$00], Y ; #C213
    DEY ; #C215
    BNE L7_C213 ; #C216
    DEC <$01 ; #C218
    INX ; #C21A
    BNE L7_C213 ; #C21B
    RTS ; #C21D


; So it hides only a number of sprites that shouldn't be shown. Starting from OamUsedSize offset.
; #4 is treated as #0, maybe explicit zero is prohibited.
; This function will set every fourth byte to #$F8 in OAM effectively moving every sprite under the screen.
HideSprites:
    LDX <OamUsedSize                    ; Divisible by #4.
    CPX #$04                            ; If it's $4 then explicitly write a value to the first sprite.
    BNE HideSpriteSkipZero
    LDA #$F8
    STA OAM
HideSpriteSkipZero:
    LDA #$F8
HideSpriteLoop:
    STA OAM, X                          ; OAM[X] = #$F8
    INX
    INX
    INX
    INX
    BNE HideSpriteLoop
    RTS

L7_C235:
    LDX #$0F ; #C235
L7_C237:
    LDA #$00 ; #C237
    STA $04D0, X ; #C239
    LDA #$FF ; #C23C
    STA $0590, X ; #C23E
    DEX ; #C241
    CPX #$01 ; #C242
    BNE L7_C237 ; #C244
    RTS ; #C246


L7_C247:
    JSR FadeoutScreen ; #C247
    JSR L7_C235 ; #C24A
    JSR HideSprites ; #C24D
    JMP WaitNmiAndReadInputs ; #C250


L7_C253:
    LDA <$31                            ; A = <$31
    CMP #ZONE_MAP_1
    BEQ L7_C265
    CMP #ZONE_MAP_2
    BEQ L7_C265                         ; Don't change banks if A is #$0B or #$0C.
    LDA #BANK_5                         ; Bank #5.
    JSR SetFirstPrgBank                 ; Set it.
    JSR $8000                           ; And execute its main function.
    ; I think another jump to dead code is missing here.
L7_C265:
    JMP LitTheScreen


    JSR HideSprites                     ; Dead code?
    JSR WaitNmiAndReadInputs            ; Dead code?


LitTheScreen:
    LDA #$30
    LDX #$F0                            ; So basically we start with darkest shades and decrease fadeout diff.
                                        ; Brightness will be increased.
    BNE FadeoutScreenNoParams           ; Why not JMP? What a mess. Basically this skips default fadeout parameters.

FadeoutScreen:
    LDA #$10
    TAX                                 ; X = A = #$10
FadeoutScreenNoParams:
    STA <$0F                            ; <$0F = A
    STX <$0D                            ; <$0D = X TODO Find a way to name local variables.
    LDA #$00
    STA <$9A                            ; <$9A = 0
    LDY #$04
    STY <$0E                            ; <$0E = 4

FadeoutDecreaseBrightness:
    LDY #$1F
FadeoutCopyPalettesLoop:
    LDA PalettesBk, Y
    STA Palettes, Y
    DEY
    BPL FadeoutCopyPalettesLoop         ; Copy backup palettes to the main palettes.

    LDY #$1F
FadeoutColorDimmingLoop:
    LDA Palettes, Y
    SEC
    SBC <$0F
    BPL FadeoutDimmedColorReady
    LDA #$0F
FadeoutDimmedColorReady:                ; A = (Palettes[Y] - <$0F) >= 0 ? (Palettes[Y] - <$0F) : #$0F, #$0F - blackest black color.
    STA Palettes, Y                     ; Palettes[Y] = A
    DEY
    BPL FadeoutColorDimmingLoop

    STY <PalettesOutdated               ; PalettesOutdated = #$FF, because "of course".

    LDA <$0E                            ; A = <$0E, number of frames between next screen darkening.
FadeoutFramesLoop:
    PHA                                 ; Push A to stack.
    JSR WaitNmiAndReadInputs
    PLA                                 ; Pull A from stack.
    SEC                                 ; Raise Carry flag for the next operation.
    SBC #$01                            ; --A, there's no single command for that. Really.
    BNE FadeoutFramesLoop               ; Wait more frames if A is not zero. Fadeout delay?
    LDA <$0F
    CLC
    ADC <$0D
    STA <$0F                            ; <$0F += <$0D. Fadeout diff increased.
    CMP #$50
    BEQ FadeoutCompleted                ; Return if exactly #$50 was reached.
    LDA <$0F                            ; Read it once again to reset branching flags.
    BPL FadeoutDecreaseBrightness       ; Go to next fadeout iteration if diff is >= 0.
                                        ; This will allow to leave function when brightness goes up (non-default params).
FadeoutCompleted:
    RTS

; C2BE                                  This might be a dead code. Almost the same as SwitchJmp in bank 3.
L7_SwitchJmp:
    STX <$0E                            ; <$0E = X
    STY <$0F                            ; <$0F = Y
    ASL A
    TAY
    INY                                 ; Y = (A <<= 1) + 1. Increment, because JSR stores "address - 1", right?
    PLA
    STA <$0C                            ; Pull LSB to <$0C.
    PLA
    STA <$0D                            ; Pull MSB to <$0D.
    LDA [$0C], Y
    TAX                                 ; Remember LSB of new address to X.
    INY
    LDA [$0C], Y                        ; Read MSB of new address.
    STA <$0D                            ; Store MSB.
    STX <$0C                            ; Store LSB.
    LDX <$0E                            ; X = <$0E
    LDY <$0F                            ; Y = <$0F
    JMP [$000C]


L7_C2DC:
    LDX #$00 ; #C2DC
    LDY #$04 ; #C2DE
    LDA <$E4, X ; #C2E0
    AND #$02 ; #C2E2
    STA <$00 ; #C2E4
    LDA <$E5, X ; #C2E6
    AND #$02 ; #C2E8
    EOR <$00 ; #C2EA
    CLC ; #C2EC
    BEQ L7_C2F0 ; #C2ED
    SEC ; #C2EF
L7_C2F0:
    ROR <$E4, X ; #C2F0
    INX ; #C2F2
    DEY ; #C2F3
    BNE L7_C2F0 ; #C2F4
    RTS ; #C2F6


; A - background palette index to set. Max value is $18 (24).
SetBackgroundPalette:
    ASL A
    ASL A
    ASL A
    ASL A
    TAY                                 ; Y = (A <<= 4), because every single palette is 16 bytes.
    LDA #$00                            ;
    ADC #HIGH(L7_C344)                  ; The fuck? Why not load it in the first place?
    STA <$01
    LDA #LOW(L7_C344)
    STA <$00                            ; So basically we stored palettes address to [0] to use indirectly.

    LDX #$00
L7_C308:
    LDA [$00], Y
    STA BackPalette, X
    STA BackPaletteBk, X
    INY
    INX
    CPX #$10
    BNE L7_C308                         ; Copy 16 bytes exactly.
    RTS


; A - sprites palette index. Max value is #$12 (18).
SetSpritesPalette:
    ASL A
    ASL A
    ASL A
    TAY                                 ; Y = (A <<= 3)
    LDX #$00 ; #C31B
L7_C31D:
    LDA L7_C4D4, X ; #C31D
    STA SpritePalette, X ; #C320
    STA SpritePaletteBk, X ; #C323
    INX ; #C326
    CPX #$08 ; #C327
    BNE L7_C31D                         ; First 8 bytes are always the same, characters and UI rely on them.
L7_C32B:
    LDA L7_C4DC, Y ; #C32B
    STA SpritePalette, X ; #C32E
    STA SpritePaletteBk, X ; #C331
    INY ; #C334
    INX ; #C335
    CPX #$10 ; #C336
    BNE L7_C32B                         ; Next 8 bytes are copied from offset.

    LDA BackPalette
    STA SpritePalette                   ; Does it really matter?
    STA SpritePaletteBk
    RTS                                 ; Return.


; Background palettes.
L7_C344:
    .db $0F, $20, $10, $00
    .db $0F, $1A, $27, $07
    .db $0F, $27, $17, $07
    .db $0F, $20, $10, $21

    .db $0F, $20, $10, $16
    .db $0F, $20, $21, $11
    .db $0F, $27, $17, $07
    .db $0F, $20, $17, $0C

    .db $11, $20, $10, $0F
    .db $11, $0F, $17, $07
    .db $11, $0F, $2A, $0A
    .db $11, $27, $17, $07

    .db $0F, $20, $10, $07
    .db $0F, $20, $07, $27
    .db $0F, $16, $27, $07
    .db $0F, $20, $10, $27

    .db $0F, $20, $10, $17
    .db $0F, $20, $21, $11
    .db $0F, $20, $1A, $00
    .db $0F, $20, $10, $00

    .db $0F, $07, $17, $27
    .db $0F, $00, $20, $16
    .db $0F, $00, $20, $11
    .db $0F, $00, $28, $20

    .db $0F, $16, $21, $20
    .db $0F, $27, $14, $24
    .db $0F, $07, $17, $27
    .db $0F, $00, $10, $20

    .db $0F, $16, $28, $20
    .db $0F, $26, $28, $20
    .db $0F, $21, $35, $20
    .db $0F, $00, $22, $20

    .db $11, $20, $10, $0F
    .db $11, $0F, $0F, $0F
    .db $11, $17, $07, $0F
    .db $11, $07, $1A, $0F

    .db $11, $20, $10, $0F
    .db $11, $20, $21, $01
    .db $11, $17, $07, $0F
    .db $11, $20, $20, $01

    .db $11, $20, $10, $0F
    .db $11, $27, $17, $07
    .db $11, $17, $07, $0F
    .db $11, $07, $1A, $0F

    .db $0F, $17, $27, $37
    .db $0F, $0B, $1B, $2B
    .db $0F, $16, $16, $1B
    .db $0F, $00, $10, $20

    .db $0F, $20, $06, $27
    .db $0F, $26, $20, $36
    .db $0F, $06, $20, $10
    .db $0F, $10, $20, $1A

    .db $0F, $20, $02, $27
    .db $0F, $26, $20, $36
    .db $0F, $02, $20, $10
    .db $0F, $10, $20, $1B

    .db $0F, $17, $00, $37
    .db $0F, $21, $00, $20
    .db $0F, $24, $00, $20
    .db $0F, $21, $00, $20

    .db $0F, $17, $00, $37
    .db $0F, $21, $10, $20
    .db $0F, $24, $00, $20
    .db $0F, $21, $00, $20

    .db $0F, $20, $10, $00
    .db $0F, $00, $10, $10
    .db $0F, $27, $17, $07
    .db $0F, $21, $0C, $07

    .db $0F, $20, $10, $00
    .db $0F, $12, $03, $02
    .db $0F, $09, $09, $0A
    .db $0F, $17, $27, $37

    .db $01, $20, $10, $0F
    .db $01, $0F, $0F, $0F
    .db $01, $20, $21, $11
    .db $01, $07, $1A, $0F

    .db $0F, $20, $10, $00
    .db $0F, $20, $10, $17
    .db $0F, $20, $10, $00
    .db $0F, $35, $15, $03

    .db $0F, $00, $10, $20
    .db $0F, $00, $10, $20
    .db $0F, $00, $10, $20
    .db $0F, $00, $10, $20

    .db $0F, $20, $10, $14
    .db $0F, $18, $13, $14
    .db $0F, $36, $16, $15
    .db $0F, $27, $17, $07

    .db $0F, $1A, $17, $27
    .db $0F, $21, $17, $20
    .db $0F, $02, $11, $21
    .db $0F, $16, $17, $20

    .db $0F, $16, $21, $20
    .db $0F, $04, $14, $24
    .db $0F, $07, $17, $27
    .db $0F, $00, $10, $20

    .db $0F, $20, $10, $00
    .db $0F, $20, $10, $01
    .db $0F, $27, $17, $21
    .db $0F, $27, $17, $07

; Sprites palettes
L7_C4D4:
    .db $0F, $0F, $37, $16              ; Palette for status hearts, players, boxes, ...
    .db $0F, $0F, $30, $10              ; Gray palette for status letters, flowers, stars, bolts...

L7_C4DC:
    .db $0F, $0F, $30, $29
    .db $0F, $0F, $30, $27

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $30, $16

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $27, $15

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $30, $27

    .db $0F, $0F, $30, $21
    .db $0F, $0F, $37, $30

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $30, $24

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $30, $26

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $37, $26

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $37, $17

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $27, $15

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $27, $15

    .db $0F, $20, $0F, $16
    .db $0F, $20, $10, $27

    .db $0F, $0F, $30, $15
    .db $0F, $0F, $30, $16

    .db $0F, $0F, $30, $37
    .db $0F, $0F, $21, $37

    .db $0F, $21, $30, $27
    .db $0F, $00, $10, $20

    .db $0F, $0F, $20, $22
    .db $0F, $0F, $27, $22

    .db $0F, $0F, $30, $15
    .db $0F, $0F, $30, $21

    .db $0F, $0F, $30, $29
    .db $0F, $0F, $30, $26

    .db $0F, $20, $10, $01
    .db $0F, $20, $10, $01


L7_C574;
    LDX #$BF                            ; This constant has to have the meaning, but I don't know it yet.
                                        ; It's $40 away from "max" stack top.
    TXS                                 ; Set it as a stack pointer.
    LDA <PpuCtrlVal
    STA PPU_CTRL_REG
    LDA #$F0 ; #C57C
    JSR L7_F377
    JSR WaitNmiAndReadInputs
    LDA #$88 ; #C584
    STA <$E4 ; #C586
L7_C588:
    LDA #$07
    JSR L7_F377
    LDA #$02
    STA <Continues                      ; 3 Continues available.
    JSR FadeoutScreen
    JSR WaitNmiAndReadInputs
    JSR DisableDisplay
    LDA #$04
    STA <OamUsedSize
    JSR HideSprites
    JSR L7_C61A     ; This function clears $04xx and $05xx pages.
    LDA #$00 ; #C5A4
    STA <ScrollX ; #C5A6
    STA <ScrollY ; #C5A8
    STA <$FD ; #C5AA
    STA <$FB ; #C5AC
    STA <$31 ; #C5AE
    STA <$95 ; #C5B0
    LDA #$20 ; #C5B2
    LDX #$00 ; #C5B4
    LDY #$00 ; #C5B6
    JSR FillScreen ; #C5B8
    LDA #BANK_2
    JSR SetFirstPrgBank                 ; Bank 2.
    LDX #$02
    JSR L2_8000
    JSR FixTitleScreenColors            ; Show title screen.
    JSR EnableDisplay ; #C5C8
    JSR WaitNmiAndReadInputs ; #C5CB
    JSR LitTheScreen ; #C5CE

    LDX #$1D ; #C5D1
L7_C5D3:
    LDA L7_D657, X ; #C5D3
    STA $0340, X ; #C5D6
    DEX ; #C5D9
    BPL L7_C5D3 ; #C5DA

    LDY #$1D ; #C5DC
L7_C5DE:
    LDA L7_C73F, Y ; #C5DE
    STA $05A0, Y ; #C5E1
    LDA L7_C75D, Y ; #C5E4
    STA $05D0, Y ; #C5E7
    DEY ; #C5EA
    BPL L7_C5DE ; #C5EB

    LDA #$84
    STA <DemoWaitCntrLsb
    LDA #$03
    STA <DemoWaitCntrMsb                ; 15 seconds.
    JSR L2_A000 ; #C5F5
    LDA <DemoStatus
    BEQ L7_C603 ; #C5FA
    LDA <DemoIdx
    STA <$31 ; #C5FE
    JMP L7_C60E ; #C600
L7_C603:
    LDA #ZONE_MAP_1
    STA <$31 ; #C605
    JSR L2_9000                         ; L2, right?
    LDA #ZONE_0
    STA <$31 ; #C60C
L7_C60E:
    JSR L7_C63B ; #C60E
    JSR ShowPlayersStatus
    JSR L7_C6B5 ; Sets whole bunch of defaults.
    JMP L7_C77B ; #C617


L7_C61A:
    LDX #$1F
    LDA #$00
L7_C61E:
    STA <$50, X
    DEX
    BPL L7_C61E                         ; Write 0 to ($50 - $6F).
    LDA #$00
    STA <$00
    LDA #$04
    STA <$01                            ; Write address $0400 to <$00.
    LDX #$01
    LDA #$00
    TAY                                 ; X = 1; A = Y = 0.
L7_C630:
    STA [$00], Y
    INY
    BNE L7_C630                         ; Write zero to every byte of the page.
    INC <$01
    DEX
    BPL L7_C630                         ; There are two such pages, $04xx and $05xx.
    RTS                                 ; Return.


L7_C63B:
    LDX #$03
    LDA #$00
L7_C63F:
    STA <$E8, X
    DEX
    BPL L7_C63F                         ; <$E8 = <$E9 = <$EA = <$EB = 0.
    RTS


ShowPlayersStatus:
    LDA (OAM + $04)                     ; Y coordinate of sprite 1. Detects if player 1 has P or not.
    PHA                                 ; Save it to the stack.
    LDA (OAM + $18)                     ; Y coordinate of sprite 6. Detects if player 2 has P or not.
    PHA                                 ; Also save it to the stack.

    LDY #$00                            ; Y = 0
LoadStatusSpritesLoop:
    LDA (StatusSprites + 0), Y
    STA (OAM + 0), Y
    LDA (StatusSprites + 1), Y
    STA (OAM + 1), Y
    LDA (StatusSprites + 2), Y
    STA (OAM + 2), Y
    LDA (StatusSprites + 3), Y
    STA (OAM + 3), Y
    INY
    INY
    INY
    INY
    CPY #$28                            ; This sums up to 10 sprites. 5 for player 1, 5 for player 2.
    BNE LoadStatusSpritesLoop

    STY <OamUsedSize                    ; OamUsedSize = #$28.
    PLA
    STA $0218                           ; Restore real P status of player 2.
    PLA
    STA $0204                           ; Restore real P status of player 1.

    LDX <TwoPlayersMode
    BNE PlayersStatusTwoPlayers
HidePlayer2Status:
    LDX #$14
    LDA #$F8
HidePlayer2StatusLoop:
    STA OAM, X
    INX
    INX
    INX
    INX
    CPX #$28
    BNE HidePlayer2StatusLoop

    LDA $05A2
    CMP #$8D                            ; #$8D must be a marker for Dale. And $89 is Chip.
    BNE PlayerStatusReturnSinglePlayer
    LDA #$2A                            ; Tile for letter D.
    STA $0201                           ; Put status D instead of C for player 1.
PlayerStatusReturnSinglePlayer:
    RTS
PlayersStatusTwoPlayers:
    LDA <$55
    CMP #$0C
    BEQ HidePlayer2Status               ; <$55 == #$0C, player 2 is dead.
    LDA <$54
    CMP #$0C
    BNE PlayerStatusReturnTwoPlayers    ; Both players can't be dead at the same time.

    LDX #$00                            ; <$54 == #$0C, player 1 is dead.
    LDA #$F8
HidePlayer1StatusLoop:
    STA OAM, X
    INX
    INX
    INX
    INX
    CPX #$14
    BNE HidePlayer1StatusLoop
PlayerStatusReturnTwoPlayers:
    RTS


L7_C6B5:
    LDA #BANK_4
    JSR SetFirstPrgBank
    JSR L4_8000 ; #C6BA
    LDX <TwoPlayersMode
L7_C6BF:                                ; Loop for all players.
    LDA <$54, X                         ; Player state or something like that.
    CMP #$0C                            ; From a verified source I know that #$0C means "dead".
    BEQ L7_C6EF
    LDA #$80                            ; So, if player is alive then...
    STA $04D0, X                        ; $04D0[X] = #$80
    LDA #$D0
    STA $0400, X                        ; $0400[X] = #$D0
    LDA $034C, X
    STA $0420, X                        ; $0420[X] = $034C[X]
    LDA #$74
    STA $0510, X                        ; $0510[X] = #$74
    LDA #$00
    STA <$56, X                         ; $56[X] = 0
    STA <$54, X                         ; $54[X] = 0
    STA <$58, X                         ; $58[X] = 0
    STA <$5C, X                         ; $5C[X] = 0
    STA <$5E                            ; $5E[X] = 0
                                        ; $52 and $5A - I don't know. They're missing.
    STA $0430, X                        ; $0430[X] = 0
    STA $0410, X                        ; $0410[X] = 0
    JSR L7_F31D                         ; Write more zeroes.
L7_C6EF:
    DEX
    BPL L7_C6BF

    LDA #$18
    STA $04F0                           ; $04F0 = $18
    LDA #$30
    STA $04F1                           ; $04F1 = $30
    LDA #$55
    STA <$99                            ; <$99 = #55
    JSR L7_E096 ; #C700
    LDA #$00
    STA <$6E                            ; <$6E = 0

    LDX <TwoPlayersMode
L7_C709:
    LDA $04F0, X
    STA <$68, X                         ; <$68[X] = $04F0[X]
    LDA $0500, X
    STA <$6A, X                         ; <$6A[X] = $0500[X]
    DEX
    BPL L7_C709                         ; For all players.
    RTS


StatusSprites:
    ; { Y, Tile, Attributes, X } x 10
    .db $10, $28, %00000001, $10        ; Status letter C.
    .db $F8, $29, %00000001, $20        ; Status letter P, player 1 (outside the screen).
    .db $18, $2B, %00000000, $10        ; Status heart #1, player 1.
    .db $18, $2B, %00000000, $18        ; Status heart #2, player 1.
    .db $18, $2B, %00000000, $20        ; Status heart #3, player 1.
    .db $10, $2A, %00000001, $D0        ; Status letter D.
    .db $F8, $29, %00000001, $E0        ; Status letter P, player 2 (outside the screen).
    .db $18, $2B, %00000000, $D0        ; Status heart #1, player 2.
    .db $18, $2B, %00000000, $D8        ; Status heart #2, player 2.
    .db $18, $2B, %00000000, $E0        ; Status heart #3, player 2.


; 30 bytes
L7_C73F:
    .db $0D ; #C73F
    .db $B4 ; #C740
    .db $8C ; #C741
    .db $00 ; #C742
    .db $91 ; #C743
    .db $00 ; #C744
    .db $92 ; #C745
    .db $00 ; #C746
    .db $99 ; #C747
    .db $00 ; #C748
    .db $80 ; #C749
    .db $03 ; #C74A
    .db $80 ; #C74B
    .db $03 ; #C74C
    .db $80 ; #C74D
    .db $03 ; #C74E
    .db $80 ; #C74F
    .db $03 ; #C750
    .db $80 ; #C751
    .db $03 ; #C752
    .db $80 ; #C753
    .db $03 ; #C754
    .db $82 ; #C755
    .db $03 ; #C756
    .db $8F ; #C757
    .db $00 ; #C758
    .db $9C ; #C759
    .db $00 ; #C75A
    .db $99 ; #C75B
    .db $00 ; #C75C

; 30 bytes
L7_C75D:
    .db $0D ; #C75D
    .db $B4 ; #C75E
    .db $8D ; #C75F
    .db $00 ; #C760
    .db $8A ; #C761
    .db $00 ; #C762
    .db $95 ; #C763
    .db $00 ; #C764
    .db $8E ; #C765
    .db $00 ; #C766
    .db $80 ; #C767
    .db $03 ; #C768
    .db $80 ; #C769
    .db $03 ; #C76A
    .db $80 ; #C76B
    .db $03 ; #C76C
    .db $80 ; #C76D
    .db $03 ; #C76E
    .db $80 ; #C76F
    .db $03 ; #C770
    .db $80 ; #C771
    .db $03 ; #C772
    .db $82 ; #C773
    .db $03 ; #C774
    .db $8F ; #C775
    .db $00 ; #C776
    .db $9C ; #C777
    .db $00 ; #C778
    .db $99 ; #C779
    .db $00 ; #C77A


L7_C77B:
    LDA <Joypad1Tapped
    AND #BUTTON_START
    BEQ L7_C795                         ; Branch if start wasn't tapped.
    LDA #$24                            ; A = #$24
    JSR EnqueueSfx

    LDY #$F3
    LDA <$98
    EOR #$01
    STA <$98                            ; <$98 ^= 1
    BNE L7_C791 ; #C78E
    INY                                 ; Y = <$98 ? #$F3 : #$F4
L7_C791:
    TYA                                 ; A = Y
    JSR EnqueueSfx

L7_C795:
    LDA <$98
    BEQ L7_C79C
    JMP L7_C83E                         ; Jump if <$98 is true (1).
L7_C79C:
    LDA <Joypad1Tapped
    AND #BUTTON_SELECT
    BEQ L7_C7AA                         ; Branch if select wasn't tapped.
    LDA #BANK_2
    JSR SetFirstPrgBank
    JSR L2_8900                         ; Call $8900 in bank 2 if select was tapped. Have no idea what's in there.
L7_C7AA:
    LDA <$4E ; #C7AA
    ORA <$4F ; #C7AC
    BEQ L7_C7ED ; #C7AE
    LDA <$4E ; #C7B0
    SEC ; #C7B2
    SBC #$01 ; #C7B3
    STA <$4E ; #C7B5
    LDA <$4F ; #C7B7
    SBC #$00 ; #C7B9
    STA <$4F ; #C7BB
    ORA <$4E ; #C7BD
    BNE L7_C7ED ; #C7BF
    JSR L7_C235 ; #C7C1
    LDA <CurrentZone
    STA <$31 ; #C7C6
    LDA #BANK_2 ; #C7C8
    JSR SetFirstPrgBank ; #C7CA
    JSR $9000 ; #C7CD
    LDA <$31 ; #C7D0
    PHA ; #C7D2
    LDX #$0B ; #C7D3
    CMP #$08 ; #C7D5
    BCC L7_C7DA ; #C7D7
    INX ; #C7D9
L7_C7DA:
    STX <$31 ; #C7DA
    JSR L7_E096 ; #C7DC
    PLA ; #C7DF
    STA <$31 ; #C7E0
    LDA #BANK_2 ; #C7E2
    JSR SetFirstPrgBank ; #C7E4
    JSR L2_8B00 ; #C7E7
    JMP L7_C60E ; #C7EA
L7_C7ED:
    JSR L7_C879 ; #C7ED
    LDA #BANK_6 ; #C7F0
    JSR SetFirstPrgBank ; #C7F2
    JSR $8000 ; #C7F5
    LDX <$30 ; #C7F8
    BEQ L7_C807 ; #C7FA
    LDA #$FF ; #C7FC
    STA $03E0, X ; #C7FE
    STA <VRamBuffer3Dirty
    LDA #$00 ; #C803
    STA <$30 ; #C805
L7_C807:
    JSR L7_D6A3 ; #C807
    LDX #$01 ; #C80A
L7_C80C:
    LDA $04F0, X ; #C80C
    STA <$68, X ; #C80F
    LDA $0500, X ; #C811
    STA <$6A, X ; #C814
    DEX ; #C816
    BPL L7_C80C ; #C817
    LDA #BANK_4 ; #C819
    JSR SetFirstPrgBank ; #C81B
    JSR L4_8090 ; #C81E
    LDX <$6C ; #C821
    BEQ L7_C828 ; #C823
    JSR L7_E576 ; #C825
L7_C828:
    JSR PaletteSwapTick ; #C828
    LDA #BANK_5 ; #C82B
    JSR SetFirstPrgBank ; #C82D
    LDA #$28 ; #C830
    STA <OamUsedSize ; #C832
    JSR HideSprites ; #C834
    JSR $8000 ; #C837
    LDA #$28 ; #C83A
    STA <OamUsedSize ; #C83C
L7_C83E:
    JSR L7_C2DC ; #C83E
    LDA #$00 ; #C841
    STA <$9A ; #C843
    JSR WaitNmiAndReadInputs ; #C845
    INC <$9A ; #C848
    LDA <DemoStatus
    BEQ L7_C85E ; #C84C
    BMI L7_C861 ; #C84E
    LDA <Joypad1Tapped
    AND #BUTTON_START
    BNE L7_C861 ; #C854
    LDA #BANK_1
    JSR SetFirstPrgBank
    JSR SetNextDemoInput
L7_C85E:
    JMP L7_C77B ; #C85E

L7_C861:
    INC <DemoIdx
    LDA <DemoIdx
    CMP #$03 ; #C865
    BNE L7_C86D ; #C867
    LDA #$00 ; #C869
    STA <DemoIdx                        ; DemoIdx = (DemoIdx + 1) % 3
L7_C86D:
    LDX #$0C ; #C86D
    LDA #$00 ; #C86F
L7_C871:
    STA <DemoJoyBase, X                 ; Clears DemoStatus as well.
    DEX
    BPL L7_C871                         ; B0 .. BC
    JMP L7_C588


L7_C879:
    LDA <$6D ; #C879
    BEQ L7_C8CD ; #C87B
    LDA #$00 ; #C87D
    STA $0430 ; #C87F
    STA $0431 ; #C882
    STA <$5E ; #C885
    STA <$5F ; #C887
    DEC <$6D ; #C889
    BEQ L7_C88E ; #C88B
    RTS ; #C88D
L7_C88E:
    LDA <$31 ; #C88E
    STA <CurrentZone
    CMP #ZONE_J
    BEQ ZoneJCompleted
    TAY                                 ; Y = zone index.
    LSR A
    LSR A
    LSR A
    AND #$01
    TAX                                 ; X = { Y >= 8 }, i.e. "Use MSB of levels bit mask".
    LDA <BeatenZones, X
    ORA BeatenZonesBits, Y
    STA <BeatenZones, X

    LDA #ZONE_CLR
    STA <$31
    JSR L7_C6B5 ; #C8A8
    LDA #BANK_2
    JSR SetFirstPrgBank
    JSR ShowAndHoldZoneClearScreen
    LDA #$2C ; #C8B3
    STA <$4E ; #C8B5
    LDA #$01 ; #C8B7
    STA <$4F ; #C8B9
    LDA #$0C ; #C8BB
    JMP L7_F377 ; #C8BD

ZoneJCompleted:
    LDA #$01 ; #C8C0
    STA <$4E ; #C8C2
    LDA #$00 ; #C8C4
    STA <$4F ; #C8C6
    LDA #$08 ; #C8C8
    JMP L7_F377 ; #C8CA

L7_C8CD:
    LDX #$00 ; #C8CD
L7_C8CF:
    LDA <$54, X ; #C8CF
    CMP #$0A ; #C8D1
    BNE L7_C8D8 ; #C8D3
    JSR L7_D1DC ; #C8D5
L7_C8D8:
    LDA $04D0, X ; #C8D8
    BPL L7_C8E0 ; #C8DB
    JSR L7_C8EE ; #C8DD
L7_C8E0:
    LDA <$5E, X ; #C8E0
    BPL L7_C8E8 ; #C8E2
    LDA #$FF ; #C8E4
    STA <$5E, X ; #C8E6
L7_C8E8:
    INX ; #C8E8
    CPX #$02 ; #C8E9
    BNE L7_C8CF ; #C8EB
    RTS ; #C8ED
L7_C8EE:
    LDY <$56, X ; #C8EE
    BEQ L7_C903 ; #C8F0
    LDA $0400, X ; #C8F2
    AND #$40 ; #C8F5
    STA <$00 ; #C8F7
    LDA $0380, Y ; #C8F9
    AND #$BF ; #C8FC
    ORA <$00 ; #C8FE
    STA $0380, Y ; #C900
L7_C903:
    LDA <$54, X ; #C903
    CMP #$06 ; #C905
    BEQ L7_C913 ; #C907
    LDA #$CC ; #C909
    STA $0530, X ; #C90B
    LDA #$01 ; #C90E
    STA $0540, X ; #C910
L7_C913:
    LDA #$00 ; #C913
    STA <$52, X ; #C915
    LDY <$54, X ; #C917
    LDA L7_C926, Y ; #C919
    STA <$00 ; #C91C
    LDA L7_C933, Y ; #C91E
    STA <$01 ; #C921
    JMP [$0000]


; LSB of some addresses
L7_C926:
    .db LOW(L7_C940)
    .db LOW(L7_CBAC)
    .db LOW(L7_CC9F)
    .db LOW(L7_CD12)
    .db LOW(L7_CD50)
    .db LOW(L7_CED8)
    .db LOW(L7_CF5C)
    .db LOW(L7_CFDB)
    .db LOW(L7_D015)
    .db LOW(L7_D05E)
    .db LOW(L7_D1DC)
    .db LOW(L7_D304)
    .db LOW(L7_D133)
; MSB of some addresses
L7_C933:
    .db HIGH(L7_C940)
    .db HIGH(L7_CBAC)
    .db HIGH(L7_CC9F)
    .db HIGH(L7_CD12)
    .db HIGH(L7_CD50)
    .db HIGH(L7_CED8)
    .db HIGH(L7_CF5C)
    .db HIGH(L7_CFDB)
    .db HIGH(L7_D015)
    .db HIGH(L7_D05E)
    .db HIGH(L7_D1DC)
    .db HIGH(L7_D304)
    .db HIGH(L7_D133)


L7_C940:
    LDA <$6C ; #C940
    PHA ; #C942
    JSR L7_CBAC ; #C943
    LDA <$10 ; #C946
    PHA ; #C948
    JSR L7_D510 ; #C949
    PLA ; #C94C
    STA <$10 ; #C94D
    PLA ; #C94F
    STA <$6C ; #C950
    LDA <$54, X ; #C952
    BEQ L7_C957 ; #C954
    RTS ; #C956
L7_C957:
    LDA <$10 ; #C957
    CMP #$04 ; #C959
    BNE L7_C968 ; #C95B
    LDA <$5E, X ; #C95D
    BNE L7_C968 ; #C95F
    LDA #$09 ; #C961
    STA <$54, X ; #C963
    JMP L7_D05E ; #C965
L7_C968:
    JSR L7_D559 ; #C968
    LDA <JoypadTapped, X
    AND #BUTTON_A
    BEQ L7_C9C3 ; #C96F
    LDA $0420, X ; #C971
    BEQ L7_C9BA ; #C974
    CMP $0348, X ; #C976
    BEQ L7_C9BA ; #C979
    LDY <$56, X ; #C97B
    BEQ L7_C9A9 ; #C97D
    LDA $03A0, Y ; #C97F
    CMP #$24 ; #C982
    BCC L7_C98C ; #C984
    LDA <JoypadPressed, X
    AND #BUTTON_DOWN
    BNE L7_C9BA ; #C98A
L7_C98C:
    LDA $03A0, Y ; #C98C
    CMP #$26 ; #C98F
    BNE L7_C9A9 ; #C991
    LDY OamPStatusOffArray, X
    LDA OAM, Y
    CMP #$F8
    BNE L7_C9A9 ; #C99B
    LDA #$9E                            ; Jumping?
    STA $0550, X ; #C99F
    LDA #$04 ; #C9A2
    STA $0560, X ; #C9A4
    BNE L7_C9B3 ; #C9A7
L7_C9A9:
    LDA #$87 ; #C9A9
    STA $0550, X ; #C9AB
    LDA #$06 ; #C9AE
    STA $0560, X ; #C9B0
L7_C9B3:
    LDA #$01 ; #C9B3
    STA <$54, X ; #C9B5
    JMP L7_CBAC ; #C9B7

L7_C9BA:
    LDA <$10 ; #C9BA
    CMP #$02 ; #C9BC
    BNE L7_CA05 ; #C9BE
    JMP L7_CC9F ; #C9C0
L7_C9C3:
    LDA <JoypadTapped, X
    AND #BUTTON_B ; #C9C5
    BEQ L7_C9FF ; #C9C7
    LDA <$56, X ; #C9C9
    BEQ L7_C9FF ; #C9CB
    JSR L7_D604 ; #C9CD
    BCS L7_C9FF ; #C9D0
    LDA $0420, X ; #C9D2
    STA <$5C, X ; #C9D5
    LDA #$00 ; #C9D7
    STA $0430, X ; #C9D9
    STA $0410, X ; #C9DC
    LDA #$04 ; #C9DF
    STA <$54, X ; #C9E1
    LDA <JoypadPressed, X
    AND #BUTTON_UP
    BNE L7_C9F2 ; #C9E7
    LDA $0350, X ; #C9E9
    STA $0420, X ; #C9EC
    JMP L7_CD50 ; #C9EF
L7_C9F2:
    LDA #$44 ; #C9F2
    STA $0550, X ; #C9F4
    LDA #$03 ; #C9F7
    STA $0560, X ; #C9F9
    JMP L7_CD50 ; #C9FC
L7_C9FF:
    LDA <JoypadPressed, X
    AND #BUTTON_DOWN
    BEQ L7_CA34 ; #CA03
L7_CA05:
    LDA $0348, X ; #CA05
    LDY <$56, X ; #CA08
    BEQ L7_CA22 ; #CA0A
    LDA $0420, X ; #CA0C
    BEQ L7_CA2E ; #CA0F
    LDA $03A0, Y ; #CA11
    CMP #$24 ; #CA14
    BCS L7_CA34 ; #CA16
    LDA #$05 ; #CA18
    STA <$54, X ; #CA1A
    JSR L7_CF31 ; #CA1C
    LDA $034A, X ; #CA1F
L7_CA22:
    STA $0420, X ; #CA22
L7_CA25:
    LDA #$00 ; #CA25
    STA $0410, X ; #CA27
    STA $0430, X ; #CA2A
    RTS ; #CA2D
L7_CA2E:
    JSR L7_CF08 ; #CA2E
    JMP L7_CA25 ; #CA31
L7_CA34:
    LDA <JoypadPressed, X
    AND #(BUTTON_LEFT | BUTTON_RIGHT)
    BNE L7_CAA2 ; #CA38
    LDA <$58, X ; #CA3A
    AND #$03 ; #CA3C
    BEQ L7_CA58 ; #CA3E
    TAY ; #CA40
    LDA $0400, X ; #CA41
    PHA ; #CA44
    LDA #$00 ; #CA45
    STA $0540, X ; #CA47
    TYA ; #CA4A
    JSR L7_CAA2 ; #CA4B
    LDA <$58, X ; #CA4E
    AND #$80 ; #CA50
    STA <$58, X ; #CA52
    PLA ; #CA54
    STA $0400, X ; #CA55
L7_CA58:
    LDA $0340, X ; #CA58
    CMP $0420, X ; #CA5B
    BEQ L7_CA6D ; #CA5E
    LDA $0342, X ; #CA60
    CMP $0420, X ; #CA63
    BEQ L7_CA6D ; #CA66
    LDA #$01 ; #CA68
    STA $0410, X ; #CA6A
L7_CA6D:
    LDA $0340, X ; #CA6D
    LDY <$56, X ; #CA70
    BEQ L7_CA77 ; #CA72
    LDA $0342, X ; #CA74
L7_CA77:
    STA $0420, X ; #CA77
    LDA $0410, X ; #CA7A
    BEQ L7_CA87 ; #CA7D
    LDA #$00 ; #CA7F
    STA $0430, X ; #CA81
    JMP L7_D3E7 ; #CA84
L7_CA87:
    LDY <$56, X ; #CA87
    BEQ L7_CAA1 ; #CA89
    LDA $0510, X ; #CA8B
    SEC ; #CA8E
    SBC #$0C ; #CA8F
    BCS L7_CA96 ; #CA91
    SBC #$0F ; #CA93
    CLC ; #CA95
L7_CA96:
    STA $0490, Y ; #CA96
    LDA $0520, X ; #CA99
    SBC #$00 ; #CA9C
    STA $04A0, Y ; #CA9E
L7_CAA1:
    RTS ; #CAA1
L7_CAA2:
    PHA ; #CAA2
    LDA $0344, X ; #CAA3
    CMP $0420, X ; #CAA6
    BEQ L7_CAC5 ; #CAA9
    LDA $0346, X ; #CAAB
    CMP $0420, X ; #CAAE
    BEQ L7_CAC5 ; #CAB1
    LDY <$56, X ; #CAB3
    BNE L7_CABA ; #CAB5
    LDA $0344, X ; #CAB7
L7_CABA:
    STA $0420, X ; #CABA
    LDA #$00 ; #CABD
    STA $0410, X ; #CABF
    STA $0430, X ; #CAC2
L7_CAC5:
    PLA ; #CAC5
L7_CAC6:
    PHA ; #CAC6
    LDA <$56, X ; #CAC7
    STA $0480, X ; #CAC9
    PLA ; #CACC
    STA <$52, X ; #CACD
    AND #$01 ; #CACF
    BEQ L7_CADD ; #CAD1
    LDA #$00 ; #CAD3
    LDY #$02 ; #CAD5
    JSR L7_F000 ; #CAD7
    JMP L7_CAE4 ; #CADA
L7_CADD:
    LDA #$03 ; #CADD
    LDY #$02 ; #CADF
    JSR L7_F066 ; #CAE1
L7_CAE4:
    LDA <$10 ; #CAE4
    CMP #$04 ; #CAE6
    BNE L7_CAF5 ; #CAE8
    LDA <$5E, X ; #CAEA
    BNE L7_CAF5 ; #CAEC
    LDA #$09 ; #CAEE
    STA <$54, X ; #CAF0
    JMP L7_D05E ; #CAF2
L7_CAF5:
    LDA <$10 ; #CAF5
    CMP #$03 ; #CAF7
    BCC L7_CAFF ; #CAF9
    LDA #$00 ; #CAFB
    STA <$52, X ; #CAFD
L7_CAFF:
    LDY <$56, X ; #CAFF
    BEQ L7_CB0D ; #CB01
    LDA $0480, X ; #CB03
    CMP <$56, X ; #CB06
    BNE L7_CB73 ; #CB08
    JMP L7_D3E7 ; #CB0A
L7_CB0D:
    LDA <JoypadTapped, X
    AND #BUTTON_B ; #CB0F
    BEQ L7_CB8A ; #CB11
    LDA <$10 ; #CB13
    CMP #$0E ; #CB15
    BCC L7_CB8A ; #CB17
    LDY #$02 ; #CB19
L7_CB1B:
    LDA $04D0, Y ; #CB1B
    BPL L7_CB27 ; #CB1E
    INY ; #CB20
    CPY #$06 ; #CB21
    BNE L7_CB1B ; #CB23
    BEQ L7_CB8A ; #CB25
L7_CB27:
    TYA ; #CB27
    ORA #$80 ; #CB28
    STA <$56, X ; #CB2A
    LDA #$80 ; #CB2C
    STA $04D0, Y ; #CB2E
    LDA #$90 ; #CB31
    STA $0400, Y ; #CB33
    LDA #$AB ; #CB36
    STA $0550, Y ; #CB38
    LDA #$FF ; #CB3B
    STA $0560, Y ; #CB3D
    LDA #$00 ; #CB40
    STA $0430, Y ; #CB42
    STA $0410, Y ; #CB45
    STA $04E0, Y ; #CB48
    STA $0570, Y ; #CB4B
    STA $0480, Y ; #CB4E
    STA $0490, Y ; #CB51
    STA $04A0, Y ; #CB54
    STX <$00 ; #CB57
    LDX <$10 ; #CB59
    LDA L7_CB9C, X ; #CB5B
    STA $0420, Y ; #CB5E
    LDX <$00 ; #CB61
    LDA <$54, X ; #CB63
    BNE L7_CB8B ; #CB65
    LDA <JoypadPressed, X
    AND #BUTTON_LEFT
    LDY <$56, X ; #CB6B
    JSR L7_D460 ; #CB6D
    JSR L7_E817 ; #CB70
L7_CB73:
    LDA #$11 ; #CB73
    JSR EnqueueSfx ; #CB75
    LDA $0342, X ; #CB78
    STA $0420, X ; #CB7B
    LDA #$00 ; #CB7E
    STA $0430, X ; #CB80
    STA $0410, X ; #CB83
    LDA #$03 ; #CB86
    STA <$54, X ; #CB88
L7_CB8A:
    RTS ; #CB8A
L7_CB8B:
    JSR L7_E817 ; #CB8B
    LDA $034E, X ; #CB8E
    STA $0420, X ; #CB91
    LDA #$00 ; #CB94
    STA $0430, X ; #CB96
    STA $0410, X ; #CB99
L7_CB9C:
    JSR L7_D3E7 ; #CB9C
    JMP L7_D40B ; #CB9F

L7_CBA2:
    .db $10 ; #CBA2
    .db $00 ; #CBA3
    .db $F0 ; #CBA4
    .db $FF ; #CBA5

L7_CBA6:
    .db $14 ; #CBA6
    .db $00 ; #CBA7
    .db $EC ; #CBA8
    .db $FF ; #CBA9
    .db $23 ; #CBAA
    .db $22 ; #CBAB


L7_CBAC:
    LDA <$54, X ; #CBAC
    BEQ L7_CBB3 ; #CBAE
    JSR L7_D510 ; #CBB0
L7_CBB3:
    LDA $0560, X ; #CBB3
    BMI L7_CBCC ; #CBB6
    LDA #$00 ; #CBB8
    STA <$5A, X ; #CBBA
    LDA <JoypadPressed, X
    AND #BUTTON_A ; #CBBE
    BNE L7_CBCC ; #CBC0
    LDA $0560, X ; #CBC2
    CMP #$05 ; #CBC5
    BCS L7_CBCC ; #CBC7
    JSR L7_F31D ; #CBC9
L7_CBCC:
    LDA $0400, X ; #CBCC
    AND #$20 ; #CBCF
    PHA ; #CBD1
    LDA #$06 ; #CBD2
    LDY #$01 ; #CBD4
    JSR L7_F0FB ; #CBD6
    PLA ; #CBD9
    STA <$00 ; #CBDA
    PHP ; #CBDC
    LDA $0560, X ; #CBDD
    BPL L7_CBF5 ; #CBE0
    LDA <$10 ; #CBE2
    CMP #$02 ; #CBE4
    BCC L7_CBFB ; #CBE6
L7_CBE8:
    LDA $0400, X ; #CBE8
    AND #$DF ; #CBEB
    ORA <$00 ; #CBED
    STA $0400, X ; #CBEF
    JMP L7_CBFB ; #CBF2
L7_CBF5:
    LDA <$10 ; #CBF5
    CMP #$02 ; #CBF7
    BEQ L7_CBE8 ; #CBF9
L7_CBFB:
    PLP ; #CBFB
    LDA <$5A, X ; #CBFC
    BEQ L7_CC0C ; #CBFE
    BCS L7_CC0E ; #CC00
    LDA #$00 ; #CC02
    STA <$5A, X ; #CC04
    JSR L7_ED7A ; #CC06
    JMP L7_CC0E ; #CC09
L7_CC0C:
    BCC L7_CC3A ; #CC0C
L7_CC0E:
    LDA <$54, X ; #CC0E
    CMP #$07 ; #CC10
    BNE L7_CC15 ; #CC12
L7_CC14:
    RTS ; #CC14
L7_CC15:
    JSR L7_D40B ; #CC15
    LDA <$54, X ; #CC18
    BEQ L7_CC9B ; #CC1A
L7_CC1C:
    LDA #$10 ; #CC1C
    JSR EnqueueSfx ; #CC1E
    LDA $0340, X ; #CC21
    LDY <$56, X ; #CC24
    BEQ L7_CC2B ; #CC26
    LDA $0342, X ; #CC28
L7_CC2B:
    STA $0420, X ; #CC2B
    LDA #$00 ; #CC2E
    STA <$54, X ; #CC30
    STA $0430, X ; #CC32
    STA $0410, X ; #CC35
    BEQ L7_CC5D ; #CC38
L7_CC3A:
    LDA <$54, X ; #CC3A
    CMP #$07 ; #CC3C
    BEQ L7_CC9B ; #CC3E
    CMP #$0A ; #CC40
    BEQ L7_CC14 ; #CC42
    LDA #$01 ; #CC44
    STA <$54, X ; #CC46
    LDA $034C, X ; #CC48
    LDY <$56, X ; #CC4B
    BEQ L7_CC52 ; #CC4D
    LDA $034E, X ; #CC4F
L7_CC52:
    STA $0420, X ; #CC52
    LDA #$00 ; #CC55
    STA $0410, X ; #CC57
    STA $0430, X ; #CC5A
L7_CC5D:
    JSR L7_D40B ; #CC5D
    LDA <JoypadTapped, X
    AND #BUTTON_B ; #CC62
    BEQ L7_CC95 ; #CC64
    LDA <$56, X ; #CC66
    BEQ L7_CC95 ; #CC68
    JSR L7_D604 ; #CC6A
    BCS L7_CC95 ; #CC6D
    LDA $0420, X ; #CC6F
    STA <$5C, X ; #CC72
    LDA #$00 ; #CC74
    STA $0430, X ; #CC76
    STA $0410, X ; #CC79
    LDA #$04 ; #CC7C
    STA <$54, X ; #CC7E
    LDA <JoypadPressed, X
    AND #BUTTON_UP
    BNE L7_CC8D ; #CC84
    LDA $0350, X ; #CC86
    STA $0420, X ; #CC89
    RTS ; #CC8C
L7_CC8D:
    LDA $0560, X ; #CC8D
    BMI L7_CC9B ; #CC90
    JMP L7_F31D ; #CC92
L7_CC95:
    LDA <JoypadPressed, X
    AND #(BUTTON_LEFT | BUTTON_RIGHT)
    BNE L7_CC9C ; #CC99
L7_CC9B:
    RTS ; #CC9B
L7_CC9C:
    JMP L7_CAC6 ; #CC9C
L7_CC9F:
    LDA #$06 ; #CC9F
    STA <$40 ; #CCA1
    LDY #$01 ; #CCA3
    STY <$41 ; #CCA5
    JSR L7_F2C5 ; #CCA7
    JSR L7_F62D ; #CCAA
    BCC L7_CCCA ; #CCAD
    LDA $0510, X ; #CCAF
    SEC ; #CCB2
    SBC <$11 ; #CCB3
    STA $0510, X ; #CCB5
    BCS L7_CCE5 ; #CCB8
    SBC #$0F ; #CCBA
    STA $0510, X ; #CCBC
    LDA $0520, X ; #CCBF
    SBC #$01 ; #CCC2
    STA $0520, X ; #CCC4
    JMP L7_CCE5 ; #CCC7
L7_CCCA:
    JSR L7_F2FB ; #CCCA
    JSR L7_EA8F ; #CCCD
    LDA <$10 ; #CCD0
    CMP #$02 ; #CCD2
    BCC L7_CCEF ; #CCD4
    BNE L7_CCDF ; #CCD6
    LDA $0560, X ; #CCD8
    CMP #$FC ; #CCDB
    BCS L7_CCEF ; #CCDD
L7_CCDF:
    JSR L7_ED99 ; #CCDF
    JSR L7_D40B ; #CCE2
L7_CCE5:
    JSR L7_F31D ; #CCE5
    LDA <$54, X ; #CCE8
    BEQ L7_CC9B ; #CCEA
    JMP L7_CC1C ; #CCEC
L7_CCEF:
    LDA <$54, X ; #CCEF
    CMP #$0A ; #CCF1
    BEQ L7_CD11 ; #CCF3
    LDA #$02 ; #CCF5
    STA <$54, X ; #CCF7
    LDA $034C, X ; #CCF9
    LDY <$56, X ; #CCFC
    BEQ L7_CD03 ; #CCFE
    LDA $034E, X ; #CD00
L7_CD03:
    STA $0420, X ; #CD03
    LDA #$00 ; #CD06
    STA $0410, X ; #CD08
    STA $0430, X ; #CD0B
    JMP L7_CC5D ; #CD0E
L7_CD11:
    RTS ; #CD11

L7_CD12:
    LDA $0410, X ; #CD12
    BEQ L7_CD24 ; #CD15
    LDA #$00 ; #CD17
    STA $0430, X ; #CD19
    STA <$54, X ; #CD1C
    JSR L7_D3E7 ; #CD1E
    JMP L7_D40B ; #CD21
L7_CD24:
    LDA $0430, X ; #CD24
    CMP #$03 ; #CD27
    BNE L7_CD4F ; #CD29
    LDY <$56, X ; #CD2B
    STX <$01 ; #CD2D
    LDX $03A0, Y ; #CD2F
    LDA L7_D65C, X ; #CD32              ?????
    STA <$00 ; #CD35
    LDX <$01 ; #CD37
    LDA $0490, Y ; #CD39
    SEC ; #CD3C
    SBC <$00 ; #CD3D
    BCS L7_CD44 ; #CD3F
    SBC #$0F ; #CD41
    CLC ; #CD43
L7_CD44:
    STA $0490, Y ; #CD44
    LDA $04A0, Y ; #CD47
    SBC #$00 ; #CD4A
    STA $04A0, Y ; #CD4C
L7_CD4F:
    RTS ; #CD4F
L7_CD50:
    JSR L7_D604 ; #CD50
    BCS L7_CDBE ; #CD53
    LDA #$06 ; #CD55
    LDY #$01 ; #CD57
    JSR L7_F0FB ; #CD59
    LDA <$54, X ; #CD5C
    CMP #$07 ; #CD5E
    BEQ L7_CD4F ; #CD60
    CMP #$0A ; #CD62
    BEQ L7_CD4F ; #CD64
    LDY <$56, X ; #CD66
    LDA $0420, X ; #CD68
    CMP $0350, X ; #CD6B
    BEQ L7_CDC3 ; #CD6E
    CMP $0352, X ; #CD70
    BEQ L7_CDC3 ; #CD73
    LDA $0460, Y ; #CD75
    BNE L7_CDB9 ; #CD78
    CPY #$82 ; #CD7A
    BCC L7_CDB5 ; #CD7C
    LDA #$12 ; #CD7E
    JSR EnqueueSfx ; #CD80
    LDA #$01 ; #CD83
    STA $0460, Y ; #CD85
    LDA $04F0, Y ; #CD88
    ORA #$80 ; #CD8B
    STA $04F0, Y ; #CD8D
    LDA #$00 ; #CD90
    STA $04D0, Y ; #CD92
    LDA #$04 ; #CD95
    STA $04E0, Y ; #CD97
    LDA #$08 ; #CD9A
    STA $0500, Y ; #CD9C
    LDA $0490, Y ; #CD9F
    SEC ; #CDA2
    SBC #$08 ; #CDA3
    BCS L7_CDAA ; #CDA5
    SBC #$0F ; #CDA7
    CLC ; #CDA9
L7_CDAA:
    STA $0490, Y ; #CDAA
    LDA $04A0, Y ; #CDAD
    SBC #$00 ; #CDB0
    STA $04A0, Y ; #CDB2
L7_CDB5:
    LDA #$00 ; #CDB5
    STA <$56, X ; #CDB7
L7_CDB9:
    LDA $0560, X ; #CDB9
    BPL L7_CDC2 ; #CDBC
L7_CDBE:
    LDA #$00 ; #CDBE
    STA <$54, X ; #CDC0
L7_CDC2:
    RTS ; #CDC2
L7_CDC3:
    LDA $0410, X ; #CDC3
    BNE L7_CDCB ; #CDC6
    JMP L7_D40B ; #CDC8
L7_CDCB:
    LDA $0430, X ; #CDCB
    BNE L7_CE2F ; #CDCE
    CPY #$82 ; #CDD0
    BCC L7_CE28 ; #CDD2
    LDA #$12 ; #CDD4
    JSR EnqueueSfx ; #CDD6
    LDA $0450, Y ; #CDD9
    AND #$F0 ; #CDDC
    STA $0450, Y ; #CDDE
    LDA #$01 ; #CDE1
    STA $0460, Y ; #CDE3
    LDA $04F0, Y ; #CDE6
    ORA #$80 ; #CDE9
    STA $04F0, Y ; #CDEB
    LDA #$00 ; #CDEE
    STA $04B0, Y ; #CDF0
    LDA #$04 ; #CDF3
    STA $04C0, Y ; #CDF5
    LDA #$01 ; #CDF8
    STA $0500, Y ; #CDFA
    LDA $0400, X ; #CDFD
    AND #$40 ; #CE00
    BNE L7_CE09 ; #CE02
    LDA #$02 ; #CE04
    STA $0500, Y ; #CE06
L7_CE09:
    LDA $0500, Y ; #CE09
    AND #$02 ; #CE0C
    JSR L7_D460 ; #CE0E
    LDA $03A0, Y ; #CE11
    CMP #$25 ; #CE14
    BNE L7_CE28 ; #CE16
    LDA #$00 ; #CE18
    STA $04F0, Y ; #CE1A
    LDA #$01 ; #CE1D
    STA $0390, Y ; #CE1F
    JSR L7_CE56 ; #CE22
    JMP L7_CE2F ; #CE25
L7_CE28:
    LDA #$00 ; #CE28
    STA <$56, X ; #CE2A
    JSR L7_D4D6 ; #CE2C
L7_CE2F:
    LDA $0430, X ; #CE2F
    CMP #$04 ; #CE32
    BNE L7_CE55 ; #CE34
    LDA #$00 ; #CE36
    STA <$54, X ; #CE38
    LDA $03A0, Y ; #CE3A
    CMP #$25 ; #CE3D
    BNE L7_CE55 ; #CE3F
    LDA #$00 ; #CE41
    STA $0460, Y ; #CE43
    STA $0390, Y ; #CE46
    LDA $04F0, X ; #CE49
    STA $0470, Y ; #CE4C
    LDA $0500, X ; #CE4F
    STA $0480, Y ; #CE52
L7_CE55:
    RTS ; #CE55
L7_CE56:
    LDA $0400, X ; #CE56
    AND #$40 ; #CE59
    BEQ L7_CE61 ; #CE5B
    LDA #$00 ; #CE5D
    BEQ L7_CE63 ; #CE5F
L7_CE61:
    LDA #$7D ; #CE61
L7_CE63:
    STA <$40 ; #CE63
    LDY #$02 ; #CE65
    STY <$41 ; #CE67
    JSR L7_EA8F ; #CE69
    LDA <$10 ; #CE6C
    CMP #$0D ; #CE6E
    BNE L7_CECF ; #CE70
    JSR L7_E817 ; #CE72
    BCS L7_CECF ; #CE75
    LDY #$0F ; #CE77
L7_CE79:
    LDA $04D0, Y ; #CE79
    BPL L7_CE85 ; #CE7C
    DEY ; #CE7E
    CPY #$05 ; #CE7F
    BNE L7_CE79 ; #CE81
    BEQ L7_CECF ; #CE83
L7_CE85:
    STX <$00 ; #CE85
    LDA #$80 ; #CE87
    STA $04D0, Y ; #CE89
    LDA #$90 ; #CE8C
    STA $0400, Y ; #CE8E
    LDA #$69 ; #CE91
    STA $0420, Y ; #CE93
    LDA #$00 ; #CE96
    STA $0410, Y ; #CE98
    STA $0430, Y ; #CE9B
    STA $0570, Y ; #CE9E
    LDA #$62 ; #CEA1
    STA $04E0, Y ; #CEA3
    LDX <$4C ; #CEA6
    LDA <$4B ; #CEA8
    AND #$3F ; #CEAA
    ASL A ; #CEAC
    ASL A ; #CEAD
    PHA ; #CEAE
    AND #$E0 ; #CEAF
    ORA L7_CED0, X ; #CEB1
    STA $0510, Y ; #CEB4
    PLA ; #CEB7
    ASL A ; #CEB8
    ASL A ; #CEB9
    ASL A ; #CEBA
    AND #$E0 ; #CEBB
    ORA L7_CED4, X ; #CEBD
    STA $04F0, Y ; #CEC0
    LDA #$01 ; #CEC3
    STA $0520, Y ; #CEC5
    LDA #$05 ; #CEC8
    STA $0500, Y ; #CECA
    LDX <$00 ; #CECD
L7_CECF:
    RTS ; #CECF

L7_CED0:
    .db $08 ; #CED0
    .db $08 ; #CED1
    .db $18 ; #CED2
    .db $18 ; #CED3

L7_CED4:
    .db $08 ; #CED4
    .db $18 ; #CED5
    .db $08 ; #CED6
    .db $18 ; #CED7

L7_CED8:
    LDA $0420, X ; #CED8
    BEQ L7_CEF5 ; #CEDB
    LDA $0430, X ; #CEDD
    CMP #$04 ; #CEE0
    BNE L7_CF30 ; #CEE2
    LDA #$A2 ; #CEE4
    STA $0550, X ; #CEE6
    LDA #$01 ; #CEE9
    STA $0560, X ; #CEEB
    LDA #$00 ; #CEEE
    STA $0420, X ; #CEF0
    BEQ L7_CF08 ; #CEF3
L7_CEF5:
    LDA #$06 ; #CEF5
    LDY #$01 ; #CEF7
    JSR L7_F0FB ; #CEF9
    BCC L7_CF08 ; #CEFC
    LDA <$54, X ; #CEFE
    CMP #$0A ; #CF00
    BEQ L7_CF08 ; #CF02
    LDA #$00 ; #CF04
    STA <$54, X ; #CF06
L7_CF08:
    LDY <$56, X ; #CF08
    STX <$01 ; #CF0A
    LDX $03A0, Y ; #CF0C
    LDA L7_D665, X ; #CF0F
    STA <$00 ; #CF12
    LDX <$01 ; #CF14
    LDA $0510, X ; #CF16
    CLC ; #CF19
    ADC <$00 ; #CF1A
    STA $0490, Y ; #CF1C
    CMP #$F0 ; #CF1F
    BCC L7_CF25 ; #CF21
    ADC #$0F ; #CF23
L7_CF25:
    STA $0490, Y ; #CF25
    LDA $0520, X ; #CF28
    ADC #$00 ; #CF2B
    STA $04A0, Y ; #CF2D
L7_CF30:
    RTS ; #CF30
L7_CF31:
    LDY <$56, X ; #CF31
    STX <$01 ; #CF33
    LDX $03A0, Y ; #CF35
    LDA L7_D65C, X ; #CF38                ?????
    STA <$00 ; #CF3B
    LDX <$01 ; #CF3D
    LDA $0510, X ; #CF3F
    SEC ; #CF42
    SBC <$00 ; #CF43
    STA $0490, Y ; #CF45
    BCS L7_CF4D ; #CF48
    SBC #$0F ; #CF4A
    CLC ; #CF4C
L7_CF4D:
    STA $0490, Y ; #CF4D
    LDA $0520, X ; #CF50
    SBC #$00 ; #CF53
    STA $04A0, Y ; #CF55
    JSR L7_D435 ; #CF58
    RTS ; #CF5B

L7_CF5C:
    LDA $0530, X ; #CF5C
    BEQ L7_CF8D ; #CF5F
    TXA ; #CF61
    EOR #$01 ; #CF62
    TAY ; #CF64
    LDA $0056, Y ; #CF65
    BNE L7_CFDA ; #CF68
    STA $0530, X ; #CF6A
    LDA #$04 ; #CF6D
    STA $0540, X ; #CF6F
    LDA #$44 ; #CF72
    STA $0550, X ; #CF74
    LDA #$03 ; #CF77
    STA $0560, X ; #CF79
    LDA #$01 ; #CF7C
    STA $0580, X ; #CF7E
    LDA $0400, Y ; #CF81
    AND #$40 ; #CF84
    BNE L7_CF8D ; #CF86
    LDA #$02 ; #CF88
    STA $0580, X ; #CF8A
L7_CF8D:
    LDA #$06 ; #CF8D
    LDY #$01 ; #CF8F
    JSR L7_F0FB ; #CF91
    BCS L7_CFC5 ; #CF94
    LDA <$54, X ; #CF96
    CMP #$0A ; #CF98
    BEQ L7_CFA0 ; #CF9A
    LDA #$06 ; #CF9C
    STA <$54, X ; #CF9E
L7_CFA0:
    LDA $0400, X ; #CFA0
    PHA ; #CFA3
    LDA $0580, X ; #CFA4
    AND #$01 ; #CFA7
    BEQ L7_CFB5 ; #CFA9
    LDA #$00 ; #CFAB
    LDY #$02 ; #CFAD
    JSR L7_F000 ; #CFAF
    JMP L7_CFBC ; #CFB2
L7_CFB5:
    LDA #$03 ; #CFB5
    LDY #$02 ; #CFB7
    JSR L7_F066 ; #CFB9
L7_CFBC:
    PLA ; #CFBC
    STA $0400, X ; #CFBD
    LDA $0560, X ; #CFC0
    BPL L7_CFDA ; #CFC3
L7_CFC5:
    LDA $034C, X ; #CFC5
    CMP $0420, X ; #CFC8
    BEQ L7_CFDA ; #CFCB
    STA $0420, X ; #CFCD
    LDA #$00 ; #CFD0
    STA $0430, X ; #CFD2
    STA $0410, X ; #CFD5
    STA <$54, X ; #CFD8
L7_CFDA:
    RTS ; #CFDA

L7_CFDB:
    LDA $0356, X ; #CFDB
    CMP $0420, X ; #CFDE
    BEQ L7_CFFB ; #CFE1
    STA $0420, X ; #CFE3
    LDA #$00 ; #CFE6
    STA $0430, X ; #CFE8
    STA $0410, X ; #CFEB
    LDA #$3C ; #CFEE
    STA $0480, X ; #CFF0
    LDA $0560, X ; #CFF3
    BMI L7_CFFB ; #CFF6
    JSR L7_F31D ; #CFF8
L7_CFFB:
    LDA #$06 ; #CFFB
    LDY #$01 ; #CFFD
    JSR L7_F0FB ; #CFFF
    JSR L7_D40B ; #D002
    DEC $0480, X ; #D005
    BNE L7_D014 ; #D008
    LDA <$54, X ; #D00A
    CMP #$0A ; #D00C
    BEQ L7_D014 ; #D00E
    LDA #$00 ; #D010
    STA <$54, X ; #D012
L7_D014:
    RTS ; #D014

L7_D015:
    LDA $035A, X ; #D015
    CMP $0420, X ; #D018
    BEQ L7_D028 ; #D01B
    STA $0420, X ; #D01D
    LDA #$00 ; #D020
    STA $0410, X ; #D022
    STA $0430, X ; #D025
L7_D028:
    LDA $0500, X ; #D028
    CMP L7_D05A, X ; #D02B
    BNE L7_D03C ; #D02E
    LDA $04F0, X ; #D030
    CMP L7_D056, X ; #D033
    BEQ L7_D04C ; #D036
    BCC L7_D04C ; #D038
    BCS L7_D055 ; #D03A
L7_D03C:
    LDA $0500, X ; #D03C
    CMP L7_D05C, X ; #D03F
    BNE L7_D055 ; #D042
    LDA $04F0, X ; #D044
    CMP L7_D058, X ; #D047
    BCC L7_D055 ; #D04A
L7_D04C:
    LDA <JoypadTapped, X
    AND #BUTTON_A ; #D04E
    BEQ L7_D055 ; #D050
    JMP L7_C9A9 ; #D052
L7_D055:
    RTS ; #D055


L7_D056:
    .db $28 ; #D056
    .db $18 ; #D057

L7_D058:
    .db $51 ; #D058
    .db $41 ; #D059

L7_D05A:
    .db $02 ; #D05A
    .db $02 ; #D05B

L7_D05C:
    .db $04 ; #D05C
    .db $04 ; #D05D


L7_D05E:
    LDY Heart3XPosArray, X
    LDA (OAM - 8), Y                ; Heart 1.
    CMP #$F8
    BNE L7_D07A ; #D066
    LDA $0560, X ; #D068
    BPL L7_D073 ; #D06B
    JSR L7_F2C5 ; #D06D
    JMP L7_D076 ; #D070
L7_D073:
    JSR L7_F2A2 ; #D073
L7_D076:
    JSR L7_F2FB ; #D076
    RTS ; #D079

L7_D07A:
    LDA <$5E, X ; #D07A
    BNE L7_D0F4 ; #D07C

    LDA #$02
    STA <$00
    LDY Heart3XPosArray, X
L7_D085:
    LDA #$F8
    CMP OAM, Y
    BNE L7_D094
    DEY
    DEY
    DEY
    DEY
    DEC <$00
    BPL L7_D085

L7_D094:
    STA OAM, Y
    LDA <$00                            ; A - number of lives left for player X.
    BNE L7_D0BC ; #D099
    LDA <$56, X ; #D09B
    BEQ L7_D0BC ; #D09D
    AND #$0F ; #D09F
    TAY ; #D0A1
    LDA #$00 ; #D0A2
    STA <$56, X ; #D0A4
    CPY #$02 ; #D0A6
    BCS L7_D0B2 ; #D0A8
    LDA #$00 ; #D0AA
    STA $0054, Y ; #D0AC
    JMP L7_D0BC ; #D0AF
L7_D0B2:
    LDA #$80 ; #D0B2
    STA $04D0, Y ; #D0B4
    LDA #$3E ; #D0B7
    STA $04E0, Y ; #D0B9
L7_D0BC:
    LDA $0354, X ; #D0BC
    STA $0420, X ; #D0BF
    LDA #$14 ; #D0C2
    JSR EnqueueSfx ; #D0C4
    LDA #$3C ; #D0C7
    STA <$5E, X ; #D0C9
    LDA #$00 ; #D0CB
    STA $0410, X ; #D0CD
    STA $0430, X ; #D0D0
    LDY Heart3XPosArray, X
    LDA (OAM - 8), Y
    CMP #$F8
    BNE L7_D0EA ; #D0DB
    LDA #$9E ; #D0DD
    STA $0550, X ; #D0DF
    LDA #$04 ; #D0E2
    STA $0560, X ; #D0E4
    JMP L7_D0F4 ; #D0E7
L7_D0EA:
    LDA #$44 ; #D0EA
    STA $0550, X ; #D0EC
    LDA #$03 ; #D0EF
    STA $0560, X ; #D0F1
L7_D0F4:
    LDA <$5E, X ; #D0F4
    CMP #$28 ; #D0F6
    BNE L7_D0FE ; #D0F8
    LDA #$00 ; #D0FA
    STA <$54, X ; #D0FC
L7_D0FE:
    LDA #$06 ; #D0FE
    LDY #$01 ; #D100
    JSR L7_F0FB ; #D102
    PHP ; #D105
    JSR L7_D40B ; #D106
    PLP ; #D109
    BCS L7_D130 ; #D10A
    LDY #$02 ; #D10C
    LDA $0400, X ; #D10E
    PHA ; #D111
    AND #$40 ; #D112
    BNE L7_D120 ; #D114
    LDA #$00 ; #D116
    JSR L7_F000 ; #D118
    LDA #$01 ; #D11B
    JMP L7_D127 ; #D11D
L7_D120:
    LDA #$03 ; #D120
    JSR L7_F066 ; #D122
    LDA #$02 ; #D125
L7_D127:
    STA <$52, X ; #D127
    JSR L7_D3E7 ; #D129
    PLA ; #D12C
    STA $0400, X ; #D12D
L7_D130:
    RTS ; #D130


Heart3XPosArray:
    .db $10                             ; Player 1.
    .db $24                             ; Player 2.


L7_D133:                                ; I'll assume that this function is called when player X (0 or 1) is dead.
    LDA #$0C ; #D133
    STA <$54, X ; #D135
    LDA <TwoPlayersMode
    BEQ L7_D15B                         ; Jump if we're in single player mode.
    TXA
    EOR #$01
    TAY                                 ; Y = X ^ 1
    LDA $0054, Y
    CMP #$0C
    BEQ L7_D15B                         ; Jump if we're in two players mode and other player is already dead.
    LDA #$04                            ; 5 times
    STA <$00                            ; <$00 = 4
    LDY L7_D6A1, X                      ; #$00 for 0, #$14 for 1.
    LDA #$F8
RemovePlayerStatusLoop:
    STA OAM, Y
    INY
    INY
    INY
    INY
    DEC <$00
    BPL RemovePlayerStatusLoop          ; Move this players status outside the screen.
    RTS

L7_D15B:                                ; All players are dead.
    LDA #$04
    STA <OamUsedSize                    ; Can't be 0.
    JSR HideSprites
    LDA #BANK_5
    JSR SetFirstPrgBank                 ; Choose bank 5
    JSR $8000                           ; and call its main routine.
    LDA #$04
    STA <OamUsedSize                    ; Can't be 0. Or can it?
    LDA <$31
    PHA                                 ; Push old value of <$31.
    LDA #ZONE_CNT
    STA <$31                            ; <$31 = #$0E
    JSR L7_E096 ; #D175
    LDA #BANK_2
    JSR SetFirstPrgBank ; #D17A
    JSR L2_A400                         ; This must show continue screen.
    PLA
    STA <$31                            ; Restore old value of <$31.
    LDA <Continues
    BMI ResetOnNoContinuesLeft          ; Continues == -1, can't proceed. Immediate reset.
WaitForAccept:
    LDA <Joypad1Tapped
    AND #(BUTTON_A | BUTTON_START)
    BNE MenuItemAccepted                ; Looks like the menu acceptance input.
    LDA <Joypad1Tapped
    AND #(BUTTON_UP | BUTTON_DOWN)
    BEQ NoInput                         ; Up/Down weren't pressed.
    LSR A
    LSR A
    LSR A
    TAY                                 ; Y = UP ? 1 : 0
    LDA L7_D1DA, Y                      ; There must be only two choices.
    STA OAM                             ; Cursor is the first sprite. Can this be a continue screen?
    LDA #$27
    JSR EnqueueSfx
NoInput:
    JSR WaitNmiAndReadInputs
    JMP WaitForAccept
MenuItemAccepted:
    LDA OAM ; #D1A8
    CMP #$57                            ; Cursor on #$57 means an upper menu item.
                                        ; It's the content of L7_D1DA[1]. Data duplication, I know.
    BNE ResetOnNoContinuesLeft          ; Lower menu item was selected - don't continue. RESET!

    DEC <Continues                      ; Decrease number of continues.
    PLA
    PLA
    PLA
    PLA                                 ; WTF, why would anyone put #$57 4 times to the stack?

    LDX <TwoPlayersMode
L7_D1B7:
    LDA #$00
    STA <$54, X                         ; Reset state? It must be a state of player's state machine.
    DEX
    BPL L7_D1B7

    LDX #$0A ; #D1BE
    LDA #$80 ; #D1C0
L7_D1C2:                                ; ???
    STA $05AA, X ; #D1C2
    STA $05DA, X ; #D1C5
    DEX ; #D1C8
    DEX ; #D1C9
    BPL L7_D1C2 ; #D1CA
    LDA #$82 ; #D1CC
    STA $05B6 ; #D1CE
    STA $05E6 ; #D1D1
    JMP L7_C60E ; #D1D4

ResetOnNoContinuesLeft:
    JMP RESET


; Y positions of continue screen menu items.
L7_D1DA:
    .db $67                             ; Lower position.
    .db $57                             ; Upper position.


L7_D1DC:
    LDA <$56, X ; #D1DC
    BEQ L7_D1FB ; #D1DE
    AND #$0F ; #D1E0
    TAY ; #D1E2
    LDA #$00 ; #D1E3
    STA <$56, X ; #D1E5
    CPY #$02 ; #D1E7
    BCS L7_D1F1 ; #D1E9
    STA $0054, Y ; #D1EB
    JMP L7_D1FB ; #D1EE
L7_D1F1:
    LDA #$80 ; #D1F1
    STA $04D0, Y ; #D1F3
    LDA #$3E ; #D1F6
    STA $04E0, Y ; #D1F8
L7_D1FB:
    LDA <$5E, X ; #D1FB
    BNE L7_D231 ; #D1FD
    LDY L7_D69F, X ; #D1FF
    LDA $05A0, Y ; #D202
    ORA $059E, Y ; #D205
    CMP #$80 ; #D208
    BEQ L7_D229 ; #D20A
    LDA #$01 ; #D20C
    STA <$00 ; #D20E
L7_D210:
    SEC ; #D210
    LDA $05A0, Y ; #D211
    SBC #$01 ; #D214
    STA $05A0, Y ; #D216
    BMI L7_D22C ; #D219
    CLC ; #D21B
    ADC #$0A ; #D21C
    STA $05A0, Y ; #D21E
    DEY ; #D221
    DEY ; #D222
    DEC <$00 ; #D223
    BPL L7_D210 ; #D225
    BPL L7_D22C ; #D227
L7_D229:
    JMP L7_D133 ; #D229
L7_D22C:
    LDA #$15 ; #D22C
    JSR EnqueueSfx ; #D22E
L7_D231:
    LDA <$5E, X ; #D231
    CMP #$78 ; #D233
    BEQ L7_D23A ; #D235
    INC <$5E, X ; #D237
    RTS ; #D239
L7_D23A:
    LDY Heart3XPosArray, X
    JSR ShowHearts
    LDA #$80 ; #D240
    STA $04D0, X ; #D242
    LDA #$00 ; #D245
    STA <$54, X ; #D247
    LDA <TwoPlayersMode
    BEQ L7_D272 ; #D24B
    TXA ; #D24D
    EOR #$01 ; #D24E
    TAY ; #D250
    LDA $04D0, Y ; #D251
    BMI L7_D288 ; #D254
    LDA $0054, Y ; #D256
    CMP #$0C ; #D259
    BEQ L7_D272 ; #D25B
    CMP #$0A ; #D25D
    BNE L7_D266 ; #D25F
    LDA #$00 ; #D261
    STA $0054, Y ; #D263
L7_D266:
    LDA #$80 ; #D266
    STA $04D0, Y ; #D268
    LDA Heart3XPosArray, Y
    TAY
    JSR ShowHearts
L7_D272:
    LDA <$6E ; #D272
    BEQ L7_D280 ; #D274
    TXA ; #D276
    PHA ; #D277
    LDX <$6E ; #D278
    JSR L7_E576 ; #D27A
    PLA ; #D27D
    TAX ; #D27E
    RTS ; #D27F
L7_D280:
    TXA ; #D280
    PHA ; #D281
    JSR L7_C6B5 ; #D282
    PLA ; #D285
    TAX ; #D286
    RTS ; #D287
L7_D288:
    LDA $04F0, Y ; #D288
    STA $04F0, X ; #D28B
    STA <$68, X ; #D28E
    LDA $0500, Y ; #D290
    STA $0500, X ; #D293
    STA <$6A, X ; #D296
    LDA <ScrollY ; #D298
    CLC ; #D29A
    ADC #$B0 ; #D29B
    BCS L7_D2A3 ; #D29D
    CMP #$F0 ; #D29F
    BCC L7_D2A7 ; #D2A1
L7_D2A3:
    CLC ; #D2A3
    ADC #$10 ; #D2A4
    SEC ; #D2A6
L7_D2A7:
    STA $0510, X ; #D2A7
    LDA <$FB ; #D2AA
    ADC #$00 ; #D2AC
    STA $0520, X ; #D2AE
    LDY <$F2 ; #D2B1
    LDA $035C, X ; #D2B3
    CLC ; #D2B6
    ADC L7_D2F4, Y ; #D2B7
    STA $0420, X ; #D2BA
    LDA #$00 ; #D2BD
    STA $0430, X ; #D2BF
    STA $0410, X ; #D2C2
    LDA #$0B ; #D2C5
    STA <$54, X ; #D2C7
    LDA #$00 ; #D2C9
    STA $0550, X ; #D2CB
    STA $0560, X ; #D2CE
    LDA $0400, X ; #D2D1
    AND #$DF ; #D2D4
    STA $0400, X ; #D2D6
    LDA #$58 ; #D2D9
    STA <$60, X ; #D2DB
    LDA #$02 ; #D2DD
    STA <$62, X ; #D2DF
    RTS ; #D2E1


; X - index of the player.
; Y - OAM offset of last heart.
ShowHearts:
    LDA #$02                            ; 3 hearts.
    STA <$00
    LDA #$18                            ; Hearts Y position.
ShowHeartsLoop:
    STA OAM, Y
    DEY
    DEY
    DEY
    DEY
    DEC <$00
    BPL ShowHeartsLoop
L7_D2F3:
    RTS

L7_D2F4:
    .db $00 ; #D2F4
    .db $00 ; #D2F5
    .db $01 ; #D2F6
    .db $02 ; #D2F7
    .db $00 ; #D2F8
    .db $00 ; #D2F9
    .db $00 ; #D2FA
    .db $01 ; #D2FB
    .db $00 ; #D2FC
    .db $00 ; #D2FD
    .db $03 ; #D2FE
    .db $00 ; #D2FF
    .db $00 ; #D300
    .db $00 ; #D301
    .db $00 ; #D302
    .db $00 ; #D303

L7_D304:
    LDA <$60, X ; #D304
    ORA <$62, X ; #D306
    BNE L7_D325 ; #D308
    JSR L7_D3CA ; #D30A
    LDA <$54, X ; #D30D
    BEQ L7_D2F3 ; #D30F
    LDA #$00 ; #D311
    STA <$5E, X ; #D313
    LDY Heart3XPosArray, X              ; #$10 or #$24 depending on X.
    LDA #$F8 ; #D318
    STA (OAM - 0), Y
    STA (OAM - 4), Y                    ; Remove last 2 hearts of the players status. Interesting.
    LDA #$09 ; #D320
    STA <$54, X ; #D322
    RTS ; #D324
L7_D325:
    LDA $0510, X ; #D325
    SEC ; #D328
    SBC <ScrollY ; #D329
    BCS L7_D32F ; #D32B
    SBC #$0F ; #D32D
L7_D32F:
    CMP #$11 ; #D32F
    BCC L7_D353 ; #D331
    CMP #$D0 ; #D333
    BCC L7_D374 ; #D335
    LDA <ScrollY ; #D337
    CLC ; #D339
    ADC #$D0 ; #D33A
    BCS L7_D342 ; #D33C
    CMP #$F0 ; #D33E
    BCC L7_D346 ; #D340
L7_D342:
    CLC ; #D342
    ADC #$10 ; #D343
    SEC ; #D345
L7_D346:
    STA $0510, X ; #D346
    LDA <$FB ; #D349
    ADC #$00 ; #D34B
    STA $0520, X ; #D34D
    JMP L7_D36C ; #D350
L7_D353:
    LDA <ScrollY ; #D353
    CLC ; #D355
    ADC #$10 ; #D356
    BCS L7_D35E ; #D358
    CMP #$F0 ; #D35A
    BCC L7_D362 ; #D35C
L7_D35E:
    CLC ; #D35E
    ADC #$10 ; #D35F
    SEC ; #D361
L7_D362:
    STA $0510, X ; #D362
    LDA <$FB ; #D365
    ADC #$00 ; #D367
    STA $0520, X ; #D369
L7_D36C:
    LDA $0560, X ; #D36C
    EOR #$01 ; #D36F
    STA $0560, X ; #D371
L7_D374:
    LDA $0560, X ; #D374
    BNE L7_D38F ; #D377
    LDA $0510, X ; #D379
    SEC ; #D37C
    SBC #$02 ; #D37D
    STA $0510, X ; #D37F
    BCS L7_D3A4 ; #D382
    SBC #$0F ; #D384
    STA $0510, X ; #D386
    DEC $0520, X ; #D389
    JMP L7_D3A4 ; #D38C
L7_D38F:
    LDA $0510, X ; #D38F
    CLC ; #D392
    ADC #$02 ; #D393
    STA $0510, X ; #D395
    CMP #$F0 ; #D398
    BCC L7_D3A4 ; #D39A
    ADC #$0F ; #D39C
    STA $0510, X ; #D39E
    INC $0520, X ; #D3A1
L7_D3A4:
    LDA <$16, X ; #D3A4
    AND #$03 ; #D3A6
    BEQ L7_D3B7 ; #D3A8
    AND #$01 ; #D3AA
    BEQ L7_D3B4 ; #D3AC
    JSR L7_F21E ; #D3AE
    JMP L7_D3B7 ; #D3B1
L7_D3B4:
    JSR L7_F23C ; #D3B4
L7_D3B7:
    LDA <$60, X ; #D3B7
    SEC ; #D3B9
    SBC #$01 ; #D3BA
    STA <$60, X ; #D3BC
    LDA <$62, X ; #D3BE
    SBC #$00 ; #D3C0
    STA <$62, X ; #D3C2
    LDA <$14, X ; #D3C4
    AND #$80 ; #D3C6
    BEQ L7_D3E6 ; #D3C8
L7_D3CA:
    LDA #$05 ; #D3CA
    STA <$41 ; #D3CC
    LDA #$91 ; #D3CE
    STA <$40 ; #D3D0
    JSR L7_EA8F ; #D3D2
    LDA <$10 ; #D3D5
    CMP #$03 ; #D3D7
    BCS L7_D3E6 ; #D3D9
    JSR L7_F31D ; #D3DB
    LDA #$00 ; #D3DE
    STA <$54, X ; #D3E0
    STA <$60, X ; #D3E2
    STA <$62, X ; #D3E4
L7_D3E6:
    RTS ; #D3E6
L7_D3E7:
    LDY <$56, X ; #D3E7
    BEQ L7_D40A ; #D3E9
    LDA $04F0, X ; #D3EB
    STA $0470, Y ; #D3EE
    LDA $0500, X ; #D3F1
    STA $0480, Y ; #D3F4
    CPY #$82 ; #D3F7
    BCS L7_D407 ; #D3F9
    LDA $04F0, X ; #D3FB
    STA $FFE8, Y                        ; The fuck? 24 bytes from zero, I guess it's a deliberate underflow to correct the offset.
    LDA $0500, X ; #D401
    STA $FFEA, Y ; #D404
L7_D407:
    JSR L7_D435 ; #D407
L7_D40A:
    RTS ; #D40A
L7_D40B:
    LDY <$56, X ; #D40B
    BEQ L7_D434 ; #D40D
    STX <$01 ; #D40F
    LDX $03A0, Y ; #D411
    LDA $D653, X ; #D414
    STA <$00 ; #D417
    LDX <$01 ; #D419
    LDA $0510, X ; #D41B
    SEC ; #D41E
    SBC <$00 ; #D41F
    BCS L7_D426 ; #D421
    SBC #$0F ; #D423
    CLC ; #D425
L7_D426:
    STA $0490, Y ; #D426
    LDA $0520, X ; #D429
    SBC #$00 ; #D42C
    STA $04A0, Y ; #D42E
    JSR L7_D435 ; #D431
L7_D434:
    RTS ; #D434
L7_D435:
    LDA $0420, X ; #D435
    BEQ L7_D445 ; #D438
    LDA $03A0, Y ; #D43A
    CMP #$2B ; #D43D
    BCC L7_D45F ; #D43F
    SBC #$09 ; #D441
    BNE L7_D44E ; #D443
L7_D445:
    LDA $03A0, Y ; #D445
    CMP #$2B ; #D448
    BCS L7_D45F ; #D44A
    ADC #$09 ; #D44C
L7_D44E:
    STA $03A0, Y ; #D44E
    LDA #$00 ; #D451
    STA $0390, Y ; #D453
    STA $03B0, Y ; #D456
    LDA $0400, X ; #D459
    STA $0380, Y ; #D45C
L7_D45F:
    RTS ; #D45F
L7_D460:
    STA <$00 ; #D460
    LDA #$00 ; #D462
    STA <$01 ; #D464
    LDA $03A0, Y ; #D466
    CMP #$26 ; #D469
    BNE L7_D471 ; #D46B
    LDA #$04 ; #D46D
    STA <$01 ; #D46F
L7_D471:
    LDA <$00 ; #D471
    CLC ; #D473
    ADC <$01 ; #D474
    TAY ; #D476
    LDA $04F0, X ; #D477
    CLC ; #D47A
    ADC (L7_CBA2 + 0), Y ; #D47B
    STA <$00 ; #D47E
    LDA $0500, X ; #D480
    ADC (L7_CBA2 + 1), Y ; #D483
    STA <$01 ; #D486
    LDY <$56, X ; #D488
    LDA <$00 ; #D48A
    STA $0470, Y ; #D48C
    LDA <$01 ; #D48F
    STA $0480, Y ; #D491
    LDA $0510, X ; #D494
    STA $0490, Y ; #D497
    LDA $0520, X ; #D49A
    STA $04A0, Y ; #D49D
    RTS ; #D4A0
    STX <$01 ; #D4A1
    LDX <$00 ; #D4A3
    LDA $0470, Y ; #D4A5
    CLC ; #D4A8
    ADC (L7_CBA6 + 0), X ; #D4A9
    STA $0470, Y ; #D4AC
    LDA $0480, Y ; #D4AF
    ADC (L7_CBA6 + 1), X ; #D4B2
    STA $0480, Y ; #D4B5
    LDX <$01 ; #D4B8
    LDA $0510, X ; #D4BA
    CLC ; #D4BD
    ADC #$04 ; #D4BE
    STA $0490, Y ; #D4C0
    CMP #$F0 ; #D4C3
    BCC L7_D4D5 ; #D4C5
    ADC #$0F ; #D4C7
    STA $0490, Y ; #D4C9
    LDA $04A0, Y ; #D4CC
    CLC ; #D4CF
    ADC #$01 ; #D4D0
    STA $04A0, Y ; #D4D2
L7_D4D5:
    RTS ; #D4D5
L7_D4D6:
    LDA <$5C, X ; #D4D6
    BNE L7_D4F6 ; #D4D8
    LDA $0490, Y ; #D4DA
    CLC ; #D4DD
    ADC #$04 ; #D4DE
    STA $0490, Y ; #D4E0
    CMP #$F0 ; #D4E3
    BCC L7_D4F5 ; #D4E5
    ADC #$0F ; #D4E7
    STA $0490, Y ; #D4E9
    LDA $04A0, Y ; #D4EC
    CLC ; #D4EF
    ADC #$01 ; #D4F0
    STA $04A0, Y ; #D4F2
L7_D4F5:
    RTS ; #D4F5
L7_D4F6:
    LDA $0490, Y ; #D4F6
    SEC ; #D4F9
    SBC #$0C ; #D4FA
    STA $0490, Y ; #D4FC
    BCS L7_D50F ; #D4FF
    SBC #$0F ; #D501
    STA $0490, Y ; #D503
    LDA $04A0, Y ; #D506
    SEC ; #D509
    SBC #$01 ; #D50A
    STA $04A0, Y ; #D50C
L7_D50F:
    RTS ; #D50F
L7_D510:
    LDA <$31 ; #D510
    CMP #$09 ; #D512
    BNE L7_D532 ; #D514
    LDY #$0F ; #D516
L7_D518:
    LDA $04D0, Y ; #D518
    BPL L7_D52D ; #D51B
    LDA $0400, Y ; #D51D
    BPL L7_D52D ; #D520
    LDA $04E0, Y ; #D522
    CMP #$36 ; #D525
    BEQ L7_D533 ; #D527
    CMP #$37 ; #D529
    BEQ L7_D546 ; #D52B
L7_D52D:
    DEY ; #D52D
    CPY #$05 ; #D52E
    BNE L7_D518 ; #D530
L7_D532:
    RTS ; #D532
L7_D533:
    LDA $04F0, X ; #D533
    SEC ; #D536
    SBC $04F0, Y ; #D537
    LDA $0500, X ; #D53A
    SBC $0500, Y ; #D53D
    BCS L7_D52D ; #D540
    LDY #$04 ; #D542
    BNE L7_D59A ; #D544
L7_D546:
    LDA $04F0, X ; #D546
    SEC ; #D549
    SBC $04F0, Y ; #D54A
    LDA $0500, X ; #D54D
    SBC $0500, Y ; #D550
    BCC L7_D52D ; #D553
    LDY #$00 ; #D555
    BEQ L7_D59A ; #D557
L7_D559:
    LDA <$31 ; #D559
    CMP #$05 ; #D55B
    BNE L7_D56F ; #D55D
    LDY #$00 ; #D55F
    LDA <$10 ; #D561
    CMP #$08 ; #D563
    BEQ L7_D59A ; #D565
    LDY #$04 ; #D567
    CMP #$09 ; #D569
    BEQ L7_D59A ; #D56B
    BNE L7_D50F ; #D56D
L7_D56F:
    CMP #$0A ; #D56F
    BNE L7_D50F ; #D571
    TXA ; #D573
    PHA ; #D574
    LDY <$4A ; #D575
    JSR L7_E06B ; #D577
    LDA <$4B ; #D57A
    AND #$3F ; #D57C
    STA <$24 ; #D57E
    JSR L7_E01B ; #D580
    LDA <$36 ; #D583
    JSR SetFirstPrgBank ; #D585
    LDY <$4C ; #D588
    LDA [$00], Y ; #D58A
    LDY #$07 ; #D58C
L7_D58E:
    CMP L7_D5FC, Y ; #D58E
    BEQ L7_D598 ; #D591
    DEY ; #D593
    BPL L7_D58E ; #D594
    BMI L7_D5CF ; #D596
L7_D598:
    PLA ; #D598
    TAX ; #D599
L7_D59A:
    CPY #$04 ; #D59A
    LDY #$02 ; #D59C
    BCS L7_D5B3 ; #D59E
    LDA #$01 ; #D5A0
    JSR L7_D5D2 ; #D5A2
    BCC L7_D5CE ; #D5A5
    LDA $0400, X ; #D5A7
    PHA ; #D5AA
    LDA #$00 ; #D5AB
    JSR L7_F000 ; #D5AD
    JMP L7_D5C3 ; #D5B0
L7_D5B3:
    LDA #$02 ; #D5B3
    JSR L7_D5D2 ; #D5B5
    BCC L7_D5CE ; #D5B8
    LDA $0400, X ; #D5BA
    PHA ; #D5BD
    LDA #$03 ; #D5BE
    JSR L7_F066 ; #D5C0
L7_D5C3:
    PLA ; #D5C3
    STA $0400, X ; #D5C4
    LDA <$56, X ; #D5C7
    BEQ L7_D5CE ; #D5C9
    JSR L7_D3E7 ; #D5CB
L7_D5CE:
    RTS ; #D5CE
L7_D5CF:
    PLA ; #D5CF
    TAX ; #D5D0
    RTS ; #D5D1
L7_D5D2:
    STA <$00 ; #D5D2
    LDA <$16, X ; #D5D4
    AND #$03 ; #D5D6
    BEQ L7_D5F6 ; #D5D8
    CMP <$00 ; #D5DA
    BEQ L7_D5EA ; #D5DC
    LDA #$4C ; #D5DE
    STA $0530, X ; #D5E0
    LDA #$00 ; #D5E3
    STA $0540, X ; #D5E5
    CLC ; #D5E8
    RTS ; #D5E9
L7_D5EA:
    LDA #$80 ; #D5EA
    STA $0530, X ; #D5EC
    LDA #$02 ; #D5EF
    STA $0540, X ; #D5F1
    CLC ; #D5F4
    RTS ; #D5F5
L7_D5F6:
    LDA <$00 ; #D5F6
    STA <$52, X ; #D5F8
    SEC ; #D5FA
    RTS ; #D5FB

L7_D5FC:
    .db $08 ; #D5FC
    .db $09 ; #D5FD
    .db $0A ; #D5FE
    .db $0B ; #D5FF
    .db $0C ; #D600
    .db $0D ; #D601
    .db $0E ; #D602
    .db $0F ; #D603

L7_D604:
    LDY <$56, X ; #D604
    CPY #$82 ; #D606
    BCC L7_D619 ; #D608
    LDA <$16, X ; #D60A
    AND #$08 ; #D60C
    BEQ L7_D637 ; #D60E
    LDA $03A0, Y ; #D610
    CMP #$25 ; #D613
    BNE L7_D635 ; #D615
    BEQ L7_D624 ; #D617
L7_D619:
    LDA $0380, Y ; #D619
    BPL L7_D655 ; #D61C
    LDA #$97 ; #D61E
    LDY #$05 ; #D620
    BNE L7_D628 ; #D622
L7_D624:
    LDA #$8D ; #D624
    LDY #$01 ; #D626
L7_D628:
    STA <$40 ; #D628
    STY <$41 ; #D62A
    JSR L7_EA8F ; #D62C
    LDA <$10 ; #D62F
    CMP #$03 ; #D631
    BCS L7_D655 ; #D633
L7_D635:
    CLC ; #D635
    RTS ; #D636
L7_D637:
    LDA $04F0, X ; #D637
    SEC ; #D63A
    SBC <ScrollX ; #D63B
    STA <$00 ; #D63D
    LDA $0400, X ; #D63F
    AND #$40 ; #D642
    BEQ L7_D64D ; #D644
    LDA <$00 ; #D646
    CMP #$E8 ; #D648
    BCS L7_D655 ; #D64A
    RTS ; #D64C
L7_D64D:
    LDA <$00 ; #D64D
    CMP #$19 ; #D64F
    BCC L7_D655 ; #D651
    CLC ; #D653
    RTS ; #D654
L7_D655:
    SEC ; #D655
    RTS ; #D656

; Goes to $0340.
L7_D657:
    .db $01 ; #D657
    .db $0D ; #D658
    .db $02 ; #D659
    .db $0E ; #D65A
    .db $03 ; #D65B
L7_D65C:
    .db $0F ; #D65C
    .db $04 ; #D65D
    .db $10 ; #D65E
    .db $05 ; #D65F
    .db $11 ; #D660
    .db $06 ; #D661
    .db $12 ; #D662
    .db $07 ; #D663
    .db $13 ; #D664

L7_D665:
    .db $08 ; #D665
    .db $14 ; #D666
    .db $09 ; #D667
    .db $15 ; #D668
    .db $0A ; #D669
    .db $16 ; #D66A
    .db $0B ; #D66B
    .db $17 ; #D66C
    .db $0C ; #D66D
    .db $18 ; #D66E
    .db $29 ; #D66F
    .db $2A ; #D670
    .db $99 ; #D671
    .db $9A ; #D672
    .db $A1 ; #D673
    .db $A5 ; #D674

    .db $14 ; #D675
    .db $14 ; #D676
    .db $14 ; #D677
    .db $14 ; #D678
    .db $18 ; #D679
    .db $14 ; #D67A
    .db $14 ; #D67B
    .db $18 ; #D67C
    .db $18 ; #D67D
    .db $0C ; #D67E
    .db $0C ; #D67F
    .db $0C ; #D680
    .db $0C ; #D681
    .db $18 ; #D682
    .db $0C ; #D683
    .db $0C ; #D684
    .db $0C ; #D685
    .db $0C ; #D686
    .db $04 ; #D687
    .db $04 ; #D688
    .db $04 ; #D689
    .db $04 ; #D68A
    .db $00 ; #D68B
    .db $04 ; #D68C
    .db $04 ; #D68D
    .db $00 ; #D68E
    .db $00 ; #D68F
    .db $04 ; #D690
    .db $04 ; #D691

BeatenZonesBits:
    .db $01 ; #D692
    .db $02 ; #D693
    .db $04 ; #D694
    .db $08 ; #D695
    .db $10 ; #D696
    .db $20 ; #D697
    .db $40 ; #D698
    .db $80 ; #D699
    .db $01 ; #D69A
    .db $02 ; #D69B
    .db $04 ; #D69C

OamPStatusOffArray:
    .db $04 ; #D69D
    .db $18 ; #D69E

L7_D69F:
    .db $16 ; #D69F
    .db $46 ; #D6A0

L7_D6A1:
    .db $00 ; #D6A1
    .db $14 ; #D6A2


L7_D6A3:
    LDA <$50 ; #D6A3
    BEQ L7_D6AA ; #D6A5
    JMP L7_D72D ; #D6A7
L7_D6AA:
    LDX #$00 ; #D6AA
L7_D6AC:
    LDA $04F0, X ; #D6AC
    SEC ; #D6AF
    SBC <ScrollX ; #D6B0
    STA <$00 ; #D6B2
    LDA $04F0, X ; #D6B4
    SEC ; #D6B7
L7_D6B8:
    SBC <$68, X ; #D6B8
    STA <$04 ; #D6BA
    LDA $0500, X ; #D6BC
    SBC <$6A, X ; #D6BF
    ORA <$04 ; #D6C1
    BEQ L7_D72A ; #D6C3
    BCS L7_D6FC ; #D6C5
    LDA <$04 ; #D6C7
    EOR #$FF ; #D6C9
    ADC #$01 ; #D6CB
    STA <$10 ; #D6CD
    LDA <$00 ; #D6CF
    CMP #$88 ; #D6D1
    BCS L7_D72A ; #D6D3
    LDA <$2F ; #D6D5
    PHA ; #D6D7
    LDA #$02 ; #D6D8
    STA <$2F ; #D6DA
    JSR L7_DA50 ; #D6DC
    PLA ; #D6DF
    BCS L7_D72A ; #D6E0
    STA <$2F ; #D6E2
    LDA <$00 ; #D6E4
    CMP #$10 ; #D6E6
    BCS L7_D72A ; #D6E8
    LDA <ScrollX ; #D6EA
    CLC ; #D6EC
    ADC #$10 ; #D6ED
    STA $04F0, X ; #D6EF
    LDA <$FD ; #D6F2
    ADC #$00 ; #D6F4
    STA $0500, X ; #D6F6
    JMP L7_D72A ; #D6F9
L7_D6FC:
    LDA <$00 ; #D6FC
    CMP #$89 ; #D6FE
    BCC L7_D72A ; #D700
    LDA <$04 ; #D702
    STA <$10 ; #D704
    LDA <$2F ; #D706
    PHA ; #D708
    LDA #$01 ; #D709
    STA <$2F ; #D70B
    JSR L7_D9F6 ; #D70D
    PLA ; #D710
    BCS L7_D72A ; #D711
    STA <$2F ; #D713
    LDA <$00 ; #D715
    CMP #$F1 ; #D717
    BCC L7_D72A ; #D719
    LDA <ScrollX ; #D71B
    CLC ; #D71D
    ADC #$F0 ; #D71E
    STA $04F0, X ; #D720
    LDA <$FD ; #D723
    ADC #$00 ; #D725
    STA $0500, X ; #D727
L7_D72A:
    JMP L7_D93F ; #D72A

L7_D72D:
    LDX #$01 ; #D72D
L7_D72F:
    LDA <$54, X ; #D72F
    CMP #$0C ; #D731
    BEQ L7_D73A ; #D733
    DEX ; #D735
    BPL L7_D72F ; #D736
    BMI L7_D741 ; #D738
L7_D73A:
    TXA ; #D73A
    EOR #$01 ; #D73B
    TAX ; #D73D
    JMP L7_D6AC ; #D73E
L7_D741:
    LDA $04F0 ; #D741
    SEC ; #D744
    SBC $04F1 ; #D745
    STA <$00 ; #D748
    LDA $0500 ; #D74A
    SBC $0501 ; #D74D
    LDA <$00 ; #D750
    BCS L7_D758 ; #D752
    EOR #$FF ; #D754
    ADC #$01 ; #D756
L7_D758:
    CMP #$E0 ; #D758
    BCC L7_D76E ; #D75A
    LDX #$01 ; #D75C
L7_D75E:
    LDA <$68, X ; #D75E
    STA $04F0, X ; #D760
    LDA <$6A, X ; #D763
    STA $0500, X ; #D765
    DEX ; #D768
    BPL L7_D75E ; #D769
    JMP L7_D93F ; #D76B
L7_D76E:
    LDX #$01 ; #D76E
L7_D770:
    LDA $04F0, X ; #D770
    SEC ; #D773
    SBC <ScrollX ; #D774
    STA <$00, X ; #D776
    LDA $0500, X ; #D778
    SBC <$FD ; #D77B
    STA <$02, X ; #D77D
    DEX ; #D77F
    BPL L7_D770 ; #D780
    LDX #$01 ; #D782
L7_D784:
    LDA <$00, X ; #D784
    CMP #$F1 ; #D786
    BCC L7_D78D ; #D788
    JMP L7_D8BF ; #D78A
L7_D78D:
    CMP #$10 ; #D78D
    BCS L7_D794 ; #D78F
    JMP L7_D8FA ; #D791
L7_D794:
    DEX ; #D794
    BPL L7_D784 ; #D795
    LDX #$01 ; #D797
L7_D799:
    LDA $04F0, X ; #D799
    SEC ; #D79C
    SBC <$68, X ; #D79D
    STA <$04, X ; #D79F
    LDA $0500, X ; #D7A1
    SBC <$6A, X ; #D7A4
    ORA <$04, X ; #D7A6
    BEQ L7_D7CF ; #D7A8
    LDA #$01 ; #D7AA
    STA <$06, X ; #D7AC
    BCS L7_D7BC ; #D7AE
    LDA <$04, X ; #D7B0
    EOR #$FF ; #D7B2
    ADC #$01 ; #D7B4
    STA <$04, X ; #D7B6
    LDA #$02 ; #D7B8
    STA <$06, X ; #D7BA
L7_D7BC:
    DEX ; #D7BC
    BPL L7_D799 ; #D7BD
    LDX #$00 ; #D7BF
    LDY #$01 ; #D7C1
    LDA <$06, X ; #D7C3
    AND #$01 ; #D7C5
    BEQ L7_D813 ; #D7C7
    LDA <$00, X ; #D7C9
    CMP #$89 ; #D7CB
    BCS L7_D7D2 ; #D7CD
L7_D7CF:
    JMP L7_D856 ; #D7CF
L7_D7D2:
    LDA $0006, Y ; #D7D2
    AND #$01 ; #D7D5
    BEQ L7_D7F3 ; #D7D7
    LDA $0000, Y ; #D7D9
    CMP #$89 ; #D7DC
    BCC L7_D7EC ; #D7DE
    CMP <$00, X ; #D7E0
    BCS L7_D7EC ; #D7E2
    LDA $0004, Y ; #D7E4
    STA <$10 ; #D7E7
    JMP L7_D8A6 ; #D7E9
L7_D7EC:
    LDA <$04, X ; #D7EC
    STA <$10 ; #D7EE
    JMP L7_D8A8 ; #D7F0
L7_D7F3:
    LDA $0000, Y ; #D7F3
    CMP #$88 ; #D7F6
    BCS L7_D7EC ; #D7F8
    LDA #$88 ; #D7FA
    SEC ; #D7FC
    SBC $0000, Y ; #D7FD
    STA <$08 ; #D800
    LDA <$00, X ; #D802
    SEC ; #D804
    SBC #$88 ; #D805
    CMP <$08 ; #D807
    BCC L7_D7EC ; #D809
    LDA $0004, Y ; #D80B
    STA <$10 ; #D80E
    JMP L7_D880 ; #D810
L7_D813:
    LDA <$00, X ; #D813
    CMP #$88 ; #D815
    BCS L7_D856 ; #D817
    LDA $0006, Y ; #D819
    AND #$02 ; #D81C
    BEQ L7_D83A ; #D81E
    LDA $0000, Y ; #D820
    CMP #$88 ; #D823
    BCS L7_D833 ; #D825
    CMP <$00, X ; #D827
    BCC L7_D833 ; #D829
    LDA $0004, Y ; #D82B
    STA <$10 ; #D82E
    JMP L7_D880 ; #D830
L7_D833:
    LDA <$04, X ; #D833
    STA <$10 ; #D835
    JMP L7_D882 ; #D837
L7_D83A:
    LDA $0000, Y ; #D83A
    CMP #$89 ; #D83D
    BCC L7_D833 ; #D83F
    SBC #$88 ; #D841
    STA <$08 ; #D843
    LDA #$88 ; #D845
    SEC ; #D847
    SBC <$00, X ; #D848
    CMP <$08 ; #D84A
    BCC L7_D833 ; #D84C
    LDA $0004, Y ; #D84E
    STA <$10 ; #D851
    JMP L7_D8A6 ; #D853
L7_D856:
    TXA ; #D856
    EOR #$01 ; #D857
    TAY ; #D859
    LDA $04F0, Y ; #D85A
    SEC ; #D85D
    SBC $0068, Y ; #D85E
    STA <$10 ; #D861
    LDA $0500, Y ; #D863
    SBC $006A, Y ; #D866
    BCS L7_D899 ; #D869
    LDA <$10 ; #D86B
    EOR #$FF ; #D86D
    ADC #$01 ; #D86F
    STA <$10 ; #D871
    LDA $0000, Y ; #D873
    CMP #$88 ; #D876
    BCS L7_D896 ; #D878
    LDA <$00, X ; #D87A
    CMP #$F0 ; #D87C
    BCS L7_D896 ; #D87E
L7_D880:
    TYA ; #D880
    TAX ; #D881
L7_D882:
    JSR L7_D9D6 ; #D882
    BCS L7_D896 ; #D885
    LDA <$2F ; #D887
    PHA ; #D889
    LDA #$02 ; #D88A
    STA <$2F ; #D88C
    JSR L7_DA50 ; #D88E
    PLA ; #D891
    BCS L7_D896 ; #D892
    STA <$2F ; #D894
L7_D896:
    JMP L7_D93F ; #D896
L7_D899:
    LDA $0000, Y ; #D899
    CMP #$89 ; #D89C
    BCC L7_D8BC ; #D89E
    LDA <$00, X ; #D8A0
    CMP #$11 ; #D8A2
    BCC L7_D8BC ; #D8A4
L7_D8A6:
    TYA ; #D8A6
    TAX ; #D8A7
L7_D8A8:
    JSR L7_D9CC ; #D8A8
    BCS L7_D8BC ; #D8AB
    LDA <$2F ; #D8AD
    PHA ; #D8AF
    LDA #$01 ; #D8B0
    STA <$2F ; #D8B2
    JSR L7_D9F6 ; #D8B4
    PLA ; #D8B7
    BCS L7_D8BC ; #D8B8
    STA <$2F ; #D8BA
L7_D8BC:
    JMP L7_D93F ; #D8BC
L7_D8BF:
    LDA <$00, X ; #D8BF
    SEC ; #D8C1
    SBC #$F0 ; #D8C2
    STA <$10 ; #D8C4
    JSR L7_D9CC ; #D8C6
    BCS L7_D8DE ; #D8C9
    LDA <$2F ; #D8CB
    PHA ; #D8CD
    LDA #$01 ; #D8CE
    STA <$2F ; #D8D0
    STX <$04 ; #D8D2
    JSR L7_D9F6 ; #D8D4
    LDX <$04 ; #D8D7
    PLA ; #D8D9
    BCS L7_D93F ; #D8DA
    STA <$2F ; #D8DC
L7_D8DE:
    LDA <ScrollX ; #D8DE
    CLC ; #D8E0
    ADC #$F0 ; #D8E1
    STA $04F0, X ; #D8E3
    LDA <$FD ; #D8E6
    ADC #$00 ; #D8E8
    STA $0500, X ; #D8EA
    TXA ; #D8ED
    EOR #$01 ; #D8EE
    TAY ; #D8F0
    LDA $0000, Y ; #D8F1
    CMP #$F1 ; #D8F4
    BCS L7_D933 ; #D8F6
    BCC L7_D93F ; #D8F8
L7_D8FA:
    LDA #$10 ; #D8FA
    SEC ; #D8FC
    SBC <$00, X ; #D8FD
    STA <$10 ; #D8FF
    JSR L7_D9D6 ; #D901
    BCS L7_D919 ; #D904
    LDA <$2F ; #D906
    PHA ; #D908
    LDA #$02 ; #D909
    STA <$2F ; #D90B
    STX <$04 ; #D90D
    JSR L7_DA50 ; #D90F
    LDX <$04 ; #D912
    PLA ; #D914
    BCS L7_D93F ; #D915
    STA <$2F ; #D917
L7_D919:
    LDA <ScrollX ; #D919
    CLC ; #D91B
    ADC #$10 ; #D91C
    STA $04F0, X ; #D91E
    LDA <$FD ; #D921
    ADC #$00 ; #D923
    STA $0500, X ; #D925
    TXA ; #D928
    EOR #$01 ; #D929
    TAY ; #D92B
    LDA $0000, Y ; #D92C
    CMP #$10 ; #D92F
    BCS L7_D93F ; #D931
L7_D933:
    LDA $04F0, X ; #D933
    STA $04F0, Y ; #D936
    LDA $0500, X ; #D939
    STA $0500, Y ; #D93C
L7_D93F:
    LDA <ScrollX ; #D93F
    BNE L7_D9B4 ; #D941
    LDA #$00 ; #D943
    STA <$10 ; #D945
    STA <$11 ; #D947
    LDA $04D0 ; #D949
    BPL L7_D966 ; #D94C
    LDA <$54 ; #D94E
    CMP #$0B ; #D950
    BEQ L7_D966 ; #D952
    LDA $0400 ; #D954
    BPL L7_D966 ; #D957
    LDA $0510 ; #D959
    SEC ; #D95C
    SBC <ScrollY ; #D95D
    BCS L7_D964 ; #D95F
    SBC #$0F ; #D961
    CLC ; #D963
L7_D964:
    STA <$10 ; #D964
L7_D966:
    LDA $04D1 ; #D966
    BPL L7_D983 ; #D969
    LDA <$55 ; #D96B
    CMP #$0B ; #D96D
    BEQ L7_D983 ; #D96F
    LDA $0401 ; #D971
    BPL L7_D983 ; #D974
    LDA $0511 ; #D976
    SEC ; #D979
    SBC <ScrollY ; #D97A
    BCS L7_D981 ; #D97C
    SBC #$0F ; #D97E
    CLC ; #D980
L7_D981:
    STA <$11 ; #D981
L7_D983:
    LDA <$10 ; #D983
    ORA <$11 ; #D985
    BEQ L7_D9B4 ; #D987
    LDA <$11 ; #D989
    BEQ L7_D9B5 ; #D98B
    LDA <$10 ; #D98D
    BNE L7_D998 ; #D98F
    LDA <$11 ; #D991
    STA <$10 ; #D993
    JMP L7_D9B5 ; #D995
L7_D998:
    LDA <$10 ; #D998
    CMP #$A0 ; #D99A
    BCS L7_D9B4 ; #D99C
    LDA <$11 ; #D99E
    CMP #$A0 ; #D9A0
    BCS L7_D9B4 ; #D9A2
    LDA <$11 ; #D9A4
    CMP <$10 ; #D9A6
    BCS L7_D9AE ; #D9A8
    LDA <$11 ; #D9AA
    STA <$10 ; #D9AC
L7_D9AE:
    LDA <$10 ; #D9AE
    CMP #$58 ; #D9B0
    BCC L7_D9B5 ; #D9B2
L7_D9B4:
    RTS ; #D9B4
L7_D9B5:
    LDA #$58 ; #D9B5
    SEC ; #D9B7
    SBC <$10 ; #D9B8
    BCC L7_D9CB ; #D9BA
    CMP #$09 ; #D9BC
    BCC L7_D9C2 ; #D9BE
    LDA #$04 ; #D9C0
L7_D9C2:
    STA <$10 ; #D9C2
    LDA #$08 ; #D9C4
    STA <$2F ; #D9C6
    JMP L7_DAFD ; #D9C8
L7_D9CB:
    RTS ; #D9CB
L7_D9CC:
    LDA <ScrollX ; #D9CC
    CLC ; #D9CE
    ADC <$10 ; #D9CF
    STA <$0C ; #D9D1
    JMP L7_D9E0 ; #D9D3
L7_D9D6:
    LDA <ScrollX ; #D9D6
    SEC ; #D9D8
    SBC <$10 ; #D9D9
    STA <$0C ; #D9DB
    JMP L7_D9E0 ; #D9DD
L7_D9E0:
    TXA ; #D9E0
    EOR #$01 ; #D9E1
    TAY ; #D9E3
    LDA $04F0, Y ; #D9E4
    SEC ; #D9E7
    SBC <$0C ; #D9E8
    CMP #$10 ; #D9EA
    BCC L7_D9F4 ; #D9EC
    CMP #$F1 ; #D9EE
    BCS L7_D9F4 ; #D9F0
    CLC ; #D9F2
    RTS ; #D9F3
L7_D9F4:
    SEC ; #D9F4
    RTS ; #D9F5
L7_D9F6:
    LDA <$31 ; #D9F6
    CMP #$04 ; #D9F8
    BNE L7_DA02 ; #D9FA
    LDA <$22 ; #D9FC
    CMP #$03 ; #D9FE
    BCC L7_DA4E ; #DA00
L7_DA02:
    LDY <$22 ; #DA02
    INY ; #DA04
    LDA [$34], Y ; #DA05
    AND #$40 ; #DA07
    BEQ L7_DA4E ; #DA09
    LDA <ScrollX ; #DA0B
    BNE L7_DA19 ; #DA0D
    LDA [$32], Y ; #DA0F
    BEQ L7_DA4E ; #DA11
    LDA <$FD ; #DA13
    CMP <$2C ; #DA15
    BEQ L7_DA4E ; #DA17
L7_DA19:
    LDA #$06 ; #DA19
    CMP <$10 ; #DA1B
    BCS L7_DA21 ; #DA1D
    STA <$10 ; #DA1F
L7_DA21:
    JSR L7_DB50 ; #DA21
    BCC L7_DA4E ; #DA24
    LDA <ScrollX ; #DA26
    CLC ; #DA28
    ADC <$10 ; #DA29
    STA <ScrollX ; #DA2B
    PHP ; #DA2D
    LDA <$FD ; #DA2E
    ADC #$00 ; #DA30
    STA <$FD ; #DA32
    PLP ; #DA34
    LDA <$22 ; #DA35
    ADC #$00 ; #DA37
    STA <$22 ; #DA39
    TAY ; #DA3B
    INY ; #DA3C
    LDA [$32], Y ; #DA3D
    BEQ L7_DA47 ; #DA3F
    LDA <$FD ; #DA41
    CMP <$2C ; #DA43
    BNE L7_DAAA ; #DA45
L7_DA47:
    LDA #$00 ; #DA47
    STA <ScrollX ; #DA49
    JMP L7_DAAA ; #DA4B
L7_DA4E:
    CLC ; #DA4E
    RTS ; #DA4F
L7_DA50:
    LDA <$31 ; #DA50
    CMP #$04 ; #DA52
    BNE L7_DA5C ; #DA54
    LDA <$22 ; #DA56
    CMP #$03 ; #DA58
    BCC L7_DA4E ; #DA5A
L7_DA5C:
    LDY <$22 ; #DA5C
    LDA [$34], Y ; #DA5E
    AND #$20 ; #DA60
    BEQ L7_DA4E ; #DA62
    LDA <ScrollX ; #DA64
    BNE L7_DA71 ; #DA66
    DEY ; #DA68
    LDA [$32], Y ; #DA69
    BEQ L7_DA4E ; #DA6B
    LDA <$FD ; #DA6D
    BEQ L7_DA4E ; #DA6F
L7_DA71:
    JSR L7_DB50 ; #DA71
    BCC L7_DA4E ; #DA74
    LDA #$06 ; #DA76
    CMP <$10 ; #DA78
    BCS L7_DA7E ; #DA7A
    STA <$10 ; #DA7C
L7_DA7E:
    LDA <ScrollX ; #DA7E
    SEC ; #DA80
    SBC <$10 ; #DA81
    STA <ScrollX ; #DA83
    PHP ; #DA85
    LDA <$FD ; #DA86
    SBC #$00 ; #DA88
    STA <$0E ; #DA8A
    PLP ; #DA8C
    LDA <$22 ; #DA8D
    SBC #$00 ; #DA8F
    STA <$0F ; #DA91
    TAY ; #DA93
    LDA [$32], Y ; #DA94
    BEQ L7_DA9C ; #DA96
    LDA <$0E ; #DA98
    BPL L7_DAA2 ; #DA9A
L7_DA9C:
    LDA #$00 ; #DA9C
    STA <ScrollX ; #DA9E
    BEQ L7_DAAA ; #DAA0
L7_DAA2:
    LDA <$0E ; #DAA2
    STA <$FD ; #DAA4
    LDA <$0F ; #DAA6
    STA <$22 ; #DAA8
L7_DAAA:
    JSR L7_DB90 ; #DAAA
    SEC ; #DAAD
    RTS ; #DAAE
L7_DAAF:
    LDA <ScrollY ; #DAAF
    BNE L7_DAC4 ; #DAB1
    LDA <$22 ; #DAB3
    CLC ; #DAB5
    ADC <$2E ; #DAB6
    TAY ; #DAB8
    LDA [$32], Y ; #DAB9
    BEQ L7_DAC3 ; #DABB
    LDA <$FB ; #DABD
    CMP <$2D ; #DABF
    BNE L7_DAC4 ; #DAC1
L7_DAC3:
    RTS ; #DAC3
L7_DAC4:
    JSR L7_DB6F ; #DAC4
    BCC L7_DAC3 ; #DAC7
    LDA <ScrollY ; #DAC9
    CLC ; #DACB
    ADC <$10 ; #DACC
    STA <ScrollY ; #DACE
    CMP #$F0 ; #DAD0
    BCC L7_DAFA ; #DAD2
    ADC #$0F ; #DAD4
    STA <ScrollY ; #DAD6
    LDA <$FB ; #DAD8
    ADC #$00 ; #DADA
    STA <$FB ; #DADC
    LDA <$22 ; #DADE
    CLC ; #DAE0
    ADC <$2E ; #DAE1
    STA <$22 ; #DAE3
    CLC ; #DAE5
    ADC <$2E ; #DAE6
    TAY ; #DAE8
    LDA [$32], Y ; #DAE9
    BEQ L7_DAF6 ; #DAEB
    LDA <$FB ; #DAED
    CMP <$2D ; #DAEF
    BEQ L7_DAF6 ; #DAF1
    JMP L7_DB4D ; #DAF3
L7_DAF6:
    LDA #$00 ; #DAF6
    STA <ScrollY ; #DAF8
L7_DAFA:
    JMP L7_DB4D ; #DAFA
L7_DAFD:
    LDA <ScrollY ; #DAFD
    BNE L7_DB11 ; #DAFF
    LDA <$22 ; #DB01
    TAY ; #DB03
    SEC ; #DB04
    SBC <$2E ; #DB05
    TAY ; #DB07
    LDA [$32], Y ; #DB08
    BEQ L7_DB10 ; #DB0A
    LDA <$FB ; #DB0C
    BNE L7_DB11 ; #DB0E
L7_DB10:
    RTS ; #DB10
L7_DB11:
    JSR L7_DB6F ; #DB11
    BCC L7_DB10 ; #DB14
    LDA <ScrollY ; #DB16
    SEC ; #DB18
    SBC <$10 ; #DB19
    STA <ScrollY ; #DB1B
    BCS L7_DB4D ; #DB1D
    SBC #$0F ; #DB1F
    STA <ScrollY ; #DB21
    LDY <$22 ; #DB23
    LDA [$34], Y ; #DB25
    BMI L7_DB3F ; #DB27
    LDA <$FB ; #DB29
    SBC #$01 ; #DB2B
    STA <$00 ; #DB2D
    LDA <$22 ; #DB2F
    SEC ; #DB31
    SBC <$2E ; #DB32
    STA <$01 ; #DB34
    TAY ; #DB36
    LDA [$32], Y ; #DB37
    BEQ L7_DB3F ; #DB39
    LDA <$00 ; #DB3B
    BPL L7_DB45 ; #DB3D
L7_DB3F:
    LDA #$00 ; #DB3F
    STA <ScrollY ; #DB41
    BEQ L7_DB4D ; #DB43
L7_DB45:
    LDA <$00 ; #DB45
    STA <$FB ; #DB47
    LDA <$01 ; #DB49
    STA <$22 ; #DB4B
L7_DB4D:
    JMP L7_DD1A ; #DB4D
L7_DB50:
    LDA <$2B ; #DB50
    AND #$03 ; #DB52
    BNE L7_DB69 ; #DB54
    LDA <ScrollY ; #DB56
    BNE L7_DB6B ; #DB58
    LDA <$20 ; #DB5A
    STA <$2B ; #DB5C
    AND #$01 ; #DB5E
    TAX ; #DB60
    LDA <$22 ; #DB61
    CLC ; #DB63
    ADC L7_DB6D, X ; #DB64
    STA <$23 ; #DB67
L7_DB69:
    SEC ; #DB69
    RTS ; #DB6A
L7_DB6B:
    CLC ; #DB6B
    RTS ; #DB6C

L7_DB6D:
    .db $FF ; #DB6D
    .db $01 ; #DB6E

L7_DB6F:
    LDA <$2B ; #DB6F
    AND #$0C ; #DB71
    BNE L7_DB8C ; #DB73
    LDA <ScrollX ; #DB75
    BNE L7_DB8E ; #DB77
    LDA <$22 ; #DB79
    CLC ; #DB7B
    ADC <$2E ; #DB7C
    STA <$23 ; #DB7E
    LDA #$00 ; #DB80
    STA <$2A ; #DB82
    STA <$29 ; #DB84
    LDA #$04 ; #DB86
    STA <$21 ; #DB88
    STA <$2B ; #DB8A
L7_DB8C:
    SEC ; #DB8C
    RTS ; #DB8D
L7_DB8E:
    CLC ; #DB8E
    RTS ; #DB8F


L7_DB90:
    LDA <ScrollX ; #DB90
    SEC ; #DB92
    SBC <$28 ; #DB93
    BPL L7_DB9C ; #DB95
    EOR #$FF
    CLC
    ADC #$01                            ; A = -A, clever, but why not just call INC after EOR?
L7_DB9C:
    STA <$05 ; #DB9C
    LDA <$2F ; #DB9E
    AND #$02 ; #DBA0
    BNE L7_DBB1 ; #DBA2
    LDA <$28 ; #DBA4
    AND #$01 ; #DBA6
    CLC ; #DBA8
    ADC <$05 ; #DBA9
    LSR A ; #DBAB
    STA <$05 ; #DBAC
    BNE L7_DBC0 ; #DBAE
    RTS ; #DBB0
L7_DBB1:
    LDA <$28 ; #DBB1
    EOR #$FF ; #DBB3
    AND #$01 ; #DBB5
    CLC ; #DBB7
    ADC <$05 ; #DBB8
    LSR A ; #DBBA
    STA <$05 ; #DBBB
    BNE L7_DBC0 ; #DBBD
    RTS ; #DBBF
L7_DBC0:
    LDA <$05 ; #DBC0
    STA <$1F ; #DBC2
    LDA <$2F ; #DBC4
    CMP <$20 ; #DBC6
    STA <$20 ; #DBC8
    BEQ L7_DBEC ; #DBCA
    AND #$02 ; #DBCC
    TAX ; #DBCE
    LDA <$25 ; #DBCF
    PHA ; #DBD1
    AND #$80 ; #DBD2
    STA <$06 ; #DBD4
    PLA ; #DBD6
    CLC ; #DBD7
    ADC L7_DD0A, X ; #DBD8
    STA <$25 ; #DBDB
    AND #$80 ; #DBDD
    CMP <$06 ; #DBDF
    BEQ L7_DBE4 ; #DBE1
    INX ; #DBE3
L7_DBE4:
    LDA <$23 ; #DBE4
    CLC ; #DBE6
    ADC L7_DD0E, X ; #DBE7
    STA <$23 ; #DBEA
L7_DBEC:
    LDY #$00 ; #DBEC
L7_DBEE:
    STY <$06 ; #DBEE
    LDA <$25 ; #DBF0
    PHA ; #DBF2
    AND #$07 ; #DBF3
    TAX ; #DBF5
    ASL A ; #DBF6
    ASL A ; #DBF7
    ASL A ; #DBF8
    STA <$24 ; #DBF9
    PLA ; #DBFB
    AND #$78 ; #DBFC
    LSR A ; #DBFE
    LSR A ; #DBFF
    PHA ; #DC00
    LSR A ; #DC01
    LSR A ; #DC02
    ORA <$24 ; #DC03
    STA <$24 ; #DC05
    ORA #$C0 ; #DC07
    STA $0375, Y ; #DC09
    PLA ; #DC0C
    ORA L7_E05B, X ; #DC0D
    STA $0361, Y ; #DC10
    CLC ; #DC13
    ADC #$20 ; #DC14
    STA $0366, Y ; #DC16
    ADC #$20 ; #DC19
    STA $036B, Y ; #DC1B
    ADC #$20 ; #DC1E
    STA $0370, Y ; #DC20
    LDA <$25 ; #DC23
    ROL A ; #DC25
    ROL A ; #DC26
    ROL A ; #DC27
    ROL A ; #DC28
    AND #$04                            ; Preserve nametable parity.
    ORA L7_E063, X ; #DC2B
    STA $0360, Y ; #DC2E
    STA $0365, Y ; #DC31
    STA $036A, Y ; #DC34
    STA $036F, Y ; #DC37
    ORA #$03 ; #DC3A
    STA $0374, Y ; #DC3C
    LDA #$01 ; #DC3F
    STA $0362, Y ; #DC41
    STA $0367, Y ; #DC44
    STA $036C, Y ; #DC47
    STA $0371, Y ; #DC4A
    LDA #$00 ; #DC4D
    STA $0376, Y ; #DC4F
    INY ; #DC52
    INY ; #DC53
    INY ; #DC54
    STY <$06 ; #DC55
    LDY <$23 ; #DC57
    JSR L7_E06B ; #DC59
    JSR L7_DF8A ; #DC5C
    LDY <$06 ; #DC5F
    LDA ($0360 - 2), Y ; #DC61
    AND #$02 ; #DC64
    TAX ; #DC66
L7_DC67:
    LDA $0140, X ; #DC67
    STA $0360, Y ; #DC6A
    LDA $0141, X ; #DC6D
    STA $0361, Y ; #DC70
    INY ; #DC73
    INY ; #DC74
    INY ; #DC75
    INY ; #DC76
    INY ; #DC77
    INX ; #DC78
    INX ; #DC79
    INX ; #DC7A
    INX ; #DC7B
    CPX #$10 ; #DC7C
    BCC L7_DC67 ; #DC7E
    LDA <$24 ; #DC80
    CMP #$38 ; #DC82
    BCC L7_DC96 ; #DC84
    TYA ; #DC86
    SBC #$0D ; #DC87
    TAY ; #DC89
    LDX #$02 ; #DC8A
L7_DC8C:
    LDA $036A, Y ; #DC8C
    STA $0360, Y ; #DC8F
    INY ; #DC92
    DEX ; #DC93
    BPL L7_DC8C ; #DC94
L7_DC96:
    STY <$06 ; #DC96
    LDA <$25 ; #DC98
    LSR A ; #DC9A
    LSR A ; #DC9B
    LSR A ; #DC9C
    AND #$01 ; #DC9D
    TAY ; #DC9F
    LDA <$25 ; #DCA0
    AND #$80 ; #DCA2
    LSR A ; #DCA4
    ORA <$24 ; #DCA5
    TAX ; #DCA7
    LDA <$10 ; #DCA8
    AND L7_DD16, Y ; #DCAA
    STA <$10 ; #DCAD
    LDA $0780, X ; #DCAF
    AND L7_DD18, Y ; #DCB2
    ORA <$10 ; #DCB5
    STA $0780, X ; #DCB7
    LDY <$06 ; #DCBA
    STA $0360, Y ; #DCBC
    INY ; #DCBF
    LDA #$FF ; #DCC0
    STA $0360, Y ; #DCC2
    TXA ; #DCC5
    ASL A ; #DCC6
    TAX ; #DCC7
    LDA <$25 ; #DCC8
    AND #$08 ; #DCCA
    BNE L7_DCD3 ; #DCCC
    LDA <$11 ; #DCCE
    JMP L7_DCD6 ; #DCD0
L7_DCD3:
    LDA <$12 ; #DCD3
    INX ; #DCD5
L7_DCD6:
    STA $0600, X ; #DCD6
    LDA <$2F ; #DCD9
    AND #$02 ; #DCDB
    TAX ; #DCDD
    LDA <$25 ; #DCDE
    CLC ; #DCE0
    ADC L7_DD12, X ; #DCE1
    STA <$25 ; #DCE4
    AND #$7F ; #DCE6
    CMP (L7_DD12 + 1), X ; #DCE8
    BNE L7_DCF5 ; #DCEB
    LDA <$23 ; #DCED
    CLC ; #DCEF
    ADC L7_DD12, X ; #DCF0
    STA <$23 ; #DCF3
L7_DCF5:
    DEC <$05 ; #DCF5
    BEQ L7_DCFC ; #DCF7
    JMP L7_DBEE ; #DCF9
L7_DCFC:
    LDA <DisplayDisabled ; #DCFC
    BEQ L7_DD03 ; #DCFE
    JMP L7_C115 ; #DD00
L7_DD03:
    INC <VRamBuffer1Dirty
    LDA <ScrollX ; #DD05
    STA <$28 ; #DD07
    RTS ; #DD09

L7_DD0A:
    .db $91 ; #DD0A
    .db $01 ; #DD0B
    .db $6F ; #DD0C
    .db $FF ; #DD0D

L7_DD0E:
    .db $02 ; #DD0E
    .db $01 ; #DD0F
    .db $FE ; #DD10
    .db $FF ; #DD11

L7_DD12:
    .db $01 ; #DD12
    .db $00 ; #DD13
    .db $FF ; #DD14
    .db $7F ; #DD15

L7_DD16:
    .db $33 ; #DD16
    .db $CC ; #DD17

L7_DD18:
    .db $CC ; #DD18
    .db $33 ; #DD19

L7_DD1A:
    LDA <ScrollY ; #DD1A
    SEC ; #DD1C
    SBC <$29 ; #DD1D
    BPL L7_DD26 ; #DD1F
    EOR #$FF ; #DD21
    CLC ; #DD23
    ADC #$01 ; #DD24
L7_DD26:
    AND #$0F ; #DD26
    LSR A ; #DD28
    LSR A ; #DD29
    LSR A ; #DD2A
    STA <$05 ; #DD2B
    BNE L7_DD30 ; #DD2D
    RTS ; #DD2F
L7_DD30:
    LDA <$2F ; #DD30
    CMP <$21 ; #DD32
    BEQ L7_DD53 ; #DD34
    AND #$04 ; #DD36
    TAX ; #DD38
    LDA <$2A ; #DD39
    CLC ; #DD3B
    ADC L7_DF62, X ; #DD3C
    CMP #$1E ; #DD3F
    BCC L7_DD4E ; #DD41
    CLC ; #DD43
    ADC (L7_DF62 + 2), X ; #DD44
    AND #$1F ; #DD47
    PHA ; #DD49
    JSR L7_DE8A ; #DD4A
    PLA ; #DD4D
L7_DD4E:
    STA <$2A ; #DD4E
    JSR L7_DE8A ; #DD50
L7_DD53:
    LDY #$00 ; #DD53
L7_DD55:
    STY <$06 ; #DD55
    TYA ; #DD57
    CLC ; #DD58
    ADC #$26 ; #DD59
    STA <$08 ; #DD5B
    LDA <$2F ; #DD5D
    CMP <$21 ; #DD5F
    STA <$21 ; #DD61
    BEQ L7_DD69 ; #DD63
    LDA #$08 ; #DD65
    BNE L7_DD6B ; #DD67
L7_DD69:
    AND #$04 ; #DD69
L7_DD6B:
    STA <$09 ; #DD6B
    LDA <$2A ; #DD6D
    AND #$03 ; #DD6F
    ORA <$09 ; #DD71
    STA <$09 ; #DD73
    LDY <$23 ; #DD75
    JSR L7_E06B ; #DD77
    LDY <$06 ; #DD7A
    LDA <$2A ; #DD7C
    PHA ; #DD7E
    AND #$1C ; #DD7F
    ASL A ; #DD81
    STA <$24 ; #DD82
    ORA #$C0 ; #DD84
    STA $0384, Y ; #DD86
    STA <$0C ; #DD89
    PLA ; #DD8B
    LSR A ; #DD8C
    LSR A ; #DD8D
    TAX ; #DD8E
    LDA <$FD ; #DD8F
    AND #$01 ; #DD91
    ASL A ; #DD93
    ASL A ; #DD94
    ORA L7_E063, X ; #DD95
    STA $0360, Y ; #DD98
    STA <$0B ; #DD9B
    ORA #$03 ; #DD9D
    STA $0383, Y ; #DD9F
    LDA <$2A ; #DDA2
    AND #$03 ; #DDA4
    ASL A ; #DDA6
    ASL A ; #DDA7
    STA <$07 ; #DDA8
    ASL A ; #DDAA
    ASL A ; #DDAB
    ASL A ; #DDAC
    ORA L7_E05B, X ; #DDAD
    STA $0361, Y ; #DDB0
    STA <$0A ; #DDB3
    LDA #$1F ; #DDB5
    STA $0362, Y ; #DDB7
    LDA #$07 ; #DDBA
    STA $0385, Y ; #DDBC
    INY ; #DDBF
    INY ; #DDC0
    INY ; #DDC1
L7_DDC2:
    STY <$06 ; #DDC2
    JSR L7_DF8A ; #DDC4
    LDY <$06 ; #DDC7
    LDX <$07 ; #DDC9
L7_DDCB:
    LDA $0140, X ; #DDCB
    STA $0360, Y ; #DDCE
    INY ; #DDD1
    INX ; #DDD2
    TXA ; #DDD3
    AND #$03 ; #DDD4
    BNE L7_DDCB ; #DDD6
    LDX <$09 ; #DDD8
    LDA L7_DF6A, X ; #DDDA
    BEQ L7_DE30 ; #DDDD
    AND <$10 ; #DDDF
    STA <$10 ; #DDE1
    STY <$06 ; #DDE3
    LDA <$FD ; #DDE5
    ROR A ; #DDE7
    ROR A ; #DDE8
    ROR A ; #DDE9
    AND #$40 ; #DDEA
    CLC ; #DDEC
    ADC <$24 ; #DDED
    TAY ; #DDEF
    LDA $0780, Y ; #DDF0
    AND $DF76, X ; #DDF3
    ORA <$10 ; #DDF6
    STA $0780, Y ; #DDF8
    LDX <$08 ; #DDFB
    STA $0360, X ; #DDFD
    INC <$08 ; #DE00
    TYA ; #DE02
    ASL A ; #DE03
    TAY ; #DE04
    LDA <$2A ; #DE05
    AND #$03 ; #DE07
    TAX ; #DE09
    LDA <$11 ; #DE0A
    AND $DF72, X ; #DE0C
    STA <$11 ; #DE0F
    LDA $0600, Y ; #DE11
    AND $DF7E, X ; #DE14
    ORA <$11 ; #DE17
    STA $0600, Y ; #DE19
    LDA <$12 ; #DE1C
    AND $DF72, X ; #DE1E
    STA <$12 ; #DE21
    LDA $0601, Y ; #DE23
    AND $DF7E, X ; #DE26
    ORA <$12 ; #DE29
    STA $0601, Y ; #DE2B
    LDY <$06 ; #DE2E
L7_DE30:
    LDA <$24 ; #DE30
    AND #$07 ; #DE32
    CMP #$07 ; #DE34
    BEQ L7_DE3C ; #DE36
    INC <$24 ; #DE38
    BNE L7_DDC2 ; #DE3A
L7_DE3C:
    LDX <$09 ; #DE3C
    LDA L7_DF6A, X ; #DE3E
    BEQ L7_DE48 ; #DE41
    TYA ; #DE43
    CLC ; #DE44
    ADC #$0B ; #DE45
    TAY ; #DE47
L7_DE48:
    STY <$06 ; #DE48
    JSR L7_DEA8 ; #DE4A
    LDY <$06 ; #DE4D
    LDA <$2F ; #DE4F
    AND #$04 ; #DE51
    TAX ; #DE53
    LDA <$2A ; #DE54
    CLC ; #DE56
    ADC L7_DF62, X ; #DE57
    CMP #$1E ; #DE5A
    BCC L7_DE64 ; #DE5C
    JSR L7_DE8A ; #DE5E
    LDA (L7_DF62 + 1), X ; #DE61
L7_DE64:
    STA <$2A ; #DE64
    LDA <$2F ; #DE66
    AND #$04 ; #DE68
    TAX ; #DE6A
    LDA <$29 ; #DE6B
    CLC ; #DE6D
    ADC L7_DF82, X ; #DE6E
    CMP #$F0 ; #DE71
    BCC L7_DE79 ; #DE73
    CLC ; #DE75
    ADC (L7_DF82 + 1), X ; #DE76
L7_DE79:
    STA <$29 ; #DE79
    DEC <$05 ; #DE7B
    BEQ L7_DE82 ; #DE7D
    JMP L7_DD55 ; #DE7F
L7_DE82:
    LDA #$FF ; #DE82
    STA $0360, Y ; #DE84
    STA <VRamBuffer1Dirty
    RTS ; #DE89
L7_DE8A:
    LDA <$2F ; #DE8A
    AND #$08 ; #DE8C
    BNE L7_DEA0 ; #DE8E
    LDA <$23 ; #DE90
    CLC ; #DE92
    ADC <$2E ; #DE93
    STA <$23 ; #DE95
    CMP #$05 ; #DE97
    BNE L7_DE9F ; #DE99
    LDA #$00 ; #DE9B
    STA <$23 ; #DE9D
L7_DE9F:
    RTS ; #DE9F
L7_DEA0:
    LDA <$23 ; #DEA0
    SEC ; #DEA2
    SBC <$2E ; #DEA3
    STA <$23 ; #DEA5
    RTS ; #DEA7
L7_DEA8:
    LDA <$FD ; #DEA8
    BEQ L7_DEB9 ; #DEAA
    CMP <$2C ; #DEAC
    BEQ L7_DEEE ; #DEAE
    JSR L7_DEB9 ; #DEB0
    BNE L7_DEB8 ; #DEB3
    JSR L7_DEEE ; #DEB5
L7_DEB8:
    RTS ; #DEB8
L7_DEB9:
    LDY <$23 ; #DEB9
    INY ; #DEBB
    LDA [$32], Y ; #DEBC
    BNE L7_DEC1 ; #DEBE
    RTS ; #DEC0
L7_DEC1:
    LDA <$24 ; #DEC1
    AND #$F8 ; #DEC3
    STA <$24 ; #DEC5
    JSR L7_E06B ; #DEC7
    JSR L7_DF8A ; #DECA
    LDY <$06 ; #DECD
    LDX <$07 ; #DECF
    LDA $0140, X ; #DED1
    STA $0363, Y ; #DED4
    LDA $0141, X ; #DED7
    STA $0364, Y ; #DEDA
    LDA <$0A ; #DEDD
    AND #$E0 ; #DEDF
    STA $0361, Y ; #DEE1
    LDA <$0C ; #DEE4
    AND #$F8 ; #DEE6
    STA $0366, Y ; #DEE8
    JMP L7_DF26 ; #DEEB
L7_DEEE:
    LDY <$23 ; #DEEE
    DEY ; #DEF0
    LDA [$32], Y ; #DEF1
    BNE L7_DEF6 ; #DEF3
    RTS ; #DEF5
L7_DEF6:
    LDA <$24 ; #DEF6
    AND #$F8 ; #DEF8
    ORA #$07 ; #DEFA
    STA <$24 ; #DEFC
    JSR L7_E06B ; #DEFE
    JSR L7_DF8A ; #DF01
    LDY <$06 ; #DF04
    LDX <$07 ; #DF06
    LDA $0142, X ; #DF08
    STA $0363, Y ; #DF0B
    LDA $0143, X ; #DF0E
    STA $0364, Y ; #DF11
    LDA <$0A ; #DF14
    AND #$E0 ; #DF16
    ORA #$1E ; #DF18
    STA $0361, Y ; #DF1A
    LDA <$0C ; #DF1D
    AND #$F8 ; #DF1F
    ORA #$07 ; #DF21
    STA $0366, Y ; #DF23
L7_DF26:
    LDA #$01 ; #DF26
    STA $0362, Y ; #DF28
    LDA <$0B ; #DF2B
    EOR #$04 ; #DF2D
    STA $0360, Y ; #DF2F
    ORA #$03 ; #DF32
    STA $0365, Y ; #DF34
    AND #$04 ; #DF37
    ASL A ; #DF39
    ASL A ; #DF3A
    ASL A ; #DF3B
    ASL A ; #DF3C
    ORA <$24 ; #DF3D
    TAX ; #DF3F
    LDA <$10 ; #DF40
    STA $0368, Y ; #DF42
    STA $0780, X ; #DF45
    TXA ; #DF48
    ASL A ; #DF49
    TAX ; #DF4A
    LDA <$11 ; #DF4B
    STA $0600, X ; #DF4D
    LDA <$12 ; #DF50
    STA $0601, X ; #DF52
    LDA #$00 ; #DF55
    STA $0367, Y ; #DF57
    TYA ; #DF5A
    CLC ; #DF5B
    ADC #$09 ; #DF5C
    TAY ; #DF5E
    STY <$06 ; #DF5F
    RTS ; #DF61


L7_DF62:
    .db $FF ; #DF62
    .db $1D ; #DF63
    .db $FE ; #DF64
    .db $FF ; #DF65

    .db $01 ; #DF66
    .db $00 ; #DF67
    .db $02 ; #DF68
    .db $01 ; #DF69

L7_DF6A:
    .db $00 ; #DF6A
    .db $0F ; #DF6B
    .db $00 ; #DF6C
    .db $F0 ; #DF6D
    .db $0F ; #DF6E
    .db $00 ; #DF6F
    .db $F0 ; #DF70
    .db $00 ; #DF71
    .db $0F ; #DF72
    .db $0F ; #DF73
    .db $F0 ; #DF74
    .db $F0 ; #DF75
    .db $00 ; #DF76
    .db $F0 ; #DF77
    .db $00 ; #DF78
    .db $0F ; #DF79
    .db $F0 ; #DF7A
    .db $00 ; #DF7B
    .db $0F ; #DF7C
    .db $00 ; #DF7D
    .db $F0 ; #DF7E
    .db $F0 ; #DF7F
    .db $0F ; #DF80
    .db $0F ; #DF81

L7_DF82:
    .db $F8 ; #DF82
    .db $F0 ; #DF83
    .db $00 ; #DF84
    .db $00 ; #DF85
    .db $08 ; #DF86
    .db $10 ; #DF87
    .db $00 ; #DF88
    .db $00 ; #DF89


L7_DF8A:
    LDA <$27 ; #DF8A
    BMI L7_DF8F ; #DF8C
    RTS ; #DF8E
L7_DF8F:
    JSR L7_E01B ; #DF8F
    LDA <$36 ; #DF92
    JSR SetFirstPrgBank ; #DF94
    LDY #$03 ; #DF97
    STY <$02 ; #DF99
    LDA #$00 ; #DF9B
    STA <$10 ; #DF9D
    STA <$11 ; #DF9F
    STA <$12 ; #DFA1
L7_DFA3:
    LDY <$02 ; #DFA3
    LDA L7_E04F, Y ; #DFA5
    STA <$03 ; #DFA8
    LDA [$00], Y ; #DFAA
    TAX ; #DFAC
    LDA $BEE0, X ; #DFAD
    STA <$04 ; #DFB0
    PHA ; #DFB2
    TXA ; #DFB3
    PHA ; #DFB4
    LDX L7_E053, Y ; #DFB5
    TYA ; #DFB8
    AND #$02 ; #DFB9
    BEQ L7_DFC4 ; #DFBB
    LDA <$04 ; #DFBD
    AND #$F0 ; #DFBF
    JMP L7_DFCA ; #DFC1
L7_DFC4:
    LDA <$04 ; #DFC4
    LSR A ; #DFC6
    LSR A ; #DFC7
    LSR A ; #DFC8
    LSR A ; #DFC9
L7_DFCA:
    STA <$04 ; #DFCA
    LDA <$11, X ; #DFCC
    AND L7_E057, X ; #DFCE
    ORA <$04 ; #DFD1
    STA <$11, X ; #DFD3
    PLA ; #DFD5
    TAX ; #DFD6
    PLA ; #DFD7
    AND #$03 ; #DFD8
    CPY #$00 ; #DFDA
    BEQ L7_DFE3 ; #DFDC
L7_DFDE:
    ASL A ; #DFDE
    ASL A ; #DFDF
    DEY ; #DFE0
    BNE L7_DFDE ; #DFE1
L7_DFE3:
    ORA <$10 ; #DFE3
    STA <$10 ; #DFE5
    LDY <$03 ; #DFE7
    LDA $BAE0, X ; #DFE9                ; TODO Disassemble banks 0 and 1. Create labels and ".org" sections.
    STA $0140, Y ; #DFEC
    LDA $BBE0, X ; #DFEF
    STA $0141, Y ; #DFF2
    LDA $BCE0, X ; #DFF5
    STA $0144, Y ; #DFF8
    LDA $BDE0, X ; #DFFB
    .db $99 ; #DFFE
    .db $45
 .bank 15
 .org $E000
    .db $01 ; STA $0145, Y              ; Shit won't compile without this split.
    DEC <$02 ; #E001
    BMI L7_E008 ; #E003
    JMP L7_DFA3 ; #E005
L7_E008:
    LDA <$24 ; #E008
    CMP #$38 ; #E00A
    BCC L7_E01A ; #E00C
    LDA <$11 ; #E00E
    AND #$0F ; #E010
    STA <$11 ; #E012
    LDA <$12 ; #E014
    AND #$0F ; #E016
    STA <$12 ; #E018
L7_E01A:
    RTS ; #E01A
L7_E01B:
    LDA #$00 ; #E01B
    LDX <$36 ; #E01D
    CPX #$06 ; #E01F
    BCC L7_E025 ; #E021
    LDA #BANK_1 ; #E023
L7_E025:
    JSR SetFirstPrgBank ; #E025
    LDA #$00 ; #E028
    STA <$01 ; #E02A
    LDA <$24 ; #E02C
    AND #$07 ; #E02E
    TAX ; #E030
    LDY <$24 ; #E031
    LDA [$26], Y ; #E033
    ASL A ; #E035
    ROL <$01 ; #E036
    ASL A ; #E038
    ROL <$01 ; #E039
    CLC ; #E03B
    ADC #$E0 ; #E03C
    STA <$00 ; #E03E
    LDA <$01 ; #E040
    ADC #$B6 ; #E042
    STA <$01 ; #E044
    RTS ; #E046


    .db $80 ; #E047
    .db $40 ; #E048
    .db $20 ; #E049
    .db $10 ; #E04A
    .db $08 ; #E04B
    .db $04 ; #E04C
    .db $02 ; #E04D
    .db $01 ; #E04E


L7_E04F:
    .db $00 ; #E04F
    .db $02 ; #E050
    .db $08 ; #E051
    .db $0A ; #E052

L7_E053:
    .db $00 ; #E053
    .db $01 ; #E054
    .db $00 ; #E055
    .db $01 ; #E056

L7_E057:
    .db $F0 ; #E057
    .db $F0 ; #E058
    .db $0F ; #E059
    .db $0F ; #E05A

L7_E05B:
    .db $00 ; #E05B
    .db $80 ; #E05C
    .db $00 ; #E05D
    .db $80 ; #E05E
    .db $00 ; #E05F
    .db $80 ; #E060
    .db $00 ; #E061
    .db $80 ; #E062

L7_E063:
    .db $20 ; #E063
    .db $20 ; #E064
    .db $21 ; #E065
    .db $21 ; #E066
    .db $22 ; #E067
    .db $22 ; #E068
    .db $23 ; #E069
    .db $23 ; #E06A

L7_E06B:
    LDX #$00 ; #E06B
    STX <$00 ; #E06D
    LDA [$32], Y ; #E06F
    ASL A ; #E071
    ROL <$00 ; #E072
    ASL A ; #E074
    ROL <$00 ; #E075
    ASL A ; #E077
    ROL <$00 ; #E078
    ASL A ; #E07A
    ROL <$00 ; #E07B
    ASL A ; #E07D
    ROL <$00 ; #E07E
    ASL A ; #E080
    ROL <$00 ; #E081
    STA <$26 ; #E083
    LDA <$00 ; #E085
    STA <$27 ; #E087
    LDA <$26 ; #E089
    ADC #$C0 ; #E08B
    STA <$26 ; #E08D
    LDA <$27 ; #E08F
    ADC #$7F ; #E091
    STA <$27 ; #E093
    RTS ; #E095


L7_E096:
    JSR L7_C247 ; #E096
    LDX <$31 ; #E099

    LDA L7_E287, X ; #E09B
    STA <$32 ; #E09E

    LDA L7_E296, X ; #E0A0
    STA <$33 ; #E0A3

    LDA L7_E2A5, X ; #E0A5
    STA <$34 ; #E0A8

    LDA L7_E2B4, X ; #E0AA
    STA <$35 ; #E0AD

    LDA ZonesPrgBankArray, X
    STA <$36 ; #E0B2

    LDA L7_E200, X ; #E0B4
    STA <$22 ; #E0B7
    STA <$23 ; #E0B9

    LDA L7_E20F, X ; #E0BB
    STA <$FB ; #E0BE
    STA $0520 ; #E0C0
    STA $0521 ; #E0C3
    STA <$2D ; #E0C6

    LDA #$00 ; #E0C8
    STA <$FD ; #E0CA
    STA $0500 ; #E0CC
    STA $0501 ; #E0CF

    LDY L7_E21E, X ; #E0D2
    STY <$2C ; #E0D5
    INY ; #E0D7
    STY <$2E ; #E0D8

    LDA ZonesChr0Array, X
    STA <NextChrBank0

    LDA ZonesChr1Array, X
    STA <NextChrBank1

    LDA ZonesMusicArray, X
    LDY <DemoStatus ; #E0E7
    BNE L7_E0EE ; #E0E9
    JSR L7_F377 ; #E0EB
L7_E0EE:
    LDA ZonesPalAnimationArray, X
    STA <PalettesAnimType
    LDA ZonesBackgroundPalArray, X
    STX <$02
    JSR SetBackgroundPalette
    LDX <$02
    LDA ZonesSpritesPalArray, X
    JSR SetSpritesPalette ; #E100
    JSR L7_E179 ; #E103
    JSR MapScreenHideBeatenZones ; #E106
    JSR EnableDisplay ; #E109
    JSR WaitNmiAndReadInputs ; #E10C
    LDA #$00 ; #E10F
    STA <PalettesAnimCounter ; #E111
    STA <PalettesAnimFrame ; #E113
    LDA <$31 ; #E115
    CMP #$0D ; #E117
    BNE L7_E176 ; #E119

    LDX <TwoPlayersMode
L7_E11D:
    LDA <$54, X ; #E11D
    CMP #$0C ; #E11F
    BEQ L7_E13E ; #E121
    LDA #$80 ; #E123
    STA $04D0, X ; #E125
    LDA L7_E1ED, X ; #E128
    STA $0400, X ; #E12B
    LDA #$B4 ; #E12E
    STA $0510, X ; #E130
    LDA L7_E1EF, X ; #E133
    STA $04F0, X ; #E136
    LDA #$00 ; #E139
    STA $0420, X ; #E13B
L7_E13E:
    DEX
    BPL L7_E11D ; #E13F

    LDX #$01 ; #E141
L7_E143:
    LDA #$80 ; #E143
    STA $04DE, X ; #E145
    STA $04FE, X ; #E148
    ORA #$10 ; #E14B
    STA $040E, X ; #E14D
    LDA L7_E1EB, X ; #E150
    STA $051E, X ; #E153
    LDA #$22 ; #E156
    STA $042E, X ; #E158
    LDA #$00 ; #E15B
    STA $052E, X ; #E15D
    STA $050E, X ; #E160
    STA $041E, X ; #E163
    STA $043E, X ; #E166
    LDA #$80 ; #E169
    STA $057E, X ; #E16B
    LDA #$10 ; #E16E
    STA $04EE, X ; #E170
    DEX ; #E173
    BPL L7_E143 ; #E174

L7_E176:
    JMP L7_C253 ; #E176

L7_E179:
    JSR DisableDisplay ; #E179
    JSR L7_C235 ; #E17C
    LDX <TwoPlayersMode
L7_E181:
    LDA $0400, X ; #E181
    AND #$DF ; #E184
    STA $0400, X ; #E186
    LDA <$54, X                         ; something something player status
    CMP #$0B ; #E18B
    BNE L7_E193 ; #E18D
    LDA #$00 ; #E18F
    STA <$54, X ; #E191
L7_E193:
    DEX ; #E193
    BPL L7_E181 ; #E194

    LDA #$01 ; #E196
    STA <$52 ; #E198
    STA <$20 ; #E19A
    STA <$2B ; #E19C
    STA <$2F ; #E19E
    LDA #$04 ; #E1A0
    STA <$21 ; #E1A2
    LDA #$00 ; #E1A4
    STA <ScrollX ; #E1A6
    STA <ScrollY ; #E1A8
    STA <$28 ; #E1AA
    STA <$29 ; #E1AC
    STA <$70 ; #E1AE
    STA <$71 ; #E1B0
    LDA <$FD ; #E1B2
    ROR A ; #E1B4
    ROR A ; #E1B5
    AND #$80 ; #E1B6
    STA <$25 ; #E1B8
    EOR #$80 ; #E1BA
    ORA #$08 ; #E1BC
    STA <$0F ; #E1BE
    LDA <$23 ; #E1C0
    BEQ L7_E1CC ; #E1C2
    DEC <$23 ; #E1C4
    LDA <$0F ; #E1C6
    ORA #$70 ; #E1C8
    STA <$25 ; #E1CA
L7_E1CC:
    LDA #$01 ; #E1CC
    STA <$05 ; #E1CE
    JSR L7_DBEC ; #E1D0
    LDA <$25 ; #E1D3
    CMP <$0F ; #E1D5
    BNE L7_E1CC ; #E1D7
    LDA <$31 ; #E1D9
    CMP #ZONE_MAP_1
    BCS L7_E1EA                         ; Return if not level zone?
    LDA #BANK_4
    JSR SetFirstPrgBank
    JSR L4_8040 ; #E1E4
    JSR L4_8090 ; #E1E7
L7_E1EA:
    RTS

L7_E1EB:
    .db $38 ; #E1EB
    .db $B8 ; #E1EC

L7_E1ED:
    .db $D0 ; #E1ED
    .db $90 ; #E1EE

L7_E1EF:
    .db $18 ; #E1EF
    .db $E8 ; #E1F0

    ;   0    A    B    C    D    E    F    G    H    I    J    M1   M2   ?    ?
ZonesPrgBankArray:
    .db $00, $01, $01, $03, $02, $06, $04, $03, $06, $04, $05, $05, $05, $02, $02

L7_E200:
    .db $23, $15, $10, $10, $18, $10, $20, $18, $20, $10, $18, $05, $00, $00, $00

L7_E20F:
    .db $05, $07, $02, $02, $03, $02, $04, $03, $04, $02, $03, $05, $05, $00, $00

L7_E21E:
    .db $06, $02, $07, $07, $07, $07, $07, $07, $07, $07, $07, $00, $00, $00, $00

ZonesChr0Array:
    .db $80, $81, $80, $83, $84, $86, $85, $88, $81, $86, $87, $8C, $8C, $80, $9D

ZonesChr1Array:
    .db $90, $92, $93, $94, $95, $96, $97, $98, $99, $9A, $9B, $9E, $9E, $9D, $9D

ZonesBackgroundPalArray:
    .db $00, $02, $03, $05, $06, $08, $0B, $0C, $11, $0E, $10, $16, $16, $18, $18

ZonesMusicArray:
    .db $00, $05, $01, $05, $02, $05, $06, $03, $06, $06, $04, $09, $09, $F0, $0B

ZonesSpritesPalArray:
    .db $00, $01, $00, $03, $04, $06, $05, $08, $0C, $06, $07, $10, $10, $00, $12

ZonesPalAnimationArray:
    .db $00, $00, $00, $00, $00, $00, $00, $00, $97, $93, $8E, $00, $00, $00, $00

L7_E287:
    .db LOW(L7_E2C3)
    .db LOW(L7_E2ED)
    .db LOW(L7_E305)
    .db LOW(L7_E31D)
    .db LOW(L7_E335)
    .db LOW(L7_E355)
    .db LOW(L7_E36D)
    .db LOW(L7_E395)
    .db LOW(L7_E3B5)
    .db LOW(L7_E3DD)
    .db LOW(L7_E3F5)
    .db LOW(L7_E415)
    .db LOW(L7_E415)
    .db LOW(L7_E41B)
    .db LOW(L7_E41B)

L7_E296:
    .db HIGH(L7_E2C3)
    .db HIGH(L7_E2ED)
    .db HIGH(L7_E305)
    .db HIGH(L7_E31D)
    .db HIGH(L7_E335)
    .db HIGH(L7_E355)
    .db HIGH(L7_E36D)
    .db HIGH(L7_E395)
    .db HIGH(L7_E3B5)
    .db HIGH(L7_E3DD)
    .db HIGH(L7_E3F5)
    .db HIGH(L7_E415)
    .db HIGH(L7_E415)
    .db HIGH(L7_E41B)
    .db HIGH(L7_E41B)

L7_E2A5:
    .db LOW(L7_E41C)
    .db LOW(L7_E446)
    .db LOW(L7_E45E)
    .db LOW(L7_E476)
    .db LOW(L7_E48E)
    .db LOW(L7_E4AE)
    .db LOW(L7_E4C6)
    .db LOW(L7_E4EE)
    .db LOW(L7_E50E)
    .db LOW(L7_E536)
    .db LOW(L7_E54E)
    .db LOW(L7_E56E)
    .db LOW(L7_E56E)
    .db LOW(L7_E574)
    .db LOW(L7_E574)

L7_E2B4:
    .db HIGH(L7_E41C)
    .db HIGH(L7_E446)
    .db HIGH(L7_E45E)
    .db HIGH(L7_E476)
    .db HIGH(L7_E48E)
    .db HIGH(L7_E4AE)
    .db HIGH(L7_E4C6)
    .db HIGH(L7_E4EE)
    .db HIGH(L7_E50E)
    .db HIGH(L7_E536)
    .db HIGH(L7_E54E)
    .db HIGH(L7_E56E)
    .db HIGH(L7_E56E)
    .db HIGH(L7_E574)
    .db HIGH(L7_E574)

L7_E2C3:
    .db $16 ; #E2C3
    .db $17 ; #E2C4
    .db $18 ; #E2C5
    .db $19 ; #E2C6
    .db $1A ; #E2C7
    .db $1B ; #E2C8
    .db $00 ; #E2C9
    .db $0F ; #E2CA
    .db $10 ; #E2CB
    .db $11 ; #E2CC
    .db $12 ; #E2CD
    .db $13 ; #E2CE
    .db $14 ; #E2CF
    .db $15 ; #E2D0
    .db $0E ; #E2D1
    .db $00 ; #E2D2
    .db $00 ; #E2D3
    .db $00 ; #E2D4
    .db $1D ; #E2D5
    .db $00 ; #E2D6
    .db $1C ; #E2D7
    .db $08 ; #E2D8
    .db $09 ; #E2D9
    .db $0A ; #E2DA
    .db $0B ; #E2DB
    .db $0C ; #E2DC
    .db $0D ; #E2DD
    .db $00 ; #E2DE
    .db $00 ; #E2DF
    .db $00 ; #E2E0
    .db $00 ; #E2E1
    .db $00 ; #E2E2
    .db $00 ; #E2E3
    .db $07 ; #E2E4
    .db $00 ; #E2E5
    .db $01 ; #E2E6
    .db $02 ; #E2E7
    .db $03 ; #E2E8
    .db $04 ; #E2E9
    .db $05 ; #E2EA
    .db $06 ; #E2EB
    .db $00 ; #E2EC

L7_E2ED:
    .db $3D ; #E2ED
    .db $00 ; #E2EE
    .db $00 ; #E2EF
    .db $00 ; #E2F0
    .db $00 ; #E2F1
    .db $3C ; #E2F2
    .db $00 ; #E2F3
    .db $00 ; #E2F4
    .db $3B ; #E2F5
    .db $00 ; #E2F6
    .db $00 ; #E2F7
    .db $3A ; #E2F8
    .db $00 ; #E2F9
    .db $00 ; #E2FA
    .db $39 ; #E2FB
    .db $00 ; #E2FC
    .db $00 ; #E2FD
    .db $38 ; #E2FE
    .db $00 ; #E2FF
    .db $00 ; #E300
    .db $37 ; #E301
    .db $34 ; #E302
    .db $35 ; #E303
    .db $36 ; #E304

L7_E305:
    .db $2B ; #E305
    .db $2C ; #E306
    .db $2D ; #E307
    .db $2E ; #E308
    .db $2F ; #E309
    .db $30 ; #E30A
    .db $31 ; #E30B
    .db $32 ; #E30C
    .db $23 ; #E30D
    .db $24 ; #E30E
    .db $25 ; #E30F
    .db $26 ; #E310
    .db $27 ; #E311
    .db $28 ; #E312
    .db $29 ; #E313
    .db $2A ; #E314
    .db $1E ; #E315
    .db $1F ; #E316
    .db $20 ; #E317
    .db $21 ; #E318
    .db $22 ; #E319
    .db $00 ; #E31A
    .db $00 ; #E31B
    .db $33 ; #E31C

L7_E31D:
    .db $63 ; #E31D
    .db $64 ; #E31E
    .db $65 ; #E31F
    .db $66 ; #E320
    .db $67 ; #E321
    .db $68 ; #E322
    .db $69 ; #E323
    .db $6A ; #E324
    .db $00 ; #E325
    .db $00 ; #E326
    .db $00 ; #E327
    .db $00 ; #E328
    .db $5F ; #E329
    .db $60 ; #E32A
    .db $61 ; #E32B
    .db $62 ; #E32C
    .db $5A ; #E32D
    .db $5B ; #E32E
    .db $5C ; #E32F
    .db $5D ; #E330
    .db $5E ; #E331
    .db $00 ; #E332
    .db $00 ; #E333
    .db $00 ; #E334

L7_E335:
    .db $57 ; #E335
    .db $00 ; #E336
    .db $00 ; #E337
    .db $52 ; #E338
    .db $53 ; #E339
    .db $54 ; #E33A
    .db $55 ; #E33B
    .db $56 ; #E33C
    .db $4E ; #E33D
    .db $4F ; #E33E
    .db $50 ; #E33F
    .db $51 ; #E340
    .db $00 ; #E341
    .db $58 ; #E342
    .db $00 ; #E343
    .db $00 ; #E344
    .db $46 ; #E345
    .db $47 ; #E346
    .db $48 ; #E347
    .db $49 ; #E348
    .db $4A ; #E349
    .db $4B ; #E34A
    .db $4C ; #E34B
    .db $4D ; #E34C
    .db $3E ; #E34D
    .db $3F ; #E34E
    .db $40 ; #E34F
    .db $41 ; #E350
    .db $42 ; #E351
    .db $43 ; #E352
    .db $44 ; #E353
    .db $45 ; #E354

L7_E355:
    .db $27 ; #E355
    .db $28 ; #E356
    .db $13 ; #E357
    .db $14 ; #E358
    .db $15 ; #E359
    .db $00 ; #E35A
    .db $16 ; #E35B
    .db $00 ; #E35C
    .db $1F ; #E35D
    .db $20 ; #E35E
    .db $21 ; #E35F
    .db $22 ; #E360
    .db $23 ; #E361
    .db $24 ; #E362
    .db $25 ; #E363
    .db $26 ; #E364
    .db $17 ; #E365
    .db $18 ; #E366
    .db $19 ; #E367
    .db $1A ; #E368
    .db $1B ; #E369
    .db $1C ; #E36A
    .db $1D ; #E36B
    .db $1E ; #E36C

L7_E36D:
    .db $00 ; #E36D
    .db $8F ; #E36E
    .db $00 ; #E36F
    .db $00 ; #E370
    .db $00 ; #E371
    .db $00 ; #E372
    .db $00 ; #E373
    .db $00 ; #E374
    .db $00 ; #E375
    .db $8E ; #E376
    .db $00 ; #E377
    .db $00 ; #E378
    .db $00 ; #E379
    .db $00 ; #E37A
    .db $00 ; #E37B
    .db $00 ; #E37C
    .db $00 ; #E37D
    .db $8D ; #E37E
    .db $00 ; #E37F
    .db $00 ; #E380
    .db $00 ; #E381
    .db $00 ; #E382
    .db $00 ; #E383
    .db $00 ; #E384
    .db $00 ; #E385
    .db $8C ; #E386
    .db $00 ; #E387
    .db $00 ; #E388
    .db $00 ; #E389
    .db $00 ; #E38A
    .db $00 ; #E38B
    .db $00 ; #E38C
    .db $84 ; #E38D
    .db $85 ; #E38E
    .db $86 ; #E38F
    .db $87 ; #E390
    .db $88 ; #E391
    .db $89 ; #E392
    .db $8A ; #E393
    .db $8B ; #E394

L7_E395:
    .db $00 ; #E395
    .db $00 ; #E396
    .db $00 ; #E397
    .db $00 ; #E398
    .db $00 ; #E399
    .db $00 ; #E39A
    .db $00 ; #E39B
    .db $83 ; #E39C
    .db $7B ; #E39D
    .db $7C ; #E39E
    .db $7D ; #E39F
    .db $7E ; #E3A0
    .db $7F ; #E3A1
    .db $80 ; #E3A2
    .db $81 ; #E3A3
    .db $82 ; #E3A4
    .db $73 ; #E3A5
    .db $74 ; #E3A6
    .db $75 ; #E3A7
    .db $76 ; #E3A8
    .db $77 ; #E3A9
    .db $78 ; #E3AA
    .db $79 ; #E3AB
    .db $7A ; #E3AC
    .db $6B ; #E3AD
    .db $6C ; #E3AE
    .db $6D ; #E3AF
    .db $6E ; #E3B0
    .db $6F ; #E3B1
    .db $70 ; #E3B2
    .db $71 ; #E3B3
    .db $72 ; #E3B4

L7_E3B5:
    .db $0C ; #E3B5
    .db $0D ; #E3B6
    .db $0E ; #E3B7
    .db $0F ; #E3B8
    .db $10 ; #E3B9
    .db $11 ; #E3BA
    .db $12 ; #E3BB
    .db $00 ; #E3BC
    .db $00 ; #E3BD
    .db $00 ; #E3BE
    .db $00 ; #E3BF
    .db $00 ; #E3C0
    .db $08 ; #E3C1
    .db $09 ; #E3C2
    .db $0A ; #E3C3
    .db $0B ; #E3C4
    .db $00 ; #E3C5
    .db $00 ; #E3C6
    .db $00 ; #E3C7
    .db $00 ; #E3C8
    .db $07 ; #E3C9
    .db $00 ; #E3CA
    .db $00 ; #E3CB
    .db $00 ; #E3CC
    .db $00 ; #E3CD
    .db $00 ; #E3CE
    .db $00 ; #E3CF
    .db $00 ; #E3D0
    .db $06 ; #E3D1
    .db $00 ; #E3D2
    .db $00 ; #E3D3
    .db $00 ; #E3D4
    .db $01 ; #E3D5
    .db $02 ; #E3D6
    .db $03 ; #E3D7
    .db $04 ; #E3D8
    .db $05 ; #E3D9
    .db $00 ; #E3DA
    .db $00 ; #E3DB
    .db $00 ; #E3DC

L7_E3DD:
    .db $00 ; #E3DD
    .db $00 ; #E3DE
    .db $00 ; #E3DF
    .db $00 ; #E3E0
    .db $00 ; #E3E1
    .db $A0 ; #E3E2
    .db $00 ; #E3E3
    .db $A1 ; #E3E4
    .db $98 ; #E3E5
    .db $99 ; #E3E6
    .db $9A ; #E3E7
    .db $9B ; #E3E8
    .db $9C ; #E3E9
    .db $9D ; #E3EA
    .db $9E ; #E3EB
    .db $9F ; #E3EC
    .db $90 ; #E3ED
    .db $91 ; #E3EE
    .db $92 ; #E3EF
    .db $93 ; #E3F0
    .db $94 ; #E3F1
    .db $95 ; #E3F2
    .db $96 ; #E3F3
    .db $97 ; #E3F4

L7_E3F5:
    .db $00 ; #E3F5
    .db $00 ; #E3F6
    .db $00 ; #E3F7
    .db $00 ; #E3F8
    .db $00 ; #E3F9
    .db $00 ; #E3FA
    .db $00 ; #E3FB
    .db $BA ; #E3FC
    .db $B2 ; #E3FD
    .db $B3 ; #E3FE
    .db $B4 ; #E3FF
    .db $B5 ; #E400
    .db $B6 ; #E401
    .db $B7 ; #E402
    .db $B8 ; #E403
    .db $B9 ; #E404
    .db $AA ; #E405
    .db $AB ; #E406
    .db $AC ; #E407
    .db $AD ; #E408
    .db $AE ; #E409
    .db $AF ; #E40A
    .db $B0 ; #E40B
    .db $B1 ; #E40C
    .db $A2 ; #E40D
    .db $A3 ; #E40E
    .db $A4 ; #E40F
    .db $A5 ; #E410
    .db $A6 ; #E411
    .db $A7 ; #E412
    .db $A8 ; #E413
    .db $A9 ; #E414

L7_E415:
    .db $C0 ; #E415
    .db $BF ; #E416
    .db $BE ; #E417
    .db $BD ; #E418
    .db $BC ; #E419
    .db $BB ; #E41A

L7_E41B:
    .db $59 ; #E41B


L7_E41C:
    .db $C0 ; #E41C
    .db $C0 ; #E41D
    .db $C0 ; #E41E
    .db $C0 ; #E41F
    .db $C0 ; #E420
    .db $C2 ; #E421
    .db $00 ; #E422
    .db $E0 ; #E423
    .db $C0 ; #E424
    .db $C0 ; #E425
    .db $C0 ; #E426
    .db $C0 ; #E427
    .db $C0 ; #E428
    .db $C1 ; #E429
    .db $00 ; #E42A
    .db $00 ; #E42B
    .db $00 ; #E42C
    .db $00 ; #E42D
    .db $80 ; #E42E
    .db $00 ; #E42F
    .db $98 ; #E430
    .db $20 ; #E431
    .db $A0 ; #E432
    .db $A0 ; #E433
    .db $A0 ; #E434
    .db $E0 ; #E435
    .db $E0 ; #E436
    .db $00 ; #E437
    .db $00 ; #E438
    .db $00 ; #E439
    .db $00 ; #E43A
    .db $00 ; #E43B
    .db $00 ; #E43C
    .db $00 ; #E43D
    .db $00 ; #E43E
    .db $C0 ; #E43F
    .db $C0 ; #E440
    .db $C0 ; #E441
    .db $C0 ; #E442
    .db $C0 ; #E443
    .db $40 ; #E444
    .db $00 ; #E445

L7_E446:
    .db $80 ; #E446
    .db $00 ; #E447
    .db $00 ; #E448
    .db $00 ; #E449
    .db $00 ; #E44A
    .db $83 ; #E44B
    .db $00 ; #E44C
    .db $00 ; #E44D
    .db $00 ; #E44E
    .db $00 ; #E44F
    .db $00 ; #E450
    .db $00 ; #E451
    .db $00 ; #E452
    .db $00 ; #E453
    .db $00 ; #E454
    .db $00 ; #E455
    .db $00 ; #E456
    .db $00 ; #E457
    .db $00 ; #E458
    .db $00 ; #E459
    .db $00 ; #E45A
    .db $C0 ; #E45B
    .db $C0 ; #E45C
    .db $40 ; #E45D

L7_E45E:
    .db $C0 ; #E45E
    .db $C0 ; #E45F
    .db $C0 ; #E460
    .db $C0 ; #E461
    .db $C0 ; #E462
    .db $C0 ; #E463
    .db $C0 ; #E464
    .db $C6 ; #E465
    .db $C0 ; #E466
    .db $C0 ; #E467
    .db $C0 ; #E468
    .db $C0 ; #E469
    .db $C0 ; #E46A
    .db $C0 ; #E46B
    .db $C0 ; #E46C
    .db $C5 ; #E46D
    .db $C0 ; #E46E
    .db $C0 ; #E46F
    .db $C0 ; #E470
    .db $C0 ; #E471
    .db $C4 ; #E472
    .db $00 ; #E473
    .db $00 ; #E474
    .db $80 ; #E475

L7_E476:
    .db $C0 ; #E476
    .db $C0 ; #E477
    .db $C0 ; #E478
    .db $C0 ; #E479
    .db $C0 ; #E47A
    .db $C0 ; #E47B
    .db $C0 ; #E47C
    .db $D9 ; #E47D
    .db $00 ; #E47E
    .db $00 ; #E47F
    .db $00 ; #E480
    .db $00 ; #E481
    .db $E0 ; #E482
    .db $C0 ; #E483
    .db $C0 ; #E484
    .db $C7 ; #E485
    .db $C0 ; #E486
    .db $C0 ; #E487
    .db $C0 ; #E488
    .db $C0 ; #E489
    .db $40 ; #E48A
    .db $00 ; #E48B
    .db $00 ; #E48C
    .db $00 ; #E48D

L7_E48E:
    .db $80 ; #E48E
    .db $00 ; #E48F
    .db $00 ; #E490
    .db $E0 ; #E491
    .db $C0 ; #E492
    .db $C0 ; #E493
    .db $C0 ; #E494
    .db $CA ; #E495
    .db $C0 ; #E496
    .db $C0 ; #E497
    .db $C0 ; #E498
    .db $40 ; #E499
    .db $00 ; #E49A
    .db $80 ; #E49B
    .db $00 ; #E49C
    .db $00 ; #E49D
    .db $C0 ; #E49E
    .db $C0 ; #E49F
    .db $C0 ; #E4A0
    .db $C0 ; #E4A1
    .db $C0 ; #E4A2
    .db $C0 ; #E4A3
    .db $C0 ; #E4A4
    .db $C9 ; #E4A5
    .db $C0 ; #E4A6
    .db $C0 ; #E4A7
    .db $C0 ; #E4A8
    .db $C0 ; #E4A9
    .db $C0 ; #E4AA
    .db $C0 ; #E4AB
    .db $C0 ; #E4AC
    .db $C8 ; #E4AD

L7_E4AE:
    .db $C0 ; #E4AE
    .db $C0 ; #E4AF
    .db $C0 ; #E4B0
    .db $C0 ; #E4B1
    .db $CD ; #E4B2
    .db $00 ; #E4B3
    .db $80 ; #E4B4
    .db $00 ; #E4B5
    .db $C0 ; #E4B6
    .db $C0 ; #E4B7
    .db $C0 ; #E4B8
    .db $C0 ; #E4B9
    .db $C0 ; #E4BA
    .db $C0 ; #E4BB
    .db $C0 ; #E4BC
    .db $CC ; #E4BD
    .db $C0 ; #E4BE
    .db $C0 ; #E4BF
    .db $C0 ; #E4C0
    .db $C0 ; #E4C1
    .db $C0 ; #E4C2
    .db $C0 ; #E4C3
    .db $C0 ; #E4C4
    .db $CB ; #E4C5

L7_E4C6:
    .db $00 ; #E4C6
    .db $99 ; #E4C7
    .db $00 ; #E4C8
    .db $00 ; #E4C9
    .db $00 ; #E4CA
    .db $00 ; #E4CB
    .db $00 ; #E4CC
    .db $00 ; #E4CD
    .db $00 ; #E4CE
    .db $00 ; #E4CF
    .db $00 ; #E4D0
    .db $00 ; #E4D1
    .db $00 ; #E4D2
    .db $00 ; #E4D3
    .db $00 ; #E4D4
    .db $00 ; #E4D5
    .db $00 ; #E4D6
    .db $00 ; #E4D7
    .db $00 ; #E4D8
    .db $00 ; #E4D9
    .db $00 ; #E4DA
    .db $00 ; #E4DB
    .db $00 ; #E4DC
    .db $00 ; #E4DD
    .db $00 ; #E4DE
    .db $00 ; #E4DF
    .db $00 ; #E4E0
    .db $00 ; #E4E1
    .db $00 ; #E4E2
    .db $00 ; #E4E3
    .db $00 ; #E4E4
    .db $00 ; #E4E5
    .db $C0 ; #E4E6
    .db $C0 ; #E4E7
    .db $C0 ; #E4E8
    .db $C0 ; #E4E9
    .db $C0 ; #E4EA
    .db $C0 ; #E4EB
    .db $C0 ; #E4EC
    .db $CE ; #E4ED

L7_E4EE:
    .db $00 ; #E4EE
    .db $00 ; #E4EF
    .db $00 ; #E4F0
    .db $00 ; #E4F1
    .db $00 ; #E4F2
    .db $00 ; #E4F3
    .db $00 ; #E4F4
    .db $80 ; #E4F5
    .db $C0 ; #E4F6
    .db $C0 ; #E4F7
    .db $C0 ; #E4F8
    .db $C0 ; #E4F9
    .db $C0 ; #E4FA
    .db $C0 ; #E4FB
    .db $C0 ; #E4FC
    .db $D1 ; #E4FD
    .db $C0 ; #E4FE
    .db $C0 ; #E4FF
    .db $C0 ; #E500
    .db $C0 ; #E501
    .db $C0 ; #E502
    .db $C0 ; #E503
    .db $C0 ; #E504
    .db $D0 ; #E505
    .db $C0 ; #E506
    .db $C0 ; #E507
    .db $C0 ; #E508
    .db $C0 ; #E509
    .db $C0 ; #E50A
    .db $C0 ; #E50B
    .db $C0 ; #E50C
    .db $CF ; #E50D

L7_E50E:
    .db $C0 ; #E50E
    .db $C0 ; #E50F
    .db $C0 ; #E510
    .db $C0 ; #E511
    .db $C0 ; #E512
    .db $C0 ; #E513
    .db $D9 ; #E514
    .db $00 ; #E515
    .db $00 ; #E516
    .db $00 ; #E517
    .db $00 ; #E518
    .db $00 ; #E519
    .db $E0 ; #E51A
    .db $C0 ; #E51B
    .db $C0 ; #E51C
    .db $D7 ; #E51D
    .db $00 ; #E51E
    .db $00 ; #E51F
    .db $00 ; #E520
    .db $00 ; #E521
    .db $00 ; #E522
    .db $00 ; #E523
    .db $00 ; #E524
    .db $00 ; #E525
    .db $00 ; #E526
    .db $00 ; #E527
    .db $00 ; #E528
    .db $00 ; #E529
    .db $00 ; #E52A
    .db $00 ; #E52B
    .db $00 ; #E52C
    .db $00 ; #E52D
    .db $C0 ; #E52E
    .db $C0 ; #E52F
    .db $C0 ; #E530
    .db $C0 ; #E531
    .db $40 ; #E532
    .db $00 ; #E533
    .db $00 ; #E534
    .db $00 ; #E535

L7_E536:
    .db $00 ; #E536
    .db $00 ; #E537
    .db $00 ; #E538
    .db $00 ; #E539
    .db $00 ; #E53A
    .db $93 ; #E53B
    .db $00 ; #E53C
    .db $80 ; #E53D
    .db $C0 ; #E53E
    .db $C0 ; #E53F
    .db $C0 ; #E540
    .db $C0 ; #E541
    .db $C0 ; #E542
    .db $C0 ; #E543
    .db $C0 ; #E544
    .db $D4 ; #E545
    .db $C0 ; #E546
    .db $C0 ; #E547
    .db $C0 ; #E548
    .db $C0 ; #E549
    .db $C0 ; #E54A
    .db $C0 ; #E54B
    .db $C0 ; #E54C
    .db $D2 ; #E54D

L7_E54E:
    .db $00 ; #E54E
    .db $00 ; #E54F
    .db $00 ; #E550
    .db $00 ; #E551
    .db $00 ; #E552
    .db $00 ; #E553
    .db $00 ; #E554
    .db $80 ; #E555
    .db $E0 ; #E556
    .db $C0 ; #E557
    .db $C0 ; #E558
    .db $C0 ; #E559
    .db $C0 ; #E55A
    .db $C0 ; #E55B
    .db $C0 ; #E55C
    .db $D6 ; #E55D
    .db $20 ; #E55E
    .db $A0 ; #E55F
    .db $A0 ; #E560
    .db $A0 ; #E561
    .db $A0 ; #E562
    .db $A0 ; #E563
    .db $A0 ; #E564
    .db $A0 ; #E565
    .db $C0 ; #E566
    .db $C0 ; #E567
    .db $C0 ; #E568
    .db $C0 ; #E569
    .db $C0 ; #E56A
    .db $C0 ; #E56B
    .db $C0 ; #E56C
    .db $D5 ; #E56D

L7_E56E:
    .db $00 ; #E56E
    .db $00 ; #E56F
    .db $00 ; #E570
    .db $00 ; #E571
    .db $00 ; #E572
    .db $00 ; #E573

L7_E574:
    .db $00 ; #E574


; $1 <= X <= $19
L7_E575:
    RTS ; #E575
L7_E576:
    CPX #$19 ; #E576
    BNE L7_E590 ; #E578
    LDA #$00 ; #E57A
    STA <$6C ; #E57C
    LDA <$6D ; #E57E
    BNE L7_E575 ; #E580
    LDA #$FF ; #E582
    STA <$6D ; #E584
    LDA #$F2 ; #E586
    JSR L7_F377 ; #E588
    LDA #$23 ; #E58B
    JMP EnqueueSfx ; #E58D
L7_E590:                                ; Do we load new "screen" here? Like level or menu?
    STX <$10 ; #E590
    JSR L7_C247 ; #E592                 ; Dim the screen and light it up again, I guess...
    LDX <$10 ; #E595
    TXA ; #E597
    PHA ; #E598
    LDA (L7_E663 - 1), X ; #E599        ; TODO what the hell, 1-based indexing?
    STA <$22 ; #E59C
    STA <$23 ; #E59E
    LDA (L7_E67B - 1), X ; #E5A0
    STA <$FB ; #E5A3
    STA $0520 ; #E5A5
    STA $0521 ; #E5A8
    LDA (L7_E693 - 1), X ; #E5AB
    STA <$FD ; #E5AE
    STA $0500 ; #E5B0
    STA $0501 ; #E5B3
    LDA $E6AA, X ; #E5B6                ; TODO continue
    STA <NextChrBank0 ; #E5B9
    LDA $E6C2, X ; #E5BB
    STA <NextChrBank1 ; #E5BE
    LDA $E70A, X ; #E5C0
    STA <PalettesAnimType ; #E5C3
    LDA #$00 ; #E5C5
    STA <PalettesAnimCounter ; #E5C7
    STA <PalettesAnimFrame ; #E5C9
    STA <$EE ; #E5CB
    STA <$ED ; #E5CD
    LDA $E723, X ; #E5CF
    STA $0510 ; #E5D2
    STA $0511 ; #E5D5
    LDA $E73B, X ; #E5D8
    STA $04F0 ; #E5DB
    CLC ; #E5DE
    ADC #$18 ; #E5DF
    STA $04F1 ; #E5E1
    LDA $E6DA, X ; #E5E4
    STX <$02 ; #E5E7
    JSR SetBackgroundPalette ; #E5E9
    LDX <$02 ; #E5EC
    LDA $E6F2, X ; #E5EE
    JSR SetSpritesPalette ; #E5F1
    LDX #$01 ; #E5F4
L7_E5F6:
    LDA <$56, X ; #E5F6
    CMP #$82 ; #E5F8
    BCC L7_E600 ; #E5FA
    LDA #$00 ; #E5FC
    STA <$56, X ; #E5FE
L7_E600:
    JSR L7_F31D ; #E600
    DEX ; #E603
    BPL L7_E5F6 ; #E604
    LDA #$00 ; #E606
    STA <$6C ; #E608
    JSR L7_E179 ; #E60A
    PLA ; #E60D
    CMP #$0A ; #E60E
    BEQ L7_E61F ; #E610
    CMP #$16 ; #E612
    BEQ L7_E656 ; #E614
L7_E616:
    JSR EnableDisplay ; #E616
    JSR WaitNmiAndReadInputs ; #E619
    JMP L7_C253 ; #E61C
L7_E61F:
    LDA #$80 ; #E61F
    STA <$25 ; #E621
    LDA #$0D ; #E623
    STA <$23 ; #E625
L7_E627:
    LDA #$01 ; #E627
    STA <$05 ; #E629
    JSR L7_DBEC ; #E62B
    LDA <$25 ; #E62E
    BNE L7_E627 ; #E630
    LDA #$88 ; #E632
    STA <$25 ; #E634
    LDA #$01 ; #E636
    STA <$23 ; #E638
    LDA #BANK_4
    JSR SetFirstPrgBank ; #E63C
    JSR L4_8090 ; #E63F
    INC <$FD ; #E642
    JSR L4_8090 ; #E644
    DEC <$FD ; #E647
    LDA #BANK_2 ; #E649
    JSR SetFirstPrgBank ; #E64B
    LDX #$00 ; #E64E
    JSR L2_8000 ; #E650
    JMP L7_E616 ; #E653
L7_E656:
    LDA #BANK_2 ; #E656
    JSR SetFirstPrgBank ; #E658
    LDX #$01 ; #E65B
    JSR L2_8000 ; #E65D
    JMP L7_E616 ; #E660


L7_E663:
    .db $00, $14, $00, $08, $00, $17, $00, $10, $08, $00, $08, $00, $06, $19, $10, $08, $07, $05, $08, $07, $17, $07, $00, $12

L7_E67B:
    .db $00, $02, $00, $01, $00, $02, $00, $02, $01, $00, $01, $00, $00, $03, $02, $01, $00, $00, $01, $00, $02, $00, $00, $02

L7_E693:
    .db $00, $06, $00, $00, $00, $07, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $07, $05, $00, $07, $07, $07, $00, $04
    ; #E6AA
; Array of CHR banks 0.
    .db $80, $8C, $81, $82, $82, $89, $83, $85, $84, $8A, $84, $87, $8A, $85, $87, $87, $8A, $8C, $80, $89, $88, $8B, $82, $89
    ; #E6C2
; Array of CHR banks 1.
    .db $91, $91, $92, $93, $93, $93, $94, $95, $95, $9C, $96, $96, $96, $97, $98, $98, $98, $9A, $9A, $9A, $9B, $9D, $99, $91
    ; #E6DA
; Array of background palettes indexes.
    .db $01, $01, $02, $04, $04, $04, $05, $17, $06, $14, $09, $0A, $12, $0B, $0C, $0D, $0D, $0F, $0F, $0F, $10, $15, $11, $13
    ; #E6F2
; Array of sprites palettes indexes.
    .db $00, $0D, $01, $02, $02, $09, $03, $05, $04, $0E, $03, $07, $0A, $05, $07, $07, $0F, $0D, $00, $11, $08, $0B, $02, $09
    ; #E70A
; Array of palettes animations.
    .db $00, $00, $00, $80, $00, $00, $00, $00, $00, $00, $85, $8A, $9B, $00, $00, $00, $00, $00, $00, $00, $8E, $00, $97, $00

    .db $00 ; #E723                     ; Separator or what?

    .db $94, $B4, $B4, $B4, $54, $B4, $34, $A4, $94, $B4, $B4, $74, $B4, $94, $B4, $34, $B4, $B4, $74, $B4, $B4, $B4, $94, $B4

    ; #E73B
    .db $18, $18, $2C, $18, $18, $18, $54, $18, $18, $18, $38, $38, $18, $48, $38, $38, $18, $18, $18, $18, $D8, $18, $34, $18


MapScreenHideBeatenZones:
    LDA <$31                            ; A = <$31
    CMP #ZONE_MAP_1
    BEQ MapScreen1HideBeatenZones
    CMP #ZONE_MAP_2
    BEQ MapScreen2HideBeatenZones
    RTS                                 ; Return if it's not a map zone.
MapScreen1HideBeatenZones:
    LDA #$00
    STA <$00                            ; <$00 = #0
    LDA <(BeatenZones + 0)
    STA <$01                            ; <$01 = <$38
    LDA #$07
    STA <$02                            ; <$02 = #7
    BNE MapScreenMaybeMarkZoneBeaten    ; Jump unconditionally.
MapScreen2HideBeatenZones:
    LDA #$08
    STA <$00                            ; <$00 = #8
    LDA #$02
    STA <$02                            ; <$02 = #2, assignment order is fucked up.
    LDA <(BeatenZones + 1)
    STA <$01                            ; <$01 = <$39

MapScreenMaybeMarkZoneBeaten:           ; Temp variables are initialized.
    LDA <$01                            ; Bit mask with the length of (<$02 + 1), 8 or 3.
    AND #$01
    BEQ MapScreenSkipZoneBeaten
    LDA <$00                            ; A is either 0 or 8.
    ASL A
    TAY                                 ; Y = (A <<= 1), because we read words, not bytes.

    LDA (MapScreen1ZonePos + 0), Y
    STA PPU_ADDR_REG
    LDA (MapScreen1ZonePos + 1), Y
    STA PPU_ADDR_REG
    LDA #$26
    STA PPU_DATA_REG
    LDA #$27
    STA PPU_DATA_REG                    ; Top of "RR".

    LDA (MapScreen1ZonePos + 0), Y
    STA PPU_ADDR_REG ; #E79C
    LDA (MapScreen1ZonePos + 1), Y
    ORA #$20                            ; Go to the next line. Bit was 0.
    STA PPU_ADDR_REG
    LDA #$36
    STA PPU_DATA_REG
    LDA #$37
    STA PPU_DATA_REG                    ; Bottom of "RR".

    LDA (L7_E7EB + 0), Y
    STA PPU_ADDR_REG
    LDA (L7_E7EB + 1), Y
    STA PPU_ADDR_REG
    AND #$3F                            ; Byte within palettes. Overall it's 4x16 bytes.
    TAX
    LDA $0780, X                        ; Get it from memory, of course.
    AND L7_E801, Y
    ORA (L7_E801 + 1), Y
    STA PPU_DATA_REG
MapScreenSkipZoneBeaten:
    INC <$00
    LSR <$01
    DEC <$02
    BPL MapScreenMaybeMarkZoneBeaten
    RTS

; Bunch of VRAM pointers.
MapScreen1ZonePos:
    .db $21, $5A                        ; Zone 0.
    .db $22, $5A                        ; Zone A.
    .db $21, $54                        ; Zone B.
    .db $23, $14                        ; Zone C.
    .db $22, $10                        ; Zone D.
    .db $21, $4A                        ; Zone E.
    .db $22, $0A                        ; Zone F.
    .db $22, $44                        ; Zone G.
MapScreen2ZonePos:
    .db $22, $0A                        ; Zone H.
    .db $22, $12                        ; Zone I.
    .db $22, $1A                        ; Zone J.

L7_E7EB:
    .db $23, $D6
    .db $23, $E6
    .db $23, $D5
    .db $23, $F5
    .db $23, $E4
    .db $23, $D2
    .db $23, $E2
    .db $23, $E1
L7_E7FB:
    .db $23, $E2
    .db $23, $E4
    .db $23, $E6

; { AndMask, OrMask } for tile number from $0780.
L7_E801:
    .db $3F, $C0
    .db $3F, $C0
    .db $CF, $30
    .db $FC, $03
    .db $FC, $03
    .db $3F, $C0
    .db $F3, $0C
    .db $CF, $30
L7_E811:
    .db $F3, $0C
    .db $F3, $0C
    .db $F3, $0C


L7_E817:
    LDA <$30 ; #E817
    CMP #$1C ; #E819
    BCC L7_E81E ; #E81B
    RTS ; #E81D
L7_E81E:
    TXA ; #E81E
    PHA ; #E81F
    LDY <$4A ; #E820
    JSR L7_E06B ; #E822
    LDA <$31 ; #E825
    CMP #ZONE_CLR ; #E827
    BNE L7_E82D ; #E829
    LDA #$0B ; #E82B
L7_E82D:
    ASL A ; #E82D
    ASL A ; #E82E
    ASL A ; #E82F
    ASL A ; #E830
    ADC #$F9 ; #E831
    STA <$04 ; #E833
    LDA #$00 ; #E835
    ADC #$E8 ; #E837
    STA <$05 ; #E839
    LDX <$30 ; #E83B
    LDA <$4B ; #E83D
    PHA ; #E83F
    AND #$40 ; #E840
    LSR A ; #E842
    LSR A ; #E843
    LSR A ; #E844
    LSR A ; #E845
    STA <$00 ; #E846
    PLA ; #E848
    AND #$3F ; #E849
    STA <$24 ; #E84B
    PHA ; #E84D
    ORA #$C0 ; #E84E
    STA $03EB, X ; #E850
    LSR A ; #E853
    LSR A ; #E854
    LSR A ; #E855
    AND #$07 ; #E856
    TAY ; #E858
    LDA L7_E063, Y ; #E859
    ORA <$00 ; #E85C
    STA $03E0, X ; #E85E
    STA $03E5, X ; #E861
    ORA #$03 ; #E864
    STA $03EA, X ; #E866
    PLA ; #E869
    AND #$07 ; #E86A
    ASL A ; #E86C
    ASL A ; #E86D
    ORA L7_E05B, Y ; #E86E
    LDY <$4C ; #E871
    ORA L7_E9BD, Y ; #E873
    STA $03E1, X ; #E876
    ORA #$20 ; #E879
    STA $03E6, X ; #E87B
    LDA #$01 ; #E87E
    STA $03E2, X ; #E880
    STA $03E7, X ; #E883
    LDA #$00 ; #E886
    STA $03EC, X ; #E888
    JSR L7_E01B ; #E88B
    LDA <$36 ; #E88E
    JSR SetFirstPrgBank ; #E890
    LDX <$30 ; #E893
    LDY <$4C ; #E895
    LDA [$00], Y ; #E897
    AND #$0F ; #E899
    TAY ; #E89B
    LDA [$04], Y ; #E89C
    TAY ; #E89E
    LDA $BAE0, Y ; #E89F
    STA $03E3, X ; #E8A2
    LDA $BBE0, Y ; #E8A5
    STA $03E4, X ; #E8A8
    LDA $BCE0, Y ; #E8AB
    STA $03E8, X ; #E8AE
    LDA $BDE0, Y ; #E8B1
    STA $03E9, X ; #E8B4
    LDA $BEE0, Y ; #E8B7
    AND #$03 ; #E8BA
    STA <$02 ; #E8BC
    LDY <$4C ; #E8BE
    BEQ L7_E8C9 ; #E8C0
L7_E8C2:
    ASL <$02 ; #E8C2
    ASL <$02 ; #E8C4
    DEY ; #E8C6
    BNE L7_E8C2 ; #E8C7
L7_E8C9:
    LDY <$4B ; #E8C9
    LDX <$4C ; #E8CB
    LDA $0780, Y ; #E8CD
    AND L7_E9B9, X ; #E8D0
    ORA <$02 ; #E8D3
    STA $0780, Y ; #E8D5
    PHA ; #E8D8
    LDA <$4B ; #E8D9
    ASL A ; #E8DB
    ADC L7_E9C1, X ; #E8DC
    TAY ; #E8DF
    LDA $0600, Y ; #E8E0
    AND L7_E9C5, X ; #E8E3
    STA $0600, Y ; #E8E6
    LDX <$30 ; #E8E9
    PLA ; #E8EB
    STA $03ED, X ; #E8EC
    TXA ; #E8EF
    CLC ; #E8F0
    ADC #$0E ; #E8F1
    STA <$30 ; #E8F3
    PLA ; #E8F5
    TAX ; #E8F6
    CLC ; #E8F7
    RTS ; #E8F8


    .db $03 ; #E8F9
    .db $08 ; #E8FA
    .db $09 ; #E8FB
    .db $3C ; #E8FC
    .db $3A ; #E8FD
    .db $3B ; #E8FE
    .db $98 ; #E8FF
    .db $99 ; #E900
    .db $93 ; #E901
    .db $03 ; #E902
    .db $08 ; #E903
    .db $09 ; #E904
    .db $3C ; #E905
    .db $93 ; #E906
    .db $00 ; #E907
    .db $03 ; #E908
    .db $00 ; #E909
    .db $00 ; #E90A
    .db $00 ; #E90B
    .db $00 ; #E90C
    .db $00 ; #E90D
    .db $CF ; #E90E
    .db $00 ; #E90F
    .db $00 ; #E910
    .db $CE ; #E911
    .db $00 ; #E912
    .db $00 ; #E913
    .db $00 ; #E914
    .db $00 ; #E915
    .db $00 ; #E916
    .db $C6 ; #E917
    .db $C7 ; #E918
    .db $05 ; #E919
    .db $14 ; #E91A
    .db $15 ; #E91B
    .db $06 ; #E91C
    .db $07 ; #E91D
    .db $54 ; #E91E
    .db $55 ; #E91F
    .db $53 ; #E920
    .db $52 ; #E921
    .db $76 ; #E922
    .db $05 ; #E923
    .db $14 ; #E924
    .db $76 ; #E925
    .db $53 ; #E926
    .db $52 ; #E927
    .db $05 ; #E928
    .db $00 ; #E929
    .db $13 ; #E92A
    .db $0A ; #E92B
    .db $00 ; #E92C
    .db $00 ; #E92D
    .db $00 ; #E92E
    .db $13 ; #E92F
    .db $55 ; #E930
    .db $00 ; #E931
    .db $00 ; #E932
    .db $00 ; #E933
    .db $00 ; #E934
    .db $00 ; #E935
    .db $00 ; #E936
    .db $00 ; #E937
    .db $1D ; #E938
    .db $26 ; #E939
    .db $29 ; #E93A
    .db $97 ; #E93B
    .db $73 ; #E93C
    .db $11 ; #E93D
    .db $10 ; #E93E
    .db $96 ; #E93F
    .db $76 ; #E940
    .db $98 ; #E941
    .db $29 ; #E942
    .db $76 ; #E943
    .db $99 ; #E944
    .db $96 ; #E945
    .db $B4 ; #E946
    .db $B1 ; #E947
    .db $97 ; #E948
    .db $00 ; #E949
    .db $A9 ; #E94A
    .db $00 ; #E94B
    .db $DB ; #E94C
    .db $DC ; #E94D
    .db $00 ; #E94E
    .db $00 ; #E94F
    .db $00 ; #E950
    .db $00 ; #E951
    .db $00 ; #E952
    .db $00 ; #E953
    .db $A1 ; #E954
    .db $A9 ; #E955
    .db $00 ; #E956
    .db $00 ; #E957
    .db $00 ; #E958
    .db $29 ; #E959
    .db $28 ; #E95A
    .db $44 ; #E95B
    .db $46 ; #E95C
    .db $47 ; #E95D
    .db $0F ; #E95E
    .db $17 ; #E95F
    .db $64 ; #E960
    .db $07 ; #E961
    .db $28 ; #E962
    .db $29 ; #E963
    .db $44 ; #E964
    .db $43 ; #E965
    .db $45 ; #E966
    .db $40 ; #E967
    .db $46 ; #E968
    .db $70 ; #E969
    .db $00 ; #E96A
    .db $00 ; #E96B
    .db $00 ; #E96C
    .db $00 ; #E96D
    .db $70 ; #E96E
    .db $00 ; #E96F
    .db $D1 ; #E970
    .db $D1 ; #E971
    .db $D3 ; #E972
    .db $AA ; #E973
    .db $C9 ; #E974
    .db $70 ; #E975
    .db $D1 ; #E976
    .db $9D ; #E977
    .db $D1 ; #E978
    .db $00 ; #E979
    .db $00 ; #E97A
    .db $00 ; #E97B
    .db $80 ; #E97C
    .db $81 ; #E97D
    .db $80 ; #E97E
    .db $81 ; #E97F
    .db $5A ; #E980
    .db $00 ; #E981
    .db $00 ; #E982
    .db $00 ; #E983
    .db $88 ; #E984
    .db $89 ; #E985
    .db $88 ; #E986
    .db $89 ; #E987
    .db $89 ; #E988
    .db $80 ; #E989
    .db $00 ; #E98A
    .db $00 ; #E98B
    .db $00 ; #E98C
    .db $00 ; #E98D
    .db $00 ; #E98E
    .db $00 ; #E98F
    .db $00 ; #E990
    .db $00 ; #E991
    .db $00 ; #E992
    .db $80 ; #E993
    .db $86 ; #E994
    .db $6D ; #E995
    .db $00 ; #E996
    .db $00 ; #E997
    .db $00 ; #E998
    .db $06 ; #E999
    .db $07 ; #E99A
    .db $49 ; #E99B
    .db $61 ; #E99C
    .db $00 ; #E99D
    .db $42 ; #E99E
    .db $43 ; #E99F
    .db $02 ; #E9A0
    .db $06 ; #E9A1
    .db $07 ; #E9A2
    .db $00 ; #E9A3
    .db $00 ; #E9A4
    .db $00 ; #E9A5
    .db $00 ; #E9A6
    .db $00 ; #E9A7
    .db $00 ; #E9A8
    .db $00 ; #E9A9
    .db $00 ; #E9AA
    .db $00 ; #E9AB
    .db $00 ; #E9AC
    .db $00 ; #E9AD
    .db $00 ; #E9AE
    .db $00 ; #E9AF
    .db $00 ; #E9B0
    .db $00 ; #E9B1
    .db $00 ; #E9B2
    .db $00 ; #E9B3
    .db $00 ; #E9B4
    .db $00 ; #E9B5
    .db $00 ; #E9B6
    .db $00 ; #E9B7
    .db $D2 ; #E9B8

L7_E9B9:
    .db $FC ; #E9B9
    .db $F3 ; #E9BA
    .db $CF ; #E9BB
    .db $3F ; #E9BC

L7_E9BD:
    .db $00 ; #E9BD
    .db $02 ; #E9BE
    .db $40 ; #E9BF
    .db $42 ; #E9C0

L7_E9C1:
    .db $00 ; #E9C1
    .db $01 ; #E9C2
    .db $00 ; #E9C3
    .db $01 ; #E9C4

L7_E9C5:
    .db $F0 ; #E9C5
    .db $F0 ; #E9C6
    .db $0F ; #E9C7
    .db $0F ; #E9C8

PaletteSwapTick:
    LDA <PalettesAnimType               ; A = PalettesAnimType
    BPL L7_EA0E                         ; Return if A >= 0.
    AND #$7F                            ; Clear sign bit.
    STA <$00                            ; Store to temp buffer.
    TAY                                 ; Y = A
    LDX #$00                            ; X = 0
    LDA <PalettesAnimCounter            ; A = PalettesAnimCounter
    INC <PalettesAnimCounter            ; ++PalettesAnimCounter
    CMP (L7_EA70 + 1), Y
    BNE L7_EA0E                         ; Return if A != $EA70[Y + 1]
    STX <PalettesAnimCounter            ; PalettesAnimCounter = 0
    LDA <PalettesAnimFrame              ; A = PalettesAnimFrame
    INC <PalettesAnimFrame              ; ++PalettesAnimFrame
    CMP L7_EA70, Y                      ;
    BNE PaletteSwapNoFrameOverflow      ;
    STX <PalettesAnimFrame              ; if (A == $EA70[Y]) PalettesAnimFrame = 0;       Overflow check.
PaletteSwapNoFrameOverflow:
    CLC ; #E9EA
    ADC #$02 ; #E9EB
    ADC <$00 ; #E9ED
    TAY                                 ; Y = Frame + Offset + 2 bytes of counters.
    LDX L7_EA70, Y                      ; X = $EA70[Y]
L7_E9F3:
    LDA L7_EA0F, X                      ; while ($EA0F[X] >= 0)
    BMI L7_EA0C                         ; {
    TAY                                 ;   Y = $EA0F[X]
    INX                                 ;   ++X
    LDA #$03                            ;
    STA <$00                            ;   tmp = 3     ; Because there's not point in writing background color every time?
L7_E9FE:                                ;
    LDA L7_EA0F, X                      ;   do
    STA Palettes, Y                     ;     Palettes[Y] = $EA0F[X]
    INX                                 ;     ++X
    INY                                 ;     ++Y
    DEC <$00                            ;     --tmp
    BNE L7_E9FE                         ;   while (tmp > 0)
    BEQ L7_E9F3                         ; }
L7_EA0C:
    STA <PalettesOutdated               ; Negative number cannot be 0. In fact, it's always #$FF.
L7_EA0E:
    RTS

L7_EA0F:                                ; Some palettes data, for animation or special effects I guess.
    ; $00
    .db $05, $20, $21, $11              ; These 3 palettes look like water colors animation, they just loop.
    .db $FF
    ; $05
    .db $05, $21, $11, $20
    .db $FF
    ; $0A
    .db $05, $11, $20, $21
    .db $FF
    ; $0F
    .db $05, $20, $21, $01              ; These 3 patterns correspond to some blue and white background+sprites animation.
    .db $0D, $20, $20, $01
    .db $FF
    ; $18
    .db $05, $21, $01, $20
    .db $0D, $21, $20, $01
    .db $FF
    ; $21
    .db $05, $01, $20, $21
    .db $0D, $20, $21, $01
    .db $FF
    ; $2A
    .db $05, $27, $17, $07              ; These 2 patterns do some red flickering.
    .db $FF
    ; $2F
    .db $05, $07, $17, $27
    .db $FF
    ; $34
    .db $05, $00, $10, $10              ; These 3 patterns do some gray animation.
    .db $FF
    ; $39
    .db $05, $10, $00, $10
    .db $FF
    ; $3E
    .db $05, $10, $10, $00
    .db $FF
    ; $43
    .db $05, $21, $00, $20              ; These 2 patterns do white+blue flickering.
    .db $FF
    ; $48
    .db $05, $20, $00, $21
    .db $FF
    ; $4D
    .db $09, $09, $09, $0A              ; Dark green flickering.
    .db $FF
    ; $52
    .db $09, $09, $0A, $09
    .db $FF
    ; $57
    .db $19, $0F, $30, $29              ; Black, white / light brown, lime.
    .db $FF
    ; $5C
    .db $19, $0F, $26, $29
    .db $FF
L7_EA70:
    ; { FramesCount - 1, FrameDuration, PatternIndexes[FramesCount] }
    ; $00
    .db $02, $04
    .db $00, $05, $0A
    ; $05
    .db $02, $04
    .db $0F, $18, $21
    ; $0A
    .db $01, $08
    .db $2A, $2F
    ; $0E
    .db $02, $04
    .db $34, $39, $3E
    ; $13
    .db $01, $04
    .db $43, $48
    ; $17
    .db $01, $04
    .db $4D, $52
    ; $1B
    .db $01, $04
    .db $57, $5C


L7_EA8F:
    LDA $0400, X ; #EA8F
    AND #$DF ; #EA92
    STA $0400, X ; #EA94
    LDA #$00 ; #EA97
    STA <$10 ; #EA99
L7_EA9B:
    LDY <$40 ; #EA9B
    JSR L7_EB3B ; #EA9D
    LDY <$41 ; #EAA0
    STA $0042, Y ; #EAA2
    CMP <$10 ; #EAA5
    BCC L7_EACD ; #EAA7
    STA <$10 ; #EAA9
    LDA <$04 ; #EAAB
    STA <$4C ; #EAAD
    LDA <$05 ; #EAAF
    STA <$4B ; #EAB1
    LDA <$03 ; #EAB3
    SEC ; #EAB5
    SBC <$FD ; #EAB6
    CLC ; #EAB8
    ADC <$22 ; #EAB9
    STA <$4A ; #EABB
    LDA <$08 ; #EABD
    SEC ; #EABF
    SBC <$FB ; #EAC0
    BCC L7_EACD ; #EAC2
    BEQ L7_EACD ; #EAC4
    LDA <$4A ; #EAC6
    CLC ; #EAC8
    ADC <$2E ; #EAC9
    STA <$4A ; #EACB
L7_EACD:
    CPX #$02 ; #EACD
    BCC L7_EADE ; #EACF
    LDA $04E0, X ; #EAD1
    CMP #$05 ; #EAD4
    BEQ L7_EADE ; #EAD6
    LDA <$10 ; #EAD8
    CMP #$03 ; #EADA
    BCS L7_EB0F ; #EADC
L7_EADE:
    INC <$40 ; #EADE
    DEC <$41 ; #EAE0
    BPL L7_EA9B ; #EAE2
    CPX #$02 ; #EAE4
    BCS L7_EAEE ; #EAE6
    LDA <$54, X ; #EAE8
    CMP #$0B ; #EAEA
    BEQ L7_EB0F ; #EAEC
L7_EAEE:
    LDA <$10 ; #EAEE
    CMP #$06 ; #EAF0
    BEQ L7_EB23 ; #EAF2
    CPX #$02 ; #EAF4
    BCS L7_EB0F ; #EAF6
    CMP #$0B ; #EAF8
    BEQ L7_EB30 ; #EAFA
    CMP #$05 ; #EAFC
    BEQ L7_EB10 ; #EAFE
    CMP #$01 ; #EB00
    BNE L7_EB0F ; #EB02
    JSR L7_E817 ; #EB04
    LDA #$17 ; #EB07
    JSR EnqueueSfx ; #EB09
    JSR L7_F3F5 ; #EB0C
L7_EB0F:
    RTS ; #EB0F
L7_EB10:
    LDA $0500, X ; #EB10
    SEC ; #EB13
    SBC <$FD ; #EB14
    CLC ; #EB16
    ADC <$22 ; #EB17
    TAY ; #EB19
    LDA [$34], Y ; #EB1A
    AND #$1F ; #EB1C
    STA <$6C ; #EB1E
    STA <$6E ; #EB20
    RTS ; #EB22
L7_EB23:
    LDA $0400, X ; #EB23
    ORA #$20 ; #EB26
    STA $0400, X ; #EB28
    LDA #$00 ; #EB2B
    STA <$10 ; #EB2D
    RTS ; #EB2F
L7_EB30:
    LDA #$00 ; #EB30
    STA $04D0, X ; #EB32
    LDA #$0A ; #EB35
    STA <$54, X ; #EB37
    BNE L7_EB23 ; #EB39
L7_EB3B:
    LDA #$00 ; #EB3B
    STA <$02 ; #EB3D
    LDA L7_EC97, Y ; #EB3F
    BPL L7_EB46 ; #EB42
    DEC <$02 ; #EB44
L7_EB46:
    LDA $04F0, X ; #EB46
    CLC ; #EB49
    ADC L7_EC97, Y ; #EB4A
    STA <$06 ; #EB4D
    LDA $0500, X ; #EB4F
    ADC <$02 ; #EB52
    STA <$03 ; #EB54
    BMI L7_EBA0 ; #EB56
    LDA <$06 ; #EB58
    LSR A ; #EB5A
    LSR A ; #EB5B
    LSR A ; #EB5C
    LSR A ; #EB5D
    PHA ; #EB5E
    AND #$01 ; #EB5F
    STA <$04 ; #EB61
    PLA ; #EB63
    LSR A ; #EB64
    AND #$07 ; #EB65
    STA <$05 ; #EB67
    LDA $0520, X ; #EB69
    STA <$08 ; #EB6C
    LDA L7_EBFA, Y ; #EB6E
    BMI L7_EB89 ; #EB71
    LDA $0510, X ; #EB73
    CLC ; #EB76
    ADC L7_EBFA, Y ; #EB77
    BCS L7_EB80 ; #EB7A
    CMP #$F0 ; #EB7C
    BCC L7_EB84 ; #EB7E
L7_EB80:
    ADC #$0F ; #EB80
    INC <$08 ; #EB82
L7_EB84:
    STA <$07 ; #EB84
    JMP L7_EBA0 ; #EB86
L7_EB89:
    LDA L7_EBFA, Y ; #EB89
    EOR #$FF ; #EB8C
    STA <$09 ; #EB8E
    INC <$09 ; #EB90
    LDA $0510, X ; #EB92
    SEC ; #EB95
    SBC <$09 ; #EB96
    BCS L7_EB9E ; #EB98
    SBC #$0F ; #EB9A
    DEC <$08 ; #EB9C
L7_EB9E:
    STA <$07 ; #EB9E
L7_EBA0:
    LDA <$07 ; #EBA0
    SEC ; #EBA2
    SBC <ScrollY ; #EBA3
    LDA <$08 ; #EBA5
    SBC <$FB ; #EBA7
    BEQ L7_EBC0 ; #EBA9
    BCS L7_EBB5 ; #EBAB
    CPX #$02 ; #EBAD
    BCS L7_EBB5 ; #EBAF
    CPY #$06 ; #EBB1
    BCC L7_EBB8 ; #EBB3
L7_EBB5:
    LDA #$00 ; #EBB5
    RTS ; #EBB7
L7_EBB8:
    LDA <ScrollY ; #EBB8
    STA <$07 ; #EBBA
    LDA <$FB ; #EBBC
    STA <$08 ; #EBBE
L7_EBC0:
    LDA <$03 ; #EBC0
    AND #$01 ; #EBC2
    TAY ; #EBC4
    LDA <$07 ; #EBC5
    LSR A ; #EBC7
    LSR A ; #EBC8
    PHA ; #EBC9
    AND #$38 ; #EBCA
    ORA L7_ED34, Y ; #EBCC
    ORA <$05 ; #EBCF
    STA <$05 ; #EBD1
    ASL A ; #EBD3
    STA <$02 ; #EBD4
    PLA ; #EBD6
    LSR A ; #EBD7
    AND #$02 ; #EBD8
    ORA <$04 ; #EBDA
    STA <$04 ; #EBDC
    AND #$01 ; #EBDE
    CLC ; #EBE0
    ADC <$02 ; #EBE1
    TAY ; #EBE3
    LDA $0600, Y ; #EBE4
    STA <$02 ; #EBE7
    LDY <$04 ; #EBE9
    LDA L7_ED36, Y ; #EBEB
    BEQ L7_EBF3 ; #EBEE
    AND <$02 ; #EBF0
    RTS ; #EBF2
L7_EBF3:
    LDA <$02 ; #EBF3
    LSR A ; #EBF5
    LSR A ; #EBF6
    LSR A ; #EBF7
    LSR A ; #EBF8
    RTS ; #EBF9

L7_EBFA:
    .db $F5 ; #EBFA
    .db $00 ; #EBFB
    .db $0B ; #EBFC
    .db $F5 ; #EBFD
    .db $00 ; #EBFE
    .db $0B ; #EBFF
    .db $0C ; #EC00
    .db $0C ; #EC01
    .db $F4 ; #EC02
    .db $F4 ; #EC03
    .db $F1 ; #EC04
    .db $00 ; #EC05
    .db $0F ; #EC06
    .db $F1 ; #EC07
    .db $00 ; #EC08
    .db $0F ; #EC09
    .db $10 ; #EC0A
    .db $10 ; #EC0B
    .db $10 ; #EC0C
    .db $F0 ; #EC0D
    .db $F0 ; #EC0E
    .db $F0 ; #EC0F
    .db $F5 ; #EC10
    .db $00 ; #EC11
    .db $0B ; #EC12
    .db $F5 ; #EC13
    .db $00 ; #EC14
    .db $0B ; #EC15
    .db $0C ; #EC16
    .db $0C ; #EC17
    .db $0C ; #EC18
    .db $F4 ; #EC19
    .db $F4 ; #EC1A
    .db $F4 ; #EC1B
    .db $F9 ; #EC1C
    .db $07 ; #EC1D
    .db $F9 ; #EC1E
    .db $07 ; #EC1F
    .db $08 ; #EC20
    .db $08 ; #EC21
    .db $08 ; #EC22
    .db $ED ; #EC23
    .db $13 ; #EC24
    .db $ED ; #EC25
    .db $13 ; #EC26
    .db $08 ; #EC27
    .db $08 ; #EC28
    .db $08 ; #EC29
    .db $F5 ; #EC2A
    .db $00 ; #EC2B
    .db $0B ; #EC2C
    .db $F5 ; #EC2D
    .db $00 ; #EC2E
    .db $0B ; #EC2F
    .db $0C ; #EC30
    .db $0C ; #EC31
    .db $0C ; #EC32
    .db $F4 ; #EC33
    .db $F4 ; #EC34
    .db $F4 ; #EC35
    .db $F3 ; #EC36
    .db $00 ; #EC37
    .db $0D ; #EC38
    .db $10 ; #EC39
    .db $10 ; #EC3A
    .db $10 ; #EC3B
    .db $F5 ; #EC3C
    .db $00 ; #EC3D
    .db $0B ; #EC3E
    .db $F5 ; #EC3F
    .db $00 ; #EC40
    .db $0B ; #EC41
    .db $0F ; #EC42
    .db $0F ; #EC43
    .db $0F ; #EC44
    .db $F1 ; #EC45
    .db $F1 ; #EC46
    .db $F1 ; #EC47
    .db $F1 ; #EC48
    .db $00 ; #EC49
    .db $0F ; #EC4A
    .db $F1 ; #EC4B
    .db $00 ; #EC4C
    .db $0F ; #EC4D
    .db $14 ; #EC4E
    .db $14 ; #EC4F
    .db $14 ; #EC50
    .db $EC ; #EC51
    .db $EC ; #EC52
    .db $EC ; #EC53
    .db $F9 ; #EC54
    .db $00 ; #EC55
    .db $07 ; #EC56
    .db $F9 ; #EC57
    .db $00 ; #EC58
    .db $07 ; #EC59
    .db $10 ; #EC5A
    .db $10 ; #EC5B
    .db $10 ; #EC5C
    .db $F0 ; #EC5D
    .db $F0 ; #EC5E
    .db $F0 ; #EC5F
    .db $F7 ; #EC60
    .db $00 ; #EC61
    .db $09 ; #EC62
    .db $F7 ; #EC63
    .db $00 ; #EC64
    .db $09 ; #EC65
    .db $0A ; #EC66
    .db $0A ; #EC67
    .db $0A ; #EC68
    .db $F6 ; #EC69
    .db $F6 ; #EC6A
    .db $F6 ; #EC6B
    .db $07 ; #EC6C
    .db $F9 ; #EC6D
    .db $07 ; #EC6E
    .db $F9 ; #EC6F
    .db $08 ; #EC70
    .db $08 ; #EC71
    .db $F8 ; #EC72
    .db $F8 ; #EC73
    .db $F9 ; #EC74
    .db $F9 ; #EC75
    .db $F9 ; #EC76
    .db $F5 ; #EC77
    .db $00 ; #EC78
    .db $0B ; #EC79
    .db $F5 ; #EC7A
    .db $00 ; #EC7B
    .db $F5 ; #EC7C
    .db $F5 ; #EC7D
    .db $00 ; #EC7E
    .db $F5 ; #EC7F
    .db $04 ; #EC80
    .db $04 ; #EC81
    .db $04 ; #EC82
    .db $FC ; #EC83
    .db $FC ; #EC84
    .db $FC ; #EC85
    .db $00 ; #EC86
    .db $E8 ; #EC87
    .db $E8 ; #EC88
    .db $00 ; #EC89
    .db $00 ; #EC8A
    .db $F5 ; #EC8B
    .db $F5 ; #EC8C
    .db $00 ; #EC8D
    .db $00 ; #EC8E
    .db $0B ; #EC8F
    .db $0B ; #EC90
    .db $DD ; #EC91
    .db $DD ; #EC92
    .db $E8 ; #EC93
    .db $E8 ; #EC94
    .db $F3 ; #EC95
    .db $F3 ; #EC96

L7_EC97:
    .db $08 ; #EC97
    .db $08 ; #EC98
    .db $08 ; #EC99
    .db $F8 ; #EC9A
    .db $F8 ; #EC9B
    .db $F8 ; #EC9C
    .db $F9 ; #EC9D
    .db $07 ; #EC9E
    .db $F9 ; #EC9F
    .db $07 ; #ECA0
    .db $0C ; #ECA1
    .db $0C ; #ECA2
    .db $0C ; #ECA3
    .db $F4 ; #ECA4
    .db $F4 ; #ECA5
    .db $F4 ; #ECA6
    .db $F5 ; #ECA7
    .db $00 ; #ECA8
    .db $0B ; #ECA9
    .db $F5 ; #ECAA
    .db $00 ; #ECAB
    .db $0B ; #ECAC
    .db $0C ; #ECAD
    .db $0C ; #ECAE
    .db $0C ; #ECAF
    .db $F4 ; #ECB0
    .db $F4 ; #ECB1
    .db $F4 ; #ECB2
    .db $F5 ; #ECB3
    .db $00 ; #ECB4
    .db $0B ; #ECB5
    .db $F5 ; #ECB6
    .db $00 ; #ECB7
    .db $0B ; #ECB8
    .db $0C ; #ECB9
    .db $0C ; #ECBA
    .db $F4 ; #ECBB
    .db $F4 ; #ECBC
    .db $F4 ; #ECBD
    .db $00 ; #ECBE
    .db $0C ; #ECBF
    .db $10 ; #ECC0
    .db $10 ; #ECC1
    .db $F0 ; #ECC2
    .db $F0 ; #ECC3
    .db $00 ; #ECC4
    .db $00 ; #ECC5
    .db $00 ; #ECC6
    .db $10 ; #ECC7
    .db $10 ; #ECC8
    .db $10 ; #ECC9
    .db $F0 ; #ECCA
    .db $F0 ; #ECCB
    .db $F0 ; #ECCC
    .db $F5 ; #ECCD
    .db $00 ; #ECCE
    .db $0B ; #ECCF
    .db $F5 ; #ECD0
    .db $00 ; #ECD1
    .db $0B ; #ECD2
    .db $F4 ; #ECD3
    .db $F4 ; #ECD4
    .db $F4 ; #ECD5
    .db $F1 ; #ECD6
    .db $00 ; #ECD7
    .db $0F ; #ECD8
    .db $0F ; #ECD9
    .db $0F ; #ECDA
    .db $0F ; #ECDB
    .db $F1 ; #ECDC
    .db $F1 ; #ECDD
    .db $F1 ; #ECDE
    .db $F2 ; #ECDF
    .db $00 ; #ECE0
    .db $0E ; #ECE1
    .db $F2 ; #ECE2
    .db $00 ; #ECE3
    .db $0E ; #ECE4
    .db $10 ; #ECE5
    .db $10 ; #ECE6
    .db $10 ; #ECE7
    .db $F0 ; #ECE8
    .db $F0 ; #ECE9
    .db $F0 ; #ECEA
    .db $F5 ; #ECEB
    .db $00 ; #ECEC
    .db $0B ; #ECED
    .db $F5 ; #ECEE
    .db $00 ; #ECEF
    .db $0B ; #ECF0
    .db $08 ; #ECF1
    .db $08 ; #ECF2
    .db $08 ; #ECF3
    .db $F8 ; #ECF4
    .db $F8 ; #ECF5
    .db $F8 ; #ECF6
    .db $F1 ; #ECF7
    .db $00 ; #ECF8
    .db $0F ; #ECF9
    .db $F1 ; #ECFA
    .db $00 ; #ECFB
    .db $0F ; #ECFC
    .db $0D ; #ECFD
    .db $0D ; #ECFE
    .db $0D ; #ECFF
    .db $F3 ; #ED00
    .db $F3 ; #ED01
    .db $F3 ; #ED02
    .db $F7 ; #ED03
    .db $00 ; #ED04
    .db $09 ; #ED05
    .db $F7 ; #ED06
    .db $00 ; #ED07
    .db $09 ; #ED08
    .db $08 ; #ED09
    .db $08 ; #ED0A
    .db $F8 ; #ED0B
    .db $F8 ; #ED0C
    .db $F9 ; #ED0D
    .db $07 ; #ED0E
    .db $F9 ; #ED0F
    .db $07 ; #ED10
    .db $F9 ; #ED11
    .db $00 ; #ED12
    .db $07 ; #ED13
    .db $F7 ; #ED14
    .db $F7 ; #ED15
    .db $F7 ; #ED16
    .db $0C ; #ED17
    .db $0C ; #ED18
    .db $0C ; #ED19
    .db $F4 ; #ED1A
    .db $F4 ; #ED1B
    .db $F4 ; #ED1C
    .db $FD ; #ED1D
    .db $00 ; #ED1E
    .db $03 ; #ED1F
    .db $FD ; #ED20
    .db $00 ; #ED21
    .db $03 ; #ED22
    .db $00 ; #ED23
    .db $F9 ; #ED24
    .db $07 ; #ED25
    .db $10 ; #ED26
    .db $F0 ; #ED27
    .db $F9 ; #ED28
    .db $07 ; #ED29
    .db $F9 ; #ED2A
    .db $07 ; #ED2B
    .db $F9 ; #ED2C
    .db $07 ; #ED2D
    .db $F9 ; #ED2E
    .db $07 ; #ED2F
    .db $F9 ; #ED30
    .db $07 ; #ED31
    .db $F9 ; #ED32
    .db $07 ; #ED33

L7_ED34:
    .db $00 ; #ED34
    .db $40 ; #ED35

L7_ED36:
    .db $0F ; #ED36
    .db $0F ; #ED37
    .db $00 ; #ED38
    .db $00 ; #ED39

L7_ED3A:
    CPX #$02 ; #ED3A
    BCS L7_ED43 ; #ED3C
    JSR L7_EDF5 ; #ED3E
    BCS L7_ED5A ; #ED41
L7_ED43:
    LDA <$06 ; #ED43
    AND #$0F ; #ED45
    STA <$06 ; #ED47
    LDA $04F0, X ; #ED49
    SEC ; #ED4C
    SBC <$06 ; #ED4D
    STA $04F0, X ; #ED4F
    LDA $0500, X ; #ED52
    SBC #$00 ; #ED55
    STA $0500, X ; #ED57
L7_ED5A:
    RTS ; #ED5A
L7_ED5B:
    CPX #$02 ; #ED5B
    BCS L7_ED64 ; #ED5D
    JSR L7_EE23 ; #ED5F
    BCS L7_ED5A ; #ED62
L7_ED64:
    LDA <$06 ; #ED64
    AND #$0F ; #ED66
    EOR #$0F ; #ED68
    SEC ; #ED6A
    ADC $04F0, X ; #ED6B
    STA $04F0, X ; #ED6E
    LDA $0500, X ; #ED71
    ADC #$00 ; #ED74
    STA $0500, X ; #ED76
    RTS ; #ED79
L7_ED7A:
    LDA <$07 ; #ED7A
    AND #$0F ; #ED7C
    EOR #$0F ; #ED7E
    SEC ; #ED80
    ADC $0510, X ; #ED81
    STA $0510, X ; #ED84
    CMP #$F0 ; #ED87
    BCC L7_ED98 ; #ED89
    ADC #$0F ; #ED8B
    STA $0510, X ; #ED8D
    LDA $0520, X ; #ED90
    ADC #$00 ; #ED93
    STA $0520, X ; #ED95
L7_ED98:
    RTS ; #ED98
L7_ED99:
    LDA <$07 ; #ED99
    AND #$0F ; #ED9B
    STA <$07 ; #ED9D
    LDA $0510, X ; #ED9F
    SEC ; #EDA2
    SBC <$07 ; #EDA3
    STA $0510, X ; #EDA5
    BCS L7_EDB7 ; #EDA8
    SBC #$0F ; #EDAA
    STA $0510, X ; #EDAC
    LDA $0520, X ; #EDAF
    SBC #$01 ; #EDB2
    STA $0520, X ; #EDB4
L7_EDB7:
    CPX #$02 ; #EDB7
    BCC L7_EDBC ; #EDB9
    RTS ; #EDBB
L7_EDBC:
    LDY #$00 ; #EDBC
    LDA <$43 ; #EDBE
    CMP #$08 ; #EDC0
    BEQ L7_EDCB ; #EDC2
    INY ; #EDC4
    LDA <$42 ; #EDC5
    CMP #$09 ; #EDC7
    BNE L7_EDF4 ; #EDC9
L7_EDCB:
    LDA #$01 ; #EDCB
    STA <$5A, X ; #EDCD
    LDA $04F0, X ; #EDCF
    CLC ; #EDD2
    ADC L7_EECB, Y ; #EDD3
    AND #$0F ; #EDD6
    ORA L7_EECD, Y ; #EDD8
    STA <$00 ; #EDDB
    TAY ; #EDDD
    LDA $0510, X ; #EDDE
    CLC ; #EDE1
    ADC L7_EEAB, Y ; #EDE2
    STA $0510, X ; #EDE5
    CMP #$F0 ; #EDE8
    BCC L7_EDF4 ; #EDEA
    ADC #$0F ; #EDEC
    STA $0510, X ; #EDEE
    INC $0520, X ; #EDF1
L7_EDF4:
    RTS ; #EDF4
L7_EDF5:
    LDY #$0F ; #EDF5
    LDA <$42 ; #EDF7
    CMP #$07 ; #EDF9
    BEQ L7_EE64 ; #EDFB
    LDA $04F0, X ; #EDFD
    CLC ; #EE00
    ADC #$08 ; #EE01
    AND #$0F ; #EE03
    TAY ; #EE05
    LDA <$42 ; #EE06
    CMP #$09 ; #EE08
    BEQ L7_EE64 ; #EE0A
    CMP #$08 ; #EE0C
    BEQ L7_EE20 ; #EE0E
    LDA <$43 ; #EE10
    CMP #$09 ; #EE12
    BEQ L7_EE64 ; #EE14
    CMP #$08 ; #EE16
    BEQ L7_EE20 ; #EE18
    LDA #$00 ; #EE1A
    STA <$5A, X ; #EE1C
    CLC ; #EE1E
    RTS ; #EE1F
L7_EE20:
    JMP L7_EEA9 ; #EE20
L7_EE23:
    LDY #$10 ; #EE23
    LDA <$42 ; #EE25
    CMP #$07 ; #EE27
    BEQ L7_EE64 ; #EE29
    LDA $04F0, X ; #EE2B
    SEC ; #EE2E
    SBC #$08 ; #EE2F
    AND #$0F ; #EE31
    ORA #$10 ; #EE33
    TAY ; #EE35
    LDA <$42 ; #EE36
    CMP #$08 ; #EE38
    BEQ L7_EE64 ; #EE3A
    CMP #$09 ; #EE3C
    BEQ L7_EEA9 ; #EE3E
    LDA <$43 ; #EE40
    CMP #$08 ; #EE42
    BEQ L7_EE64 ; #EE44
    CMP #$09 ; #EE46
    BEQ L7_EEA9 ; #EE48
    LDA <$5A, X ; #EE4A
    BNE L7_EE50 ; #EE4C
L7_EE4E:
    CLC ; #EE4E
    RTS ; #EE4F
L7_EE50:
    LDA <$43 ; #EE50
    CMP #$03 ; #EE52
    BCS L7_EE4E ; #EE54
    LDA <$44 ; #EE56
    CMP #$03 ; #EE58
    BCS L7_EE4E ; #EE5A
    LDY #$10 ; #EE5C
    LDA #$00 ; #EE5E
    STA <$5A, X ; #EE60
    BEQ L7_EE6D ; #EE62
L7_EE64:
    LDA $0560, X ; #EE64
    BPL L7_EEA9 ; #EE67
    LDA #$01 ; #EE69
    STA <$5A, X ; #EE6B
L7_EE6D:
    LDA $0510, X ; #EE6D
    CLC ; #EE70
    ADC #$0C ; #EE71
    EOR #$FF ; #EE73
    CLC ; #EE75
    ADC #$01 ; #EE76
    AND #$0F ; #EE78
    CLC ; #EE7A
    ADC $0510, X ; #EE7B
    STA $0510, X ; #EE7E
    CMP #$F0 ; #EE81
    BCC L7_EE92 ; #EE83
    ADC #$0F ; #EE85
    STA $0510, X ; #EE87
    LDA $0520, X ; #EE8A
    ADC #$00 ; #EE8D
    STA $0520, X ; #EE8F
L7_EE92:
    LDA $0510, X ; #EE92
    SEC ; #EE95
    SBC L7_EEAB, Y ; #EE96
    BCS L7_EE9E ; #EE99
    SBC #$0F ; #EE9B
    CLC ; #EE9D
L7_EE9E:
    STA $0510, X ; #EE9E
    LDA $0520, X ; #EEA1
    SBC #$00 ; #EEA4
    STA $0520, X ; #EEA6
L7_EEA9:
    SEC ; #EEA9
    RTS ; #EEAA

L7_EEAB:
    .db $00 ; #EEAB
    .db $01 ; #EEAC
    .db $02 ; #EEAD
    .db $03 ; #EEAE
    .db $04 ; #EEAF
    .db $05 ; #EEB0
    .db $06 ; #EEB1
    .db $07 ; #EEB2
    .db $08 ; #EEB3
    .db $09 ; #EEB4
    .db $0A ; #EEB5
    .db $0B ; #EEB6
    .db $0C ; #EEB7
    .db $0D ; #EEB8
    .db $0E ; #EEB9
    .db $0F ; #EEBA
    .db $0F ; #EEBB
    .db $0E ; #EEBC
    .db $0D ; #EEBD
    .db $0C ; #EEBE
    .db $0B ; #EEBF
    .db $0A ; #EEC0
    .db $09 ; #EEC1
    .db $08 ; #EEC2
    .db $07 ; #EEC3
    .db $06 ; #EEC4
    .db $05 ; #EEC5
    .db $04 ; #EEC6
    .db $03 ; #EEC7
    .db $02 ; #EEC8
    .db $01 ; #EEC9
    .db $00 ; #EECA

L7_EECB:
    .db $F9 ; #EECB
    .db $07 ; #EECC

L7_EECD:
    .db $00 ; #EECD
    .db $10 ; #EECE

    .db $60 ; #EECF
    .db $81 ; #EED0
    .db $01 ; #EED1
    .db $70 ; #EED2
    .db $0F ; #EED3
    .db $82 ; #EED4
    .db $70 ; #EED5
    .db $40 ; #EED6
    .db $20 ; #EED7
    .db $89 ; #EED8
    .db $30 ; #EED9
    .db $4D ; #EEDA
    .db $32 ; #EEDB
    .db $86 ; #EEDC
    .db $91 ; #EEDD
    .db $36 ; #EEDE
    .db $48 ; #EEDF
    .db $D7 ; #EEE0
    .db $25 ; #EEE1
    .db $83 ; #EEE2
    .db $6A ; #EEE3
    .db $15 ; #EEE4
    .db $AF ; #EEE5
    .db $BF ; #EEE6
    .db $B1 ; #EEE7
    .db $E5 ; #EEE8
    .db $DF ; #EEE9
    .db $CD ; #EEEA
    .db $83 ; #EEEB
    .db $18 ; #EEEC
    .db $C7 ; #EEED
    .db $FE ; #EEEE
    .db $AF ; #EEEF
    .db $B1 ; #EEF0
    .db $FE ; #EEF1
    .db $DF ; #EEF2
    .db $FD ; #EEF3
    .db $13 ; #EEF4
    .db $B8 ; #EEF5
    .db $6F ; #EEF6
    .db $FC ; #EEF7
    .db $D6 ; #EEF8
    .db $9C ; #EEF9
    .db $4B ; #EEFA
    .db $43 ; #EEFB
    .db $A7 ; #EEFC
    .db $E5 ; #EEFD
    .db $B9 ; #EEFE
    .db $3F ; #EEFF
    .db $BF ; #EF00
    .db $A7 ; #EF01
    .db $45 ; #EF02
    .db $B7 ; #EF03
    .db $8F ; #EF04
    .db $C8 ; #EF05
    .db $07 ; #EF06
    .db $89 ; #EF07
    .db $E0 ; #EF08
    .db $08 ; #EF09
    .db $82 ; #EF0A
    .db $10 ; #EF0B
    .db $07 ; #EF0C
    .db $05 ; #EF0D
    .db $00 ; #EF0E
    .db $08 ; #EF0F
    .db $08 ; #EF10
    .db $D5 ; #EF11
    .db $49 ; #EF12
    .db $47 ; #EF13
    .db $2B ; #EF14
    .db $14 ; #EF15
    .db $B6 ; #EF16
    .db $A8 ; #EF17
    .db $56 ; #EF18
    .db $82 ; #EF19
    .db $55 ; #EF1A
    .db $4D ; #EF1B
    .db $8E ; #EF1C
    .db $FD ; #EF1D
    .db $A3 ; #EF1E
    .db $00 ; #EF1F
    .db $A0 ; #EF20
    .db $0F ; #EF21
    .db $E2 ; #EF22
    .db $A6 ; #EF23
    .db $22 ; #EF24
    .db $3B ; #EF25
    .db $7D ; #EF26
    .db $B9 ; #EF27
    .db $AE ; #EF28
    .db $C6 ; #EF29
    .db $7B ; #EF2A
    .db $A7 ; #EF2B
    .db $F8 ; #EF2C
    .db $44 ; #EF2D
    .db $C8 ; #EF2E
    .db $67 ; #EF2F
    .db $8E ; #EF30
    .db $44 ; #EF31
    .db $27 ; #EF32
    .db $A4 ; #EF33
    .db $EA ; #EF34
    .db $5E ; #EF35
    .db $CE ; #EF36
    .db $96 ; #EF37
    .db $38 ; #EF38
    .db $EC ; #EF39
    .db $B3 ; #EF3A
    .db $86 ; #EF3B
    .db $54 ; #EF3C
    .db $5A ; #EF3D
    .db $D2 ; #EF3E
    .db $5C ; #EF3F
    .db $25 ; #EF40
    .db $FE ; #EF41
    .db $23 ; #EF42
    .db $92 ; #EF43
    .db $BB ; #EF44
    .db $96 ; #EF45
    .db $58 ; #EF46
    .db $2A ; #EF47
    .db $40 ; #EF48
    .db $80 ; #EF49
    .db $25 ; #EF4A
    .db $18 ; #EF4B
    .db $08 ; #EF4C
    .db $C5 ; #EF4D
    .db $80 ; #EF4E
    .db $A0 ; #EF4F
    .db $64 ; #EF50
    .db $8C ; #EF51
    .db $41 ; #EF52
    .db $18 ; #EF53
    .db $35 ; #EF54
    .db $A4 ; #EF55
    .db $84 ; #EF56
    .db $62 ; #EF57
    .db $00 ; #EF58
    .db $81 ; #EF59
    .db $68 ; #EF5A
    .db $D5 ; #EF5B
    .db $0C ; #EF5C
    .db $0A ; #EF5D
    .db $F2 ; #EF5E
    .db $93 ; #EF5F
    .db $D2 ; #EF60
    .db $2D ; #EF61
    .db $85 ; #EF62
    .db $5E ; #EF63
    .db $2B ; #EF64
    .db $DD ; #EF65
    .db $67 ; #EF66
    .db $34 ; #EF67
    .db $72 ; #EF68
    .db $B0 ; #EF69
    .db $DD ; #EF6A
    .db $FE ; #EF6B
    .db $D9 ; #EF6C
    .db $7D ; #EF6D
    .db $8D ; #EF6E
    .db $92 ; #EF6F
    .db $5F ; #EF70
    .db $37 ; #EF71
    .db $BF ; #EF72
    .db $4E ; #EF73
    .db $67 ; #EF74
    .db $76 ; #EF75
    .db $73 ; #EF76
    .db $52 ; #EF77
    .db $9A ; #EF78
    .db $4B ; #EF79
    .db $FC ; #EF7A
    .db $B7 ; #EF7B
    .db $9B ; #EF7C
    .db $81 ; #EF7D
    .db $50 ; #EF7E
    .db $6A ; #EF7F
    .db $7E ; #EF80
    .db $DF ; #EF81
    .db $C7 ; #EF82
    .db $7C ; #EF83
    .db $90 ; #EF84
    .db $B8 ; #EF85
    .db $60 ; #EF86
    .db $5B ; #EF87
    .db $A1 ; #EF88
    .db $08 ; #EF89
    .db $51 ; #EF8A
    .db $1B ; #EF8B
    .db $A2 ; #EF8C
    .db $05 ; #EF8D
    .db $65 ; #EF8E
    .db $00 ; #EF8F
    .db $0B ; #EF90
    .db $34 ; #EF91
    .db $D6 ; #EF92
    .db $0A ; #EF93
    .db $83 ; #EF94
    .db $04 ; #EF95
    .db $0A ; #EF96
    .db $50 ; #EF97
    .db $C1 ; #EF98
    .db $69 ; #EF99
    .db $66 ; #EF9A
    .db $80 ; #EF9B
    .db $50 ; #EF9C
    .db $4E ; #EF9D
    .db $66 ; #EF9E
    .db $AA ; #EF9F
    .db $DE ; #EFA0
    .db $8C ; #EFA1
    .db $95 ; #EFA2
    .db $C2 ; #EFA3
    .db $54 ; #EFA4
    .db $6C ; #EFA5
    .db $BE ; #EFA6
    .db $E3 ; #EFA7
    .db $6B ; #EFA8
    .db $B3 ; #EFA9
    .db $71 ; #EFAA
    .db $D9 ; #EFAB
    .db $35 ; #EFAC
    .db $BF ; #EFAD
    .db $1F ; #EFAE
    .db $91 ; #EFAF
    .db $99 ; #EFB0
    .db $6F ; #EFB1
    .db $F5 ; #EFB2
    .db $60 ; #EFB3
    .db $6D ; #EFB4
    .db $C4 ; #EFB5
    .db $FF ; #EFB6
    .db $C1 ; #EFB7
    .db $9D ; #EFB8
    .db $C1 ; #EFB9
    .db $53 ; #EFBA
    .db $EB ; #EFBB
    .db $7C ; #EFBC
    .db $1E ; #EFBD
    .db $FF ; #EFBE
    .db $12 ; #EFBF
    .db $2A ; #EFC0
    .db $86 ; #EFC1
    .db $40 ; #EFC2
    .db $60 ; #EFC3
    .db $EF ; #EFC4
    .db $53 ; #EFC5
    .db $81 ; #EFC6
    .db $83 ; #EFC7
    .db $C4 ; #EFC8
    .db $58 ; #EFC9
    .db $93 ; #EFCA
    .db $68 ; #EFCB
    .db $70 ; #EFCC
    .db $B2 ; #EFCD
    .db $28 ; #EFCE
    .db $21 ; #EFCF
    .db $05 ; #EFD0
    .db $30 ; #EFD1
    .db $40 ; #EFD2
    .db $82 ; #EFD3
    .db $06 ; #EFD4
    .db $43 ; #EFD5
    .db $9E ; #EFD6
    .db $84 ; #EFD7
    .db $40 ; #EFD8
    .db $88 ; #EFD9
    .db $10 ; #EFDA
    .db $18 ; #EFDB
    .db $A3 ; #EFDC
    .db $D1 ; #EFDD
    .db $98 ; #EFDE
    .db $04 ; #EFDF
    .db $F8 ; #EFE0
    .db $7C ; #EFE1
    .db $F0 ; #EFE2
    .db $B5 ; #EFE3
    .db $F3 ; #EFE4
    .db $0D ; #EFE5
    .db $8A ; #EFE6
    .db $87 ; #EFE7
    .db $54 ; #EFE8
    .db $A4 ; #EFE9
    .db $33 ; #EFEA
    .db $37 ; #EFEB
    .db $DC ; #EFEC
    .db $9D ; #EFED
    .db $89 ; #EFEE
    .db $87 ; #EFEF
    .db $F3 ; #EFF0
    .db $3D ; #EFF1
    .db $6E ; #EFF2
    .db $FD ; #EFF3
    .db $68 ; #EFF4
    .db $7D ; #EFF5
    .db $EB ; #EFF6
    .db $F7 ; #EFF7
    .db $F7 ; #EFF8
    .db $9E ; #EFF9
    .db $76 ; #EFFA
    .db $D6 ; #EFFB
    .db $FA ; #EFFC
    .db $5A ; #EFFD
    .db $7F ; #EFFE
    .db $27 ; #EFFF


L7_F000:
    STA <$40 ; #F000
    STY <$41 ; #F002
    JSR L7_F21E ; #F004
    CPX #$02 ; #F007
    BCS L7_F03F ; #F009
    JSR L7_F5A6 ; #F00B
    BCC L7_F03F ; #F00E
    LDA #$04 ; #F010
    CMP <$10 ; #F012
    BCS L7_F018 ; #F014
    STA <$10 ; #F016
L7_F018:
    LDA $04F0, X ; #F018
    SBC <$10 ; #F01B
    STA $04F0, X ; #F01D
    LDA $0500, X ; #F020
    SBC #$00 ; #F023
    STA $0500, X ; #F025
    LDA $04F0, X ; #F028
    SEC ; #F02B
    SBC <$68, X ; #F02C
    LDA $0500, X ; #F02E
    SBC <$6A, X ; #F031
    BCS L7_F03F ; #F033
    LDA #$03 ; #F035
    STA <$40 ; #F037
    JSR L7_F0AC ; #F039
    JMP L7_F05D ; #F03C
L7_F03F:
    CPX #$02 ; #F03F
    BCC L7_F051 ; #F041
    STX <$00 ; #F043
    LDA #$00 ; #F045
    STA <$10 ; #F047
    LDA <$95 ; #F049
    EOR <$00 ; #F04B
    AND #$01 ; #F04D
    BNE L7_F05D ; #F04F
L7_F051:
    JSR L7_EA8F ; #F051
    LDA <$10 ; #F054
    CMP #$03 ; #F056
    BCC L7_F05D ; #F058
    JSR L7_ED3A ; #F05A
L7_F05D:
    LDA $0400, X ; #F05D
    ORA #$40 ; #F060
    STA $0400, X ; #F062
    RTS ; #F065
L7_F066:
    STA <$40 ; #F066
    STY <$41 ; #F068
    JSR L7_F23C ; #F06A
    CPX #$02 ; #F06D
    BCS L7_F0AC ; #F06F
    JSR L7_F5A6 ; #F071
    BCC L7_F0AC ; #F074
    LDA #$04 ; #F076
    CMP <$10 ; #F078
    BCS L7_F07E ; #F07A
    STA <$10 ; #F07C
L7_F07E:
    LDA $04F0, X ; #F07E
    CLC ; #F081
    ADC <$10 ; #F082
    STA $04F0, X ; #F084
    LDA $0500, X ; #F087
    ADC #$00 ; #F08A
    STA $0500, X ; #F08C
    LDA $04F0, X ; #F08F
    SEC ; #F092
    SBC <$68, X ; #F093
    STA <$00 ; #F095
    LDA $0500, X ; #F097
    SBC <$6A, X ; #F09A
    ORA <$00 ; #F09C
    BEQ L7_F0AC ; #F09E
    BCC L7_F0AC ; #F0A0
    LDA #$00 ; #F0A2
    STA <$40 ; #F0A4
    JSR L7_F03F ; #F0A6
    JMP L7_F0CA ; #F0A9
L7_F0AC:
    CPX #$02 ; #F0AC
    BCC L7_F0BE ; #F0AE
    STX <$00 ; #F0B0
    LDA #$00 ; #F0B2
    STA <$10 ; #F0B4
    LDA <$95 ; #F0B6
    EOR <$00 ; #F0B8
    AND #$01 ; #F0BA
    BNE L7_F0CA ; #F0BC
L7_F0BE:
    JSR L7_EA8F ; #F0BE
    LDA <$10 ; #F0C1
    CMP #$03 ; #F0C3
    BCC L7_F0CA ; #F0C5
    JSR L7_ED5B ; #F0C7
L7_F0CA:
    LDA $0400, X ; #F0CA
    AND #$BF ; #F0CD
    STA $0400, X ; #F0CF
    RTS ; #F0D2
    STA <$40 ; #F0D3
    STY <$41 ; #F0D5
    JSR L7_F25A ; #F0D7
    JSR L7_EA8F ; #F0DA
    LDA <$10 ; #F0DD
    CMP #$03 ; #F0DF
    BCC L7_F0E6 ; #F0E1
    JSR L7_ED99 ; #F0E3
L7_F0E6:
    RTS ; #F0E6
    STA <$40 ; #F0E7
    STY <$41 ; #F0E9
    JSR L7_F27F ; #F0EB
    JSR L7_EA8F ; #F0EE
    LDA <$10 ; #F0F1
    CMP #$03 ; #F0F3
    BCC L7_F0FA ; #F0F5
    JSR L7_ED7A ; #F0F7
L7_F0FA:
    RTS ; #F0FA
L7_F0FB:
    STA <$40 ; #F0FB
    STY <$41 ; #F0FD
    LDA $0510, X ; #F0FF
    STA <$02 ; #F102
    LDA $0520, X ; #F104
    STA <$03 ; #F107
    LDA $0560, X ; #F109
    BPL L7_F15F ; #F10C
    JSR L7_F2C5 ; #F10E
    CPX #$02 ; #F111
    BCS L7_F140 ; #F113
    JSR L7_F62D ; #F115
    BCC L7_F140 ; #F118
    LDA #$04 ; #F11A
    CMP <$11 ; #F11C
    BCS L7_F122 ; #F11E
    STA <$11 ; #F120
L7_F122:
    LDA $0510, X ; #F122
    SEC ; #F125
    SBC <$11 ; #F126
    STA $0510, X ; #F128
    BCS L7_F13A ; #F12B
    SBC #$0F ; #F12D
    STA $0510, X ; #F12F
    LDA $0520, X ; #F132
    SBC #$01 ; #F135
    STA $0520, X ; #F137
L7_F13A:
    JSR L7_F1AE ; #F13A
    JMP L7_F15A ; #F13D
L7_F140:
    JSR L7_F2FB ; #F140
    JSR L7_EA8F ; #F143
    CLC ; #F146
    LDA <$10 ; #F147
    CMP #$02 ; #F149
    BCC L7_F15E ; #F14B
    BNE L7_F157 ; #F14D
    LDA <$07 ; #F14F
    AND #$0F ; #F151
    CMP #$08 ; #F153
    BCS L7_F1AC ; #F155
L7_F157:
    JSR L7_ED99 ; #F157
L7_F15A:
    JSR L7_F31D ; #F15A
    SEC ; #F15D
L7_F15E:
    RTS ; #F15E
L7_F15F:
    LDA <$40 ; #F15F
    SEC ; #F161
    ADC <$41 ; #F162
    STA <$40 ; #F164
    JSR L7_F2A2 ; #F166
    CPX #$02 ; #F169
    BCS L7_F19A ; #F16B
    JSR L7_F62D ; #F16D
    BCC L7_F19A ; #F170
    LDA #$04 ; #F172
    CMP <$11 ; #F174
    BCS L7_F17A ; #F176
    STA <$11 ; #F178
L7_F17A:
    LDA $0510, X ; #F17A
    CLC ; #F17D
    ADC <$11 ; #F17E
    STA $0510, X ; #F180
    CMP #$F0 ; #F183
    BCC L7_F194 ; #F185
    ADC #$0F ; #F187
    STA $0510, X ; #F189
    LDA $0520, X ; #F18C
    ADC #$00 ; #F18F
    STA $0520, X ; #F191
L7_F194:
    JSR L7_F1AE ; #F194
    JMP L7_F1A9 ; #F197
L7_F19A:
    JSR L7_F2FB ; #F19A
    JSR L7_EA8F ; #F19D
    LDA <$10 ; #F1A0
    CMP #$03 ; #F1A2
    BCC L7_F1AC ; #F1A4
    JSR L7_ED7A ; #F1A6
L7_F1A9:
    JSR L7_F31D ; #F1A9
L7_F1AC:
    CLC ; #F1AC
    RTS ; #F1AD
L7_F1AE:
    LDA $0510, X ; #F1AE
    SEC ; #F1B1
    SBC <$02 ; #F1B2
    LDA $0520, X ; #F1B4
    SBC <$03 ; #F1B7
    BCS L7_F1D0 ; #F1B9
    LDA #$08 ; #F1BB
    STA <$40 ; #F1BD
    JSR L7_EA8F ; #F1BF
    LDA <$10 ; #F1C2
    CMP #$03 ; #F1C4
    BCC L7_F1CF ; #F1C6
    JSR L7_ED7A ; #F1C8
    JSR L7_F31D ; #F1CB
    CLC ; #F1CE
L7_F1CF:
    RTS ; #F1CF
L7_F1D0:
    LDA #$06 ; #F1D0
    STA <$40 ; #F1D2
    JSR L7_EA8F ; #F1D4
    LDA <$10 ; #F1D7
    CMP #$02 ; #F1D9
    BCC L7_F1EF ; #F1DB
    BNE L7_F1E7 ; #F1DD
    LDA <$07 ; #F1DF
    AND #$0F ; #F1E1
    CMP #$08 ; #F1E3
    BCS L7_F1EF ; #F1E5
L7_F1E7:
    JSR L7_ED99 ; #F1E7
    JSR L7_F31D ; #F1EA
    SEC ; #F1ED
    RTS ; #F1EE
L7_F1EF:
    CLC ; #F1EF
    RTS ; #F1F0
    STA <$40 ; #F1F1
    STY <$41 ; #F1F3
    JSR L7_F2C5 ; #F1F5
    JSR L7_F2FB ; #F1F8
    JSR L7_EA8F ; #F1FB
    LDA <$10 ; #F1FE
    CMP #$02 ; #F200
    BCC L7_F215 ; #F202
    BNE L7_F20D ; #F204
    LDA $0560, X ; #F206
    CMP #$FC ; #F209
    BCS L7_F215 ; #F20B
L7_F20D:
    JSR L7_ED99 ; #F20D
    JSR L7_F31D ; #F210
    SEC ; #F213
    RTS ; #F214
L7_F215:
    CLC ; #F215
    RTS ; #F216
    STA <$40 ; #F217
    STY <$41 ; #F219
    JMP L7_EA8F ; #F21B
L7_F21E:
    LDA $0470, X ; #F21E
    CLC ; #F221
    ADC $0530, X ; #F222
    STA $0470, X ; #F225
    LDA $04F0, X ; #F228
    ADC $0540, X ; #F22B
    STA $04F0, X ; #F22E
    BCC L7_F23B ; #F231
    LDA $0500, X ; #F233
    ADC #$00 ; #F236
    STA $0500, X ; #F238
L7_F23B:
    RTS ; #F23B
L7_F23C:
    LDA $0470, X ; #F23C
    SEC ; #F23F
    SBC $0530, X ; #F240
    STA $0470, X ; #F243
    LDA $04F0, X ; #F246
    SBC $0540, X ; #F249
    STA $04F0, X ; #F24C
    BCS L7_F259 ; #F24F
    LDA $0500, X ; #F251
    SBC #$00 ; #F254
    STA $0500, X ; #F256
L7_F259:
    RTS ; #F259
L7_F25A:
    LDA $0460, X ; #F25A
    CLC ; #F25D
    ADC $0550, X ; #F25E
    STA $0460, X ; #F261
    LDA $0510, X ; #F264
    ADC $0560, X ; #F267
    STA $0510, X ; #F26A
    CMP #$F0 ; #F26D
    BCC L7_F27E ; #F26F
    ADC #$0F ; #F271
    STA $0510, X ; #F273
    LDA $0520, X ; #F276
    ADC #$00 ; #F279
    STA $0520, X ; #F27B
L7_F27E:
    RTS ; #F27E
L7_F27F:
    LDA $0460, X ; #F27F
    SEC ; #F282
    SBC $0550, X ; #F283
    STA $0460, X ; #F286
    LDA $0510, X ; #F289
    SBC $0560, X ; #F28C
    STA $0510, X ; #F28F
    BCS L7_F2A1 ; #F292
    SBC #$0F ; #F294
    STA $0510, X ; #F296
    LDA $0520, X ; #F299
    SBC #$01 ; #F29C
    STA $0520, X ; #F29E
L7_F2A1:
    RTS ; #F2A1
L7_F2A2:
    LDA $0460, X ; #F2A2
    SEC ; #F2A5
    SBC $0550, X ; #F2A6
    STA $0460, X ; #F2A9
    LDA $0510, X ; #F2AC
    SBC $0560, X ; #F2AF
    STA $0510, X ; #F2B2
    BCS L7_F2C4 ; #F2B5
    SBC #$0F ; #F2B7
    STA $0510, X ; #F2B9
    LDA $0520, X ; #F2BC
    SBC #$01 ; #F2BF
    STA $0520, X ; #F2C1
L7_F2C4:
    RTS ; #F2C4
L7_F2C5:
    LDA $0460, X ; #F2C5
    SEC ; #F2C8
    SBC $0550, X ; #F2C9
    STA $0460, X ; #F2CC
    LDA $0510, X ; #F2CF
    SBC $0560, X ; #F2D2
    STA $0510, X ; #F2D5
    CMP #$F0 ; #F2D8
    BCC L7_F2E9 ; #F2DA
    ADC #$0F ; #F2DC
    STA $0510, X ; #F2DE
    LDA $0520, X ; #F2E1
    ADC #$00 ; #F2E4
    STA $0520, X ; #F2E6
L7_F2E9:
    RTS ; #F2E9

L7_F2EA:
    LDA $0560, X ; #F2EA
    BPL L7_F2F5 ; #F2ED
    JSR L7_F2C5 ; #F2EF
    JMP L7_F2FB ; #F2F2
L7_F2F5:
    JSR L7_F2A2 ; #F2F5
    JMP L7_F2FB ; #F2F8
L7_F2FB:
    LDA $0550, X ; #F2FB
    SEC ; #F2FE
    SBC <$99 ; #F2FF
    STA $0550, X ; #F301
    LDA $0560, X ; #F304
    SBC #$00 ; #F307
    STA $0560, X ; #F309
    BPL L7_F31C ; #F30C
    CMP #$F9 ; #F30E
    BCS L7_F31C ; #F310
    LDA #$F8 ; #F312
    STA $0560, X ; #F314
    LDA #$00 ; #F317
    STA $0550, X ; #F319
L7_F31C:
    RTS ; #F31C


; X - index of the player, 0 or 1.
L7_F31D:
    LDA #$AB
    STA $0550, X                        ; $0550[X] = #$AB
    LDA #$FF
    STA $0560, X                        ; $0560[X] = #$FF
    RTS


    LDY #$00 ; #F328
    JSR L7_F345 ; #F32A
    STA <$01 ; #F32D
    LDA <$00 ; #F32F
    STA <$02 ; #F331
    INY ; #F333
    JSR L7_F345 ; #F334
    CMP <$01 ; #F337
    BCC L7_F33F ; #F339
    LDA <$02 ; #F33B
    STA <$00 ; #F33D
L7_F33F:
    LDA <$00 ; #F33F
    STA $0580, X ; #F341
    RTS ; #F344
L7_F345:
    LDA $04D0, Y ; #F345
    BPL L7_F369 ; #F348
    LDA #$01 ; #F34A
    STA <$00 ; #F34C
    LDA $04F0, X ; #F34E
    SEC ; #F351
    SBC $04F0, Y ; #F352
    PHA ; #F355
    LDA $0500, X ; #F356
    SBC $0500, Y ; #F359
    PLA ; #F35C
    BCS L7_F364 ; #F35D
    EOR #$FF ; #F35F
    ADC #$01 ; #F361
    RTS ; #F363
L7_F364:
    LDA #$02 ; #F364
    STA <$00 ; #F366
    RTS ; #F368
L7_F369:
    LDA #$FF ; #F369
    RTS ; #F36B
    JSR L7_E817 ; #F36C
    PHP ; #F36F
    LDA #BANK_6 ; #F370
    JSR SetFirstPrgBank ; #F372
    PLP ; #F375
    RTS ; #F376


; A - param
; X and Y registers are effectively untouched by this function, cool.
L7_F377:
    STA <$D9                            ; Store A in <$D9. Music?
EnqueueSfx:
    STX <$00                            ; Store X in temp buffer to get it back later.
    LDX <SfxQueueWriteIdx               ; Read X from SfxQueueWriteIdx.
    STA <$01                            ; Store A in temp buffer to get it back later as well.
    LDA <SfxQueue, X                    ; A = SfxQueue[X]
    CMP #SFX_Q_NULL
    BNE ReturnFromEnqueueSfx            ; Return if value is not SFX_Q_NULL.
    LDA <$01                            ; Restore A from temp buffer.
    STA <SfxQueue, X                    ; SfxQueue[X] = A
    INX                                 ; ++X
    TXA                                 ; A = X
    AND #SFX_Q_IDX_MASK                 ; A &= 7
    STA <SfxQueueWriteIdx               ; SfxQueueWriteIdx = A
ReturnFromEnqueueSfx:
    LDX <$00                            ; Restore X from temp buffer.
    RTS


L7_F392:
    LDA <CurPrgBank ; #F392
    PHA ; #F394
    INC <$9A ; #F395
    JSR HideSprites ; #F397
    LDA #BANK_5 ; #F39A
    JSR SetFirstPrgBank ; #F39C
    JSR $8000 ; #F39F
    LDA #$00 ; #F3A2
    STA <$9A ; #F3A4
    JSR WaitNmiAndReadInputs ; #F3A6
    PLA ; #F3A9
    JMP SetFirstPrgBank ; #F3AA

L7_F3AD:
    LDA <CurPrgBank ; #F3AD
    PHA ; #F3AF
    LDA #$08 ; #F3B0
    STA <$2F ; #F3B2
    JSR L7_DAFD ; #F3B4
    PLA ; #F3B7
    JMP SetFirstPrgBank ; #F3B8

L7_F3BB:
    LDA <CurPrgBank ; #F3BB
    PHA ; #F3BD
    LDA #$04 ; #F3BE
    STA <$2F ; #F3C0
    JSR L7_DAAF ; #F3C2
    PLA ; #F3C5
    JMP SetFirstPrgBank ; #F3C6

L7_F3C9:
    LDA <CurPrgBank ; #F3C9
    PHA ; #F3CB
    JSR FadeoutScreen ; #F3CC
    JSR HideSprites ; #F3CF
    JSR WaitNmiAndReadInputs ; #F3D2
    JSR DisableDisplay ; #F3D5
    LDA #$20 ; #F3D8
    LDX #$00 ; #F3DA
    LDY #$00 ; #F3DC
    JSR FillScreen ; #F3DE
    PLA ; #F3E1
    JMP SetFirstPrgBank ; #F3E2

L7_F3E5:
    LDA <CurPrgBank ; #F3E5
    PHA ; #F3E7
    JSR EnableDisplay ; #F3E8
    JSR WaitNmiAndReadInputs ; #F3EB
    JSR LitTheScreen ; #F3EE
    PLA ; #F3F1
    JMP SetFirstPrgBank ; #F3F2


L7_F3F5:
    LDA #$00 ; #F3F5
    STA <$01 ; #F3F7
    LDA #$02 ; #F3F9
    STA <$00 ; #F3FB
    LDY L7_F49F, X ; #F3FD
    CLC ; #F400
    LDA #$01 ; #F401
L7_F403:
    ADC $05A0, Y ; #F403
    STA $05A0, Y ; #F406
    CMP #$8A ; #F409
    BCC L7_F42F ; #F40B
    SBC #$0A ; #F40D
    STA $05A0, Y ; #F40F
    LDA <$00 ; #F412
    CMP #$01 ; #F414
    BNE L7_F41A ; #F416
    INC <$01 ; #F418
L7_F41A:
    SEC ; #F41A
    LDA #$00 ; #F41B
    DEY ; #F41D
    DEY ; #F41E
    DEC <$00 ; #F41F
    BPL L7_F403 ; #F421
    LDA #$89 ; #F423
    STA $05A2, Y ; #F425
    STA $05A4, Y ; #F428
    STA $05A6, Y ; #F42B
    RTS ; #F42E
L7_F42F:
    LDA <$01 ; #F42F
    BNE L7_F445 ; #F431
    LDA <$00 ; #F433
    CMP #$01 ; #F435
    BNE L7_F444 ; #F437
    LDA <$50 ; #F439
    BEQ L7_F444 ; #F43B
    LDA $05A0, Y ; #F43D
    CMP #$85 ; #F440
    BEQ L7_F445 ; #F442
L7_F444:
    RTS ; #F444
L7_F445:
    LDY #$0F ; #F445
L7_F447:
    LDA $04D0, Y ; #F447
    BPL L7_F452 ; #F44A
    DEY ; #F44C
    CPY #$05 ; #F44D
    BNE L7_F447 ; #F44F
    RTS ; #F451
L7_F452:
    LDA #$80 ; #F452
    STA $04D0, Y ; #F454
    LDA #$90 ; #F457
    STA $0400, Y ; #F459
    LDA <ScrollY ; #F45C
    CLC ; #F45E
    ADC #$80 ; #F45F
    BCS L7_F467 ; #F461
    CMP #$F0 ; #F463
    BCC L7_F46A ; #F465
L7_F467:
    ADC #$0F ; #F467
    SEC ; #F469
L7_F46A:
    STA $0510, Y ; #F46A
    LDA <$FB ; #F46D
    ADC #$00 ; #F46F
    STA $0520, Y ; #F471
    LDA <ScrollX ; #F474
    CLC ; #F476
    ADC #$08 ; #F477
    STA $04F0, Y ; #F479
    LDA <$FD ; #F47C
    ADC #$00 ; #F47E
    STA $0500, Y ; #F480
    LDA #$2F ; #F483
    STA $0420, Y ; #F485
    LDA #$3F ; #F488
    STA $04E0, Y ; #F48A
    LDA #$00 ; #F48D
    STA $0430, Y ; #F48F
    STA $0410, Y ; #F492
    STA $0570, Y ; #F495
    STA $0480, Y ; #F498
    STA $0490, Y ; #F49B
    RTS ; #F49E
L7_F49F:                                ; another wtf
    .db $0E ; #F49F
    .db $3E ; #F4A0
    .db $BD ; #F4A1
    .db $10 ; #F4A2
    .db $05 ; #F4A3
    SEC ; #F4A4
    SBC <ScrollY ; #F4A5
    BCS L7_F4AB ; #F4A7
L7_F4A9:
    SBC #$0F ; #F4A9
L7_F4AB:
    STA $0440, X ; #F4AB
    LDY #$00 ; #F4AE
    JSR L7_F4C1 ; #F4B0
    STA <$00 ; #F4B3
    INY ; #F4B5
    JSR L7_F4C1 ; #F4B6
    CMP <$00 ; #F4B9
    BCC L7_F4C0 ; #F4BB
    LDA <$00 ; #F4BD
    DEY ; #F4BF
L7_F4C0:
    RTS ; #F4C0
L7_F4C1:
    LDA $04D0, Y ; #F4C1
    BPL L7_F4DB ; #F4C4
    LDA $0510, Y ; #F4C6
    SEC ; #F4C9
    SBC <ScrollY ; #F4CA
    BCS L7_F4D0 ; #F4CC
    SBC #$0F ; #F4CE
L7_F4D0:
    SEC ; #F4D0
    SBC $0440, X ; #F4D1
    BCS L7_F4DA ; #F4D4
    EOR #$FF ; #F4D6
    ADC #$01 ; #F4D8
L7_F4DA:
    RTS ; #F4DA
L7_F4DB:
    LDA #$80 ; #F4DB
    RTS ; #F4DD
L7_F4DE:
    LDY #$00 ; #F4DE
    JSR L7_F4F1 ; #F4E0
    STA <$00 ; #F4E3
    INY ; #F4E5
    JSR L7_F4F1 ; #F4E6
    CMP <$00 ; #F4E9
    BCC L7_F4F0 ; #F4EB
    LDA <$00 ; #F4ED
    DEY ; #F4EF
L7_F4F0:
    RTS ; #F4F0
L7_F4F1:
    LDA $04D0, Y ; #F4F1
    BPL L7_F4DB ; #F4F4
    LDA $04F0, Y ; #F4F6
    SEC ; #F4F9
    SBC $04F0, X ; #F4FA
    PHA ; #F4FD
    LDA $0500, Y ; #F4FE
    SBC $0500, X ; #F501
    PLA ; #F504
    BCS L7_F50B ; #F505
    EOR #$FF ; #F507
    ADC #$01 ; #F509
L7_F50B:
    RTS ; #F50B
    JSR L7_F4DE ; #F50C
    LDA $04F0, Y ; #F50F
    STA <$05 ; #F512
    LDA $0500, Y ; #F514
    STA <$06 ; #F517
    LDA $0510, X ; #F519
    SEC ; #F51C
    SBC <ScrollY ; #F51D
    BCS L7_F525 ; #F51F
    EOR #$FF ; #F521
    SBC #$0F ; #F523
L7_F525:
    STA <$00 ; #F525
    LDA $0510, Y ; #F527
    SEC ; #F52A
    SBC <ScrollY ; #F52B
    BCS L7_F533 ; #F52D
    EOR #$FF ; #F52F
    SBC #$0F ; #F531
L7_F533:
    SEC ; #F533
    SBC <$00 ; #F534
    LDY #$00 ; #F536
    BCS L7_F540 ; #F538
    EOR #$FF ; #F53A
    ADC #$01 ; #F53C
    LDY #$04 ; #F53E
L7_F540:
    STA <$02 ; #F540
    LDA <$05 ; #F542
    SEC ; #F544
    SBC $04F0, X ; #F545
    PHA ; #F548
    LDA <$06 ; #F549
    SBC $0500, X ; #F54B
    PLA ; #F54E
    BCS L7_F557 ; #F54F
    EOR #$FF ; #F551
    ADC #$01 ; #F553
    INY ; #F555
    INY ; #F556
L7_F557:
    STA <$03 ; #F557
    CMP <$02 ; #F559
    BCS L7_F566 ; #F55B
    PHA ; #F55D
    LDA <$02 ; #F55E
    STA <$03 ; #F560
    PLA ; #F562
    STA <$02 ; #F563
    INY ; #F565
L7_F566:
    LDA #$00 ; #F566
    STA <$04 ; #F568
    LDA <$03 ; #F56A
    LSR A ; #F56C
    LSR A ; #F56D
    CMP <$02 ; #F56E
    BCS L7_F57B ; #F570
    INC <$04 ; #F572
    ASL A ; #F574
    CMP <$02 ; #F575
    BCS L7_F57B ; #F577
    INC <$04 ; #F579
L7_F57B:
    TYA ; #F57B
    ASL A ; #F57C
    ASL A ; #F57D
    CLC ; #F57E
    ADC <$04 ; #F57F
    TAY ; #F581
    LDA L7_F586, Y ; #F582
    RTS ; #F585

L7_F586:
    .db $04 ; #F586
    .db $05 ; #F587
    .db $06 ; #F588
    .db $04 ; #F589
    .db $08 ; #F58A
    .db $07 ; #F58B
    .db $06 ; #F58C
    .db $04 ; #F58D
    .db $0C ; #F58E
    .db $0B ; #F58F
    .db $0A ; #F590
    .db $04 ; #F591
    .db $08 ; #F592
    .db $09 ; #F593
    .db $0A ; #F594
    .db $04 ; #F595
    .db $04 ; #F596
    .db $03 ; #F597
    .db $02 ; #F598
    .db $04 ; #F599
    .db $00 ; #F59A
    .db $01 ; #F59B
    .db $02 ; #F59C
    .db $04 ; #F59D
    .db $0C ; #F59E
    .db $0D ; #F59F
    .db $0E ; #F5A0
    .db $04 ; #F5A1
    .db $00 ; #F5A2
    .db $0F ; #F5A3
    .db $0E ; #F5A4
    .db $04 ; #F5A5


L7_F5A6:
    TXA ; #F5A6
    EOR #$01 ; #F5A7
    TAY ; #F5A9
    LDA $04D0, Y ; #F5AA
    BPL L7_F620 ; #F5AD
    LDA $0400, X ; #F5AF
    BPL L7_F620 ; #F5B2
    LDA $0400, Y ; #F5B4
    BPL L7_F620 ; #F5B7
    JSR L7_F696 ; #F5B9
    CMP #$11 ; #F5BC
    BCS L7_F620 ; #F5BE
    STA <$10 ; #F5C0
    LDA #$11 ; #F5C2
    SBC <$10 ; #F5C4
    STA <$10 ; #F5C6
    JSR L7_F6DC ; #F5C8
    PHA ; #F5CB
    LDA $0420, Y ; #F5CC
    BEQ L7_F5DD ; #F5CF
    CMP $0348, Y ; #F5D1
    BEQ L7_F5DD ; #F5D4
    PLA ; #F5D6
    CMP #$18 ; #F5D7
    BCS L7_F620 ; #F5D9
    BCC L7_F5E2 ; #F5DB
L7_F5DD:
    PLA ; #F5DD
    CMP #$10 ; #F5DE
    BCS L7_F620 ; #F5E0
L7_F5E2:
    LDA <$52, X ; #F5E2
    ORA $0058, Y ; #F5E4
    STA $0058, Y ; #F5E7
    BMI L7_F628 ; #F5EA
    LDA <JoypadTapped, X ; #F5EC
    AND #BUTTON_B ; #F5EE
    BEQ L7_F61E ; #F5F0
    LDA $0054, Y ; #F5F2
    CMP #$03 ; #F5F5
    BCS L7_F61E ; #F5F7
    LDA <$54, X ; #F5F9
    CMP #$03 ; #F5FB
    BCS L7_F61E ; #F5FD
    LDA $0056, Y ; #F5FF
    ORA <$56, X ; #F602
    BNE L7_F61E ; #F604
    TYA ; #F606
    ORA #$80 ; #F607
    STA <$56, X ; #F609
    LDA #$06 ; #F60B
    STA $0054, Y ; #F60D
    LDA $0358, Y ; #F610
    STA $0420, Y ; #F613
    LDA #$00 ; #F616
    STA $0430, Y ; #F618
    STA $0410, Y ; #F61B
L7_F61E:
    SEC ; #F61E
    RTS ; #F61F
L7_F620:
    LDA $0058, Y ; #F620
    AND #$80 ; #F623
    STA $0058, Y ; #F625
L7_F628:
    CLC ; #F628
    JMP L7_F721 ; #F629
    RTS ; #F62C
L7_F62D:
    TXA ; #F62D
    EOR #$01 ; #F62E
    TAY ; #F630
    LDA $04D0, Y ; #F631
    BPL L7_F68C ; #F634
    LDA $0400, X ; #F636
    BPL L7_F68C ; #F639
    LDA $0400, Y ; #F63B
    BPL L7_F68C ; #F63E
    LDA $0054, Y ; #F640
    CMP #$06 ; #F643
    BCS L7_F68C ; #F645
    LDA <$54, X ; #F647
    CMP #$06 ; #F649
    BEQ L7_F68C ; #F64B
    JSR L7_F696 ; #F64D
    CMP #$10 ; #F650
    BCS L7_F68C ; #F652
    JSR L7_F6DC ; #F654
    BCS L7_F68C ; #F657
    CMP #$19 ; #F659
    BCS L7_F68C ; #F65B
    STA <$11 ; #F65D
    LDA $0420, Y ; #F65F
    BEQ L7_F672 ; #F662
    CMP $0348, Y ; #F664
    BEQ L7_F672 ; #F667
L7_F669:
    LDA #$19 ; #F669
    SBC <$11 ; #F66B
    STA <$11 ; #F66D
    JMP L7_F67E ; #F66F
L7_F672:
    LDA <$11 ; #F672
    CMP #$11 ; #F674
    BCS L7_F68C ; #F676
    LDA #$11 ; #F678
    SBC <$11 ; #F67A
    STA <$11 ; #F67C
L7_F67E:
    LDA $0052, Y ; #F67E
    ORA #$80 ; #F681
    STA <$58, X ; #F683
    RTS ; #F685
    CMP #$10 ; #F686
    STA <$11 ; #F688
    BCC L7_F669 ; #F68A
L7_F68C:
    LDA <$58, X ; #F68C
    AND #$7F ; #F68E
    STA <$58, X ; #F690
    CLC ; #F692
    JMP L7_F782 ; #F693
L7_F696:
    LDA $0400, X ; #F696
    AND #$10 ; #F699
    BEQ L7_F6C3 ; #F69B
    LDA $04F0, X ; #F69D
    SEC ; #F6A0
    SBC $04F0, Y ; #F6A1
    STA <$00 ; #F6A4
    LDA $0500, X ; #F6A6
    SBC $0500, Y ; #F6A9
    STA <$01 ; #F6AC
    BCS L7_F6C0 ; #F6AE
    LDA <$00 ; #F6B0
    EOR #$FF ; #F6B2
    ADC #$01 ; #F6B4
    STA <$00 ; #F6B6
    LDA <$01 ; #F6B8
    EOR #$FF ; #F6BA
    ADC #$00 ; #F6BC
    STA <$01 ; #F6BE
L7_F6C0:
    LDA <$00 ; #F6C0
    RTS ; #F6C2
L7_F6C3:
    LDA $04F0, Y ; #F6C3
    SEC ; #F6C6
    SBC <ScrollX ; #F6C7
    STA <$00 ; #F6C9
    SEC ; #F6CB
    SBC $04F0, X ; #F6CC
    BCS L7_F6D5 ; #F6CF
    EOR #$FF ; #F6D1
    ADC #$01 ; #F6D3
L7_F6D5:
    STA <$00 ; #F6D5
    LDA #$00 ; #F6D7
    STA <$01 ; #F6D9
    RTS ; #F6DB
L7_F6DC:
    LDA $0510, Y ; #F6DC
    STA <$00 ; #F6DF
    LDA $0520, Y ; #F6E1
    STA <$01 ; #F6E4
    CMP $0520, X ; #F6E6
    BEQ L7_F708 ; #F6E9
    BCC L7_F6FC ; #F6EB
    LDA <$00 ; #F6ED
    SBC #$10 ; #F6EF
    STA <$00 ; #F6F1
    LDA <$01 ; #F6F3
    SBC #$00 ; #F6F5
    STA <$01 ; #F6F7
    JMP L7_F708 ; #F6F9
L7_F6FC:
    LDA <$00 ; #F6FC
    ADC #$10 ; #F6FE
    STA <$00 ; #F700
    LDA <$01 ; #F702
    ADC #$00 ; #F704
    STA <$01 ; #F706
L7_F708:
    LDA $0510, X ; #F708
    SEC ; #F70B
    SBC <$00 ; #F70C
    STA <$00 ; #F70E
    LDA $0520, X ; #F710
    SBC <$01 ; #F713
    PHP ; #F715
    LDA <$00 ; #F716
    BPL L7_F71F ; #F718
    EOR #$FF ; #F71A
    CLC ; #F71C
    ADC #$01 ; #F71D
L7_F71F:
    PLP ; #F71F
    RTS ; #F720
L7_F721:
    LDY #$02 ; #F721
L7_F723:
    LDA $04D0, Y ; #F723
    BPL L7_F745 ; #F726
    LDA $0400, Y ; #F728
    BPL L7_F745 ; #F72B
    LDA $0570, Y ; #F72D
    BPL L7_F745 ; #F730
    LDA $04E0, Y ; #F732
    CMP #$31 ; #F735
    BEQ L7_F745 ; #F737
    STY <$12 ; #F739
    JSR L7_F74C ; #F73B
    LDY <$12 ; #F73E
    BCC L7_F745 ; #F740
    JMP L7_F7FE ; #F742
L7_F745:
    INY ; #F745
    CPY #$10 ; #F746
    BNE L7_F723 ; #F748
    CLC ; #F74A
    RTS ; #F74B
L7_F74C:
    LDA $0570, Y ; #F74C
    AND #$3F ; #F74F
    STA <$02 ; #F751
    JSR L7_F696 ; #F753
    LDA <$01 ; #F756
    BNE L7_F780 ; #F758
    LDA <$00 ; #F75A
    LDY <$02 ; #F75C
    CMP L7_FA18, Y ; #F75E
    BEQ L7_F765 ; #F761
    BCS L7_F780 ; #F763
L7_F765:
    STA <$03 ; #F765
    LDY <$12 ; #F767
    JSR L7_F6DC ; #F769
    STA <$04 ; #F76C
    LDY <$02 ; #F76E
    CMP L7_F9FC, Y ; #F770
    BCS L7_F780 ; #F773
    LDY <$02 ; #F775
    LDA L7_FA18, Y ; #F777
    SEC ; #F77A
    SBC <$03 ; #F77B
    STA <$10 ; #F77D
    RTS ; #F77F
L7_F780:
    CLC ; #F780
    RTS ; #F781
L7_F782:
    LDY #$02 ; #F782
L7_F784:
    LDA $04D0, Y ; #F784
    BPL L7_F7C1 ; #F787
    LDA $0400, Y ; #F789
    BPL L7_F7C1 ; #F78C
    LDA $0570, Y ; #F78E
    BPL L7_F7C1 ; #F791
    LDA $04E0, Y ; #F793
    CMP #$31 ; #F796
    BNE L7_F7AE ; #F798
    LDA $0560, X ; #F79A
    BPL L7_F7C1 ; #F79D
    LDA $0510, Y ; #F79F
    SEC ; #F7A2
    SBC $0510, X ; #F7A3
    LDA $0520, Y ; #F7A6
    SBC $0520, X ; #F7A9
    BCC L7_F7C1 ; #F7AC
L7_F7AE:
    STY <$12 ; #F7AE
    JSR L7_F7C8 ; #F7B0
    LDY <$12 ; #F7B3
    BCC L7_F7C1 ; #F7B5
    LDA $04E0, Y ; #F7B7
    CMP #$10 ; #F7BA
    BEQ L7_F7C7 ; #F7BC
    JMP L7_F7FE ; #F7BE
L7_F7C1:
    INY ; #F7C1
    CPY #$10 ; #F7C2
    BNE L7_F784 ; #F7C4
    CLC ; #F7C6
L7_F7C7:
    RTS ; #F7C7
L7_F7C8:
    LDA $0570, Y ; #F7C8
    AND #$3F ; #F7CB
    STA <$02 ; #F7CD
    JSR L7_F696 ; #F7CF
    LDA <$01 ; #F7D2
    BNE L7_F7FC ; #F7D4
    LDA <$00 ; #F7D6
    LDY <$02 ; #F7D8
    CMP L7_FA18, Y ; #F7DA
    BCS L7_F7FC ; #F7DD
    LDY <$12 ; #F7DF
    JSR L7_F6DC ; #F7E1
    STA <$04 ; #F7E4
    LDY <$02 ; #F7E6
    CMP L7_F9FC, Y ; #F7E8
    BEQ L7_F7EF ; #F7EB
    BCS L7_F7FC ; #F7ED
L7_F7EF:
    STA <$03 ; #F7EF
    LDY <$02 ; #F7F1
    LDA L7_F9FC, Y ; #F7F3
    SEC ; #F7F6
    SBC <$03 ; #F7F7
    STA <$11 ; #F7F9
    RTS ; #F7FB
L7_F7FC:
    CLC ; #F7FC
    RTS ; #F7FD
L7_F7FE:
    LDA $04E0, Y ; #F7FE
    CMP #$10 ; #F801
    BEQ L7_F858 ; #F803
    CMP #$01 ; #F805
    BNE L7_F856 ; #F807
    LDA $0580, Y ; #F809
    AND #$03 ; #F80C
    BEQ L7_F82C ; #F80E
    CMP #$03 ; #F810
    BEQ L7_F81C ; #F812
    LDA $0400, X ; #F814
    CMP $0400, Y ; #F817
    BEQ L7_F82C ; #F81A
L7_F81C:
    LDA <$54, X ; #F81C
    CMP #$03 ; #F81E
    BCS L7_F856 ; #F820
    LDA <$56, X ; #F822
    BNE L7_F856 ; #F824
    LDA <JoypadPressed, X ; #F826
    AND #BUTTON_B ; #F828
    BNE L7_F868 ; #F82A
L7_F82C:
    LDA $0420, Y ; #F82C
    CMP #$22 ; #F82F
    BNE L7_F850 ; #F831
    LDA #$A8 ; #F833
    STA $0530, Y ; #F835
    STA $0550, Y ; #F838
    LDA #$05 ; #F83B
    STA $0540, Y ; #F83D
    STA $0560, Y ; #F840
    LDA #$1C ; #F843
    STA $04E0, Y ; #F845
    LDA #$00 ; #F848
    STA $0570, Y ; #F84A
    STA $0480, Y ; #F84D
L7_F850:
    LDA #$07 ; #F850
    STA <$54, X ; #F852
    CLC ; #F854
    RTS ; #F855
L7_F856:
    SEC ; #F856
    RTS ; #F857
L7_F858:
    LDA <$54, X ; #F858
    CMP #$03 ; #F85A
    BCS L7_F856 ; #F85C
    LDA <$56, X ; #F85E
    BNE L7_F856 ; #F860
    LDA <JoypadTapped, X ; #F862
    AND #BUTTON_B ; #F864
    BEQ L7_F856 ; #F866
L7_F868:
    TYA ; #F868
    ORA #$80 ; #F869
    STA <$56, X ; #F86B
    LDA $0570, Y ; #F86D
    AND #$3F ; #F870
    STA $0570, Y ; #F872
    LDA #$80 ; #F875
    STA $04D0, Y ; #F877
    LDA #$AB ; #F87A
    STA $0550, Y ; #F87C
    LDA #$FF ; #F87F
    STA $0560, Y ; #F881
    LDA $0420, Y ; #F884
    CMP #$22 ; #F887
    BEQ L7_F8A8 ; #F889
    CMP #$24 ; #F88B
    BEQ L7_F8A8 ; #F88D
    CMP #$26 ; #F88F
    BEQ L7_F8C4 ; #F891
    CMP #$27 ; #F893
    BCC L7_F8A1 ; #F895
    LDA #$B4 ; #F897
    STA $0480, Y ; #F899
    LDA #$00 ; #F89C
    STA $0490, Y ; #F89E
L7_F8A1:
    LDA #$00 ; #F8A1
    STA $04E0, Y ; #F8A3
    SEC ; #F8A6
    RTS ; #F8A7
L7_F8A8:
    LDA #$00 ; #F8A8
    STA $0480, Y ; #F8AA
    STA $04A0, Y ; #F8AD
    LDA $04E0, Y ; #F8B0
    CMP #$01 ; #F8B3
    BNE L7_F8A1 ; #F8B5
    LDA $0580, Y ; #F8B7
    STA $0490, Y ; #F8BA
    LDA #$3C ; #F8BD
    STA $04A0, Y ; #F8BF
    BNE L7_F8A1 ; #F8C2
L7_F8C4:
    STY <$00 ; #F8C4
    LDY #$0F ; #F8C6
L7_F8C8:
    LDA $04D0, Y ; #F8C8
    BPL L7_F8D4 ; #F8CB
    DEY ; #F8CD
    CPY #$05 ; #F8CE
    BNE L7_F8C8 ; #F8D0
    BEQ L7_F926 ; #F8D2
L7_F8D4:
    LDA #$80 ; #F8D4
    STA $04D0, Y ; #F8D6
    LDA #$90 ; #F8D9
    STA $0400, Y ; #F8DB
    LDA #$82 ; #F8DE
    STA $0420, Y ; #F8E0
    LDA #$64 ; #F8E3
    STA $04E0, Y ; #F8E5
    LDA #$00 ; #F8E8
    STA $0430, Y ; #F8EA
    STA $0410, Y ; #F8ED
    STA $0570, Y ; #F8F0
    STA $0550, Y ; #F8F3
    LDA #$01 ; #F8F6
    STA $0560, Y ; #F8F8
    LDA $04F0, X ; #F8FB
    STA $04F0, Y ; #F8FE
    LDA $0500, X ; #F901
    STA $0500, Y ; #F904
    LDA $0510, X ; #F907
    SEC ; #F90A
    SBC #$05 ; #F90B
    BCS L7_F912 ; #F90D
    SBC #$0F ; #F90F
    CLC ; #F911
L7_F912:
    STA $0510, Y ; #F912
    LDA $0520, X ; #F915
    SBC #$00 ; #F918
    STA $0520, Y ; #F91A
    TXA ; #F91D
    STA $0490, Y ; #F91E
    LDA #$08 ; #F921
    STA $0480, Y ; #F923
L7_F926:
    LDY <$00 ; #F926
    JMP L7_F8A1 ; #F928
    LDY #$00 ; #F92B
    LDA $04D0, Y ; #F92D
    BPL L7_F943 ; #F930
    LDA $0400, Y ; #F932
    BPL L7_F943 ; #F935
    LDA $0054, Y ; #F937
    CMP #$03 ; #F93A
    BCS L7_F943 ; #F93C
    JSR L7_F949 ; #F93E
    BCC L7_F974 ; #F941
L7_F943:
    INY ; #F943
    LDA $04D0, Y ; #F944
    BPL L7_F973 ; #F947
L7_F949:
    STY <$10 ; #F949
    LDA $0400, X ; #F94B
    BPL L7_F973 ; #F94E
    LDA $0570, X ; #F950
    AND #$3F ; #F953
    STA <$02 ; #F955
    JSR L7_F696 ; #F957
    LDA <$01 ; #F95A
    BNE L7_F973 ; #F95C
    LDA <$00 ; #F95E
    LDY <$02 ; #F960
    CMP L7_FA18, Y ; #F962
    BCS L7_F973 ; #F965
    LDY <$10 ; #F967
    JSR L7_F6DC ; #F969
    LDY <$02 ; #F96C
    CMP L7_F9FC, Y ; #F96E
    BCC L7_F974 ; #F971
L7_F973:
    SEC ; #F973
L7_F974:
    LDY <$10 ; #F974
    RTS ; #F976
    STX <$05 ; #F977
    LDY #$02 ; #F979
L7_F97B:
    LDA $04D0, Y ; #F97B
    BPL L7_F9E8 ; #F97E
    LDA $0400, Y ; #F980
    BPL L7_F9E8 ; #F983
    LDA $04E0, Y ; #F985
    CMP #$01 ; #F988
    BEQ L7_F9AC ; #F98A
    CMP #$60 ; #F98C
    BEQ L7_F9A0 ; #F98E
    CMP #$3A ; #F990
    BNE L7_F9E8 ; #F992
    STY <$10 ; #F994
    LDA #$FC ; #F996
    STA <$03 ; #F998
    LDA #$08 ; #F99A
    STA <$04 ; #F99C
    BEQ L7_F9BC ; #F99E
L7_F9A0:
    STY <$10 ; #F9A0
    LDA #$04 ; #F9A2
    STA <$03 ; #F9A4
    LDA #$00 ; #F9A6
    STA <$04 ; #F9A8
    BEQ L7_F9BC ; #F9AA
L7_F9AC:
    STY <$10 ; #F9AC
    LDA $0420, Y ; #F9AE
    TAY ; #F9B1
    LDA L7_F9D0, Y ; #F9B2
    STA <$03 ; #F9B5
    LDA (L7_F9D4 + 1), Y ; #F9B7
    STA <$04 ; #F9BA
L7_F9BC:
    LDA $0570, X ; #F9BC
    AND #$3F ; #F9BF
    TAY ; #F9C1
    LDA L7_F9FC, Y ; #F9C2
    SEC ; #F9C5
    SBC <$03 ; #F9C6
    STA <$03 ; #F9C8
    LDA L7_FA18, Y ; #F9CA
    CLC ; #F9CD
    ADC <$04 ; #F9CE
L7_F9D0:                                ; what the fuck
    STA <$04 ; #F9D0
    LDY <$10 ; #F9D2
L7_F9D4:
    JSR L7_F696 ; #F9D4
    LDA <$01 ; #F9D7
    BNE L7_F9E8 ; #F9D9
    LDA <$00 ; #F9DB
    CMP <$04 ; #F9DD
    BCS L7_F9E8 ; #F9DF
    JSR L7_F6DC ; #F9E1
    CMP <$03 ; #F9E4
    BCC L7_F9F1 ; #F9E6
L7_F9E8:
    INY ; #F9E8
    CPY <$05 ; #F9E9
    BEQ L7_F9E8 ; #F9EB
    CPY #$10 ; #F9ED
    BNE L7_F97B ; #F9EF
L7_F9F1:
    RTS ; #F9F1

    .db $04 ; #F9F2
    .db $04 ; #F9F3
    .db $04 ; #F9F4
    .db $04 ; #F9F5
    .db $00 ; #F9F6
    .db $00 ; #F9F7
    .db $00 ; #F9F8
    .db $00 ; #F9F9
    .db $00 ; #F9FA
    .db $04 ; #F9FB

L7_F9FC:
    .db $14 ; #F9FC
    .db $18 ; #F9FD
    .db $18 ; #F9FE
    .db $18 ; #F9FF
    .db $1C ; #FA00
    .db $14 ; #FA01
    .db $20 ; #FA02
    .db $1C ; #FA03
    .db $20 ; #FA04
    .db $18 ; #FA05
    .db $1C ; #FA06
    .db $1C ; #FA07
    .db $28 ; #FA08
    .db $1C ; #FA09
    .db $18 ; #FA0A
    .db $14 ; #FA0B
    .db $14 ; #FA0C
    .db $14 ; #FA0D
    .db $15 ; #FA0E
    .db $11 ; #FA0F
    .db $10 ; #FA10
    .db $11 ; #FA11
    .db $10 ; #FA12
    .db $1C ; #FA13
    .db $2C ; #FA14
    .db $1C ; #FA15
    .db $0C ; #FA16
    .db $0C ; #FA17

L7_FA18:
    .db $10 ; #FA18
    .db $14 ; #FA19
    .db $10 ; #FA1A
    .db $14 ; #FA1B
    .db $1C ; #FA1C
    .db $14 ; #FA1D
    .db $18 ; #FA1E
    .db $14 ; #FA1F
    .db $14 ; #FA20
    .db $18 ; #FA21
    .db $28 ; #FA22
    .db $10 ; #FA23
    .db $20 ; #FA24
    .db $18 ; #FA25
    .db $1C ; #FA26
    .db $20 ; #FA27
    .db $18 ; #FA28
    .db $10 ; #FA29
    .db $18 ; #FA2A
    .db $18 ; #FA2B
    .db $24 ; #FA2C
    .db $24 ; #FA2D
    .db $0C ; #FA2E
    .db $48 ; #FA2F
    .db $48 ; #FA30
    .db $0C ; #FA31
    .db $0C ; #FA32
    .db $08 ; #FA33

; This routine is called from bank 6. Maybe other banks as well, not all of them are disassembled yet.
L7_FA34:
    ASL A ; #FA34
    ASL A ; #FA35
    STA <$11 ; #FA36
    STX <$10 ; #FA38
    LDA $04F0, X ; #FA3A
    LSR A ; #FA3D
    LSR A ; #FA3E
    LSR A ; #FA3F
    AND #$1C ; #FA40
    STA $03B9 ; #FA42
    LSR A ; #FA45
    LSR A ; #FA46
    STA <$04 ; #FA47
    LDA $0510, X ; #FA49
    LSR A ; #FA4C
    LSR A ; #FA4D
    PHA ; #FA4E
    AND #$38 ; #FA4F
    ORA <$04 ; #FA51
    STA <$04 ; #FA53
    PLA ; #FA55
    LSR A ; #FA56
    LSR A ; #FA57
    LSR A ; #FA58
    TAY ; #FA59
    LDA L7_E05B, Y ; #FA5A
    ORA $03B9 ; #FA5D
    STA $03B9 ; #FA60
    LDA $0500, X ; #FA63
    AND #$01 ; #FA66
    ASL A ; #FA68
    ASL A ; #FA69
    PHA ; #FA6A
    ORA L7_E063, Y ; #FA6B
    STA $03B8 ; #FA6E
    STA $03BF ; #FA71
    STA $03C6 ; #FA74
    STA $03CD ; #FA77
    ORA #$03 ; #FA7A
    STA $03D4 ; #FA7C
    PLA ; #FA7F
    ASL A ; #FA80
    ASL A ; #FA81
    ASL A ; #FA82
    ASL A ; #FA83
    ORA <$04 ; #FA84
    STA <$04 ; #FA86
    ORA #$C0 ; #FA88
    STA $03D5 ; #FA8A
    LDA #$03 ; #FA8D
    STA $03BA ; #FA8F
    STA $03C1 ; #FA92
    STA $03C8 ; #FA95
    STA $03CF ; #FA98
    LDA #$00 ; #FA9B
    STA $03D6 ; #FA9D
    CLC ; #FAA0
    LDA $03B9 ; #FAA1
    ADC #$20 ; #FAA4
    STA $03C0 ; #FAA6
    ADC #$20 ; #FAA9
    STA $03C7 ; #FAAB
    ADC #$20 ; #FAAE
    STA $03CE ; #FAB0
    LDA <$36 ; #FAB3
    JSR SetFirstPrgBank ; #FAB5
    LDY #$03 ; #FAB8
    STY <$05 ; #FABA
L7_FABC:
    LDX L7_FB01, Y ; #FABC
    TYA ; #FABF
    CLC ; #FAC0
    ADC <$11 ; #FAC1
    TAY ; #FAC3
    LDA L7_FB05, Y ; #FAC4
    TAY ; #FAC7
    LDA $BAE0, Y ; #FAC8
    STA $03B8, X ; #FACB
    LDA $BBE0, Y ; #FACE
    STA $03B9, X ; #FAD1
    LDA $BCE0, Y ; #FAD4
    STA $03BF, X ; #FAD7
    LDA $BDE0, Y ; #FADA
    STA $03C0, X ; #FADD
    ASL $03D7 ; #FAE0
    ASL $03D7 ; #FAE3
    LDA $BEE0, Y ; #FAE6
    AND #$03 ; #FAE9
    ORA $03D7 ; #FAEB
    STA $03D7 ; #FAEE
    DEC <$05 ; #FAF1
    LDY <$05 ; #FAF3
    BPL L7_FABC ; #FAF5
    STY $03D8 ; #FAF7
    LDX <$10 ; #FAFA
    LDA #BANK_6 ; #FAFC
    JMP SetFirstPrgBank ; #FAFE

L7_FB01:
    .db $03 ; #FB01
    .db $05 ; #FB02
    .db $11 ; #FB03
    .db $13 ; #FB04

L7_FB05:
    .db $98 ; #FB05
    .db $99 ; #FB06
    .db $96 ; #FB07
    .db $97 ; #FB08
    .db $52 ; #FB09
    .db $53 ; #FB0A
    .db $54 ; #FB0B
    .db $55 ; #FB0C
    .db $76 ; #FB0D
    .db $76 ; #FB0E
    .db $76 ; #FB0F
    .db $76 ; #FB10
    .db $DB ; #FB11
    .db $DC ; #FB12
    .db $DD ; #FB13
    .db $DE ; #FB14
    .db $C8 ; #FB15
    .db $C9 ; #FB16
    .db $CA ; #FB17
    .db $CB ; #FB18


; I guess this is a dead code that has been used while development to record demos.
RecordDemoInputs:                       ; FB19
    LDA <(DemoJoy1Tap + 1)
    BNE RecordDemoInputsJ1Tap           ; Skip default initialization to WRAM addresses.
    LDA #$00
    STA <(DemoJoyBase + 0)
    LDA #$60
    STA <(DemoJoyBase + 1)
    LDA #$00
    STA <(DemoJoyBase + 2)
    LDA #$62
    STA <(DemoJoyBase + 3)
    LDA #$00
    STA <(DemoJoyBase + 4)
    LDA #$64
    STA <(DemoJoyBase + 5)
    LDA #$00
    STA <(DemoJoyBase + 6)
    LDA #$66
    STA <(DemoJoyBase + 7)              ; 00 60 00 62 00 64 00 66. WRAM addresses.
RecordDemoInputsJ1Tap:
    LDY #$00 ; #FB3D
    STY <$E4 ; #FB3F
    STY <$E5 ; #FB41
    STY <$E6 ; #FB43
    STY <$E7 ; #FB45

    LDA <Joypad1Tapped
    CMP [DemoJoy1Tap], Y
    BNE IncJ1TapAddr                    ; Branch if input doesn't match.
    INY
    LDA [DemoJoy1Tap], Y
    CMP #$FF
    BEQ IncJ1TapAddr                    ; Branch if second byte is $FF.
    LDA [DemoJoy1Tap], Y
    CLC
    ADC #$01
    STA [DemoJoy1Tap], Y                ; ++[DemoJoy1Tap][Y]
    BNE RecordDemoInputsJ2Tap           ; It wasn't $FF, so result is not $00. Jump is unconditional.
IncJ1TapAddr:
    LDY #$00
    LDA <DemoJoy1Tap
    CLC
    ADC #$02
    STA <DemoJoy1Tap                    ; Increment LSB of indirect address by 2.
    LDA <(DemoJoy1Tap + 1)
    ADC #$00
    STA <(DemoJoy1Tap + 1)              ; Increment MSB by carry flag.
    LDA <Joypad1Tapped
    STA [DemoJoy1Tap], Y                ; Store joy 1 input into new address.
    LDA <DemoJoy1Tap
    CMP #$FE
    BNE RecordDemoInputsJ2Tap
    LDA <(DemoJoy1Tap + 1)
    CMP #$61
    BNE RecordDemoInputsJ2Tap
    LDA #$FF                            ; Address is $6200 - 2.
    STA [DemoJoy1Tap], Y                ; [DemoJoy1Tap][1] = $FF
    JMP RecordDemoInputsBufferOverflow

RecordDemoInputsJ2Tap:
    LDY #$00
    LDA <Joypad2Tapped
    CMP [DemoJoy2Tap], Y
    BNE IncJ2TapAddr
    INY
    LDA [DemoJoy2Tap], Y
    CMP #$FF
    BEQ IncJ2TapAddr
    LDA [DemoJoy2Tap], Y
    CLC
    ADC #$01
    STA [DemoJoy2Tap], Y
    BNE RecordDemoInputsJ1Prs
IncJ2TapAddr:
    LDY #$00
    LDA <DemoJoy2Tap
    CLC
    ADC #$02
    STA <DemoJoy2Tap
    LDA <(DemoJoy2Tap + 1)
    ADC #$00
    STA <(DemoJoy2Tap + 1)
    LDA <Joypad2Tapped
    STA [DemoJoy2Tap], Y
    LDA <DemoJoy2Tap
    CMP #$FE
    BNE RecordDemoInputsJ1Prs
    LDA <(DemoJoy2Tap + 1)
    CMP #$63
    BNE RecordDemoInputsJ1Prs
    LDA #$FF
    STA [DemoJoy2Tap], Y
    JMP RecordDemoInputsBufferOverflow

RecordDemoInputsJ1Prs:
    LDY #$00
    LDA <Joypad1Pressed
    CMP [DemoJoy1Prs], Y
    BNE IncJ1PrsAddr
    INY
    LDA [DemoJoy1Prs], Y
    CMP #$FF
    BEQ IncJ1PrsAddr
    LDA [DemoJoy1Prs], Y
    CLC
    ADC #$01
    STA [DemoJoy1Prs], Y
    BNE RecordDemoInputsJ2Prs
IncJ1PrsAddr:
    LDY #$00
    LDA <DemoJoy1Prs
    CLC
    ADC #$02
    STA <DemoJoy1Prs
    LDA <(DemoJoy1Prs + 1)
    ADC #$00
    STA <(DemoJoy1Prs + 1)
    LDA <Joypad1Pressed
    STA [DemoJoy1Prs], Y
    LDA <DemoJoy1Prs
    CMP #$FE
    BNE RecordDemoInputsJ2Prs
    LDA <(DemoJoy1Prs + 1)
    CMP #$65
    BNE RecordDemoInputsJ2Prs
    LDA #$FF
    STA [DemoJoy1Prs], Y
    JMP RecordDemoInputsBufferOverflow

RecordDemoInputsJ2Prs:
    LDY #$00
    LDA <Joypad2Pressed
    CMP [DemoJoy2Prs], Y
    BNE IncJ2PrsAddr
    INY
    LDA [DemoJoy2Prs], Y
    CMP #$FF
    BEQ IncJ2PrsAddr
    LDA [DemoJoy2Prs], Y
    CLC
    ADC #$01
    STA [DemoJoy2Prs], Y
    BNE ReturnFromRecordDemoInputs
IncJ2PrsAddr:
    LDY #$00
    LDA <DemoJoy2Prs
    CLC
    ADC #$02
    STA <DemoJoy2Prs
    LDA <(DemoJoy2Prs + 1)
    ADC #$00
    STA <(DemoJoy2Prs + 1)
    LDA <Joypad2Pressed
    STA [DemoJoy2Prs], Y
    LDA <DemoJoy2Prs
    CMP #$FE
    BNE ReturnFromRecordDemoInputs
    LDA <(DemoJoy2Prs + 1)
    CMP #$67
    BNE ReturnFromRecordDemoInputs
    LDA #$FF
    STA [DemoJoy2Prs], Y
    JMP RecordDemoInputsBufferOverflow

ReturnFromRecordDemoInputs:
    RTS
RecordDemoInputsBufferOverflow:
    LDA #$08
    JSR EnqueueSfx
InfiniteLoop:
    JSR WaitNmiAndReadInputs
    JMP InfiniteLoop


    .db $48 ; #FC49
    .db $21 ; #FC4A
    .db $40 ; #FC4B
    .db $92 ; #FC4C
    .db $81 ; #FC4D
    .db $A9 ; #FC4E
    .db $00 ; #FC4F
    .db $85 ; #FC50
    .db $B1 ; #FC51
    .db $12 ; #FC52
    .db $9D ; #FC53
    .db $44 ; #FC54
    .db $88 ; #FC55
    .db $00 ; #FC56
    .db $00 ; #FC57
    .db $48 ; #FC58
    .db $82 ; #FC59
    .db $05 ; #FC5A
    .db $83 ; #FC5B
    .db $00 ; #FC5C
    .db $3B ; #FC5D
    .db $63 ; #FC5E
    .db $10 ; #FC5F
    .db $CC ; #FC60
    .db $85 ; #FC61
    .db $E4 ; #FC62
    .db $FB ; #FC63
    .db $7B ; #FC64
    .db $DC ; #FC65
    .db $8D ; #FC66
    .db $D7 ; #FC67
    .db $EC ; #FC68
    .db $CE ; #FC69
    .db $33 ; #FC6A
    .db $7D ; #FC6B
    .db $E8 ; #FC6C
    .db $BB ; #FC6D
    .db $86 ; #FC6E
    .db $8F ; #FC6F
    .db $5F ; #FC70
    .db $79 ; #FC71
    .db $3B ; #FC72
    .db $3B ; #FC73
    .db $EA ; #FC74
    .db $C1 ; #FC75
    .db $EF ; #FC76
    .db $97 ; #FC77
    .db $B7 ; #FC78
    .db $E4 ; #FC79
    .db $AE ; #FC7A
    .db $DB ; #FC7B
    .db $EF ; #FC7C
    .db $2F ; #FC7D
    .db $FF ; #FC7E
    .db $B2 ; #FC7F
    .db $E2 ; #FC80
    .db $5E ; #FC81
    .db $BB ; #FC82
    .db $16 ; #FC83
    .db $50 ; #FC84
    .db $42 ; #FC85
    .db $1F ; #FC86
    .db $2B ; #FC87
    .db $00 ; #FC88
    .db $40 ; #FC89
    .db $CB ; #FC8A
    .db $01 ; #FC8B
    .db $E8 ; #FC8C
    .db $CB ; #FC8D
    .db $23 ; #FC8E
    .db $8D ; #FC8F
    .db $48 ; #FC90
    .db $60 ; #FC91
    .db $C3 ; #FC92
    .db $34 ; #FC93
    .db $10 ; #FC94
    .db $00 ; #FC95
    .db $03 ; #FC96
    .db $88 ; #FC97
    .db $1D ; #FC98
    .db $A1 ; #FC99
    .db $05 ; #FC9A
    .db $A1 ; #FC9B
    .db $93 ; #FC9C
    .db $84 ; #FC9D
    .db $79 ; #FC9E
    .db $00 ; #FC9F
    .db $0B ; #FCA0
    .db $6F ; #FCA1
    .db $F0 ; #FCA2
    .db $30 ; #FCA3
    .db $B8 ; #FCA4
    .db $33 ; #FCA5
    .db $BB ; #FCA6
    .db $3D ; #FCA7
    .db $B7 ; #FCA8
    .db $6C ; #FCA9
    .db $FF ; #FCAA
    .db $FF ; #FCAB
    .db $22 ; #FCAC
    .db $CE ; #FCAD
    .db $DE ; #FCAE
    .db $AC ; #FCAF
    .db $AB ; #FCB0
    .db $E4 ; #FCB1
    .db $BB ; #FCB2
    .db $9D ; #FCB3
    .db $D7 ; #FCB4
    .db $EF ; #FCB5
    .db $97 ; #FCB6
    .db $B4 ; #FCB7
    .db $36 ; #FCB8
    .db $E6 ; #FCB9
    .db $7F ; #FCBA
    .db $D9 ; #FCBB
    .db $EF ; #FCBC
    .db $F8 ; #FCBD
    .db $EA ; #FCBE
    .db $BF ; #FCBF
    .db $71 ; #FCC0
    .db $82 ; #FCC1
    .db $37 ; #FCC2
    .db $1D ; #FCC3
    .db $7D ; #FCC4
    .db $02 ; #FCC5
    .db $C2 ; #FCC6
    .db $92 ; #FCC7
    .db $27 ; #FCC8
    .db $07 ; #FCC9
    .db $01 ; #FCCA
    .db $49 ; #FCCB
    .db $32 ; #FCCC
    .db $80 ; #FCCD
    .db $CA ; #FCCE
    .db $CC ; #FCCF
    .db $9C ; #FCD0
    .db $0B ; #FCD1
    .db $C1 ; #FCD2
    .db $06 ; #FCD3
    .db $20 ; #FCD4
    .db $23 ; #FCD5
    .db $41 ; #FCD6
    .db $4B ; #FCD7
    .db $18 ; #FCD8
    .db $94 ; #FCD9
    .db $00 ; #FCDA
    .db $10 ; #FCDB
    .db $14 ; #FCDC
    .db $00 ; #FCDD
    .db $88 ; #FCDE
    .db $D0 ; #FCDF
    .db $5B ; #FCE0
    .db $04 ; #FCE1
    .db $C0 ; #FCE2
    .db $BC ; #FCE3
    .db $7B ; #FCE4
    .db $D6 ; #FCE5
    .db $A9 ; #FCE6
    .db $DC ; #FCE7
    .db $B9 ; #FCE8
    .db $79 ; #FCE9
    .db $AA ; #FCEA
    .db $FD ; #FCEB
    .db $27 ; #FCEC
    .db $66 ; #FCED
    .db $76 ; #FCEE
    .db $5C ; #FCEF
    .db $3B ; #FCF0
    .db $FD ; #FCF1
    .db $39 ; #FCF2
    .db $B1 ; #FCF3
    .db $BB ; #FCF4
    .db $FC ; #FCF5
    .db $7E ; #FCF6
    .db $F6 ; #FCF7
    .db $BB ; #FCF8
    .db $AB ; #FCF9
    .db $4F ; #FCFA
    .db $37 ; #FCFB
    .db $F3 ; #FCFC
    .db $6F ; #FCFD
    .db $E3 ; #FCFE
    .db $EA ; #FCFF
    .db $2C ; #FD00
    .db $A5 ; #FD01
    .db $C2 ; #FD02
    .db $81 ; #FD03
    .db $B2 ; #FD04
    .db $B5 ; #FD05
    .db $88 ; #FD06
    .db $1A ; #FD07
    .db $A2 ; #FD08
    .db $45 ; #FD09
    .db $42 ; #FD0A
    .db $04 ; #FD0B
    .db $EB ; #FD0C
    .db $9D ; #FD0D
    .db $58 ; #FD0E
    .db $46 ; #FD0F
    .db $03 ; #FD10
    .db $51 ; #FD11
    .db $49 ; #FD12
    .db $28 ; #FD13
    .db $19 ; #FD14
    .db $18 ; #FD15
    .db $20 ; #FD16
    .db $23 ; #FD17
    .db $4D ; #FD18
    .db $C8 ; #FD19
    .db $19 ; #FD1A
    .db $A0 ; #FD1B
    .db $42 ; #FD1C
    .db $80 ; #FD1D
    .db $8D ; #FD1E
    .db $11 ; #FD1F
    .db $FA ; #FD20
    .db $96 ; #FD21
    .db $A2 ; #FD22
    .db $21 ; #FD23
    .db $03 ; #FD24
    .db $C4 ; #FD25
    .db $F9 ; #FD26
    .db $DA ; #FD27
    .db $C7 ; #FD28
    .db $A9 ; #FD29
    .db $2F ; #FD2A
    .db $4F ; #FD2B
    .db $13 ; #FD2C
    .db $5F ; #FD2D
    .db $E0 ; #FD2E
    .db $FF ; #FD2F
    .db $0E ; #FD30
    .db $78 ; #FD31
    .db $1A ; #FD32
    .db $B9 ; #FD33
    .db $76 ; #FD34
    .db $9F ; #FD35
    .db $77 ; #FD36
    .db $8D ; #FD37
    .db $19 ; #FD38
    .db $8B ; #FD39
    .db $0E ; #FD3A
    .db $AD ; #FD3B
    .db $07 ; #FD3C
    .db $60 ; #FD3D
    .db $69 ; #FD3E
    .db $E0 ; #FD3F
    .db $F7 ; #FD40
    .db $85 ; #FD41
    .db $26 ; #FD42
    .db $8B ; #FD43
    .db $A6 ; #FD44
    .db $2A ; #FD45
    .db $B2 ; #FD46
    .db $02 ; #FD47
    .db $8C ; #FD48
    .db $0A ; #FD49
    .db $04 ; #FD4A
    .db $8C ; #FD4B
    .db $10 ; #FD4C
    .db $82 ; #FD4D
    .db $41 ; #FD4E
    .db $D1 ; #FD4F
    .db $01 ; #FD50
    .db $A8 ; #FD51
    .db $99 ; #FD52
    .db $41 ; #FD53
    .db $02 ; #FD54
    .db $20 ; #FD55
    .db $44 ; #FD56
    .db $1D ; #FD57
    .db $24 ; #FD58
    .db $19 ; #FD59
    .db $9D ; #FD5A
    .db $83 ; #FD5B
    .db $48 ; #FD5C
    .db $4C ; #FD5D
    .db $04 ; #FD5E
    .db $B9 ; #FD5F
    .db $85 ; #FD60
    .db $80 ; #FD61
    .db $99 ; #FD62
    .db $03 ; #FD63
    .db $5F ; #FD64
    .db $EE ; #FD65
    .db $9C ; #FD66
    .db $FB ; #FD67
    .db $EA ; #FD68
    .db $DE ; #FD69
    .db $4D ; #FD6A
    .db $8D ; #FD6B
    .db $91 ; #FD6C
    .db $86 ; #FD6D
    .db $F7 ; #FD6E
    .db $F6 ; #FD6F
    .db $DE ; #FD70
    .db $D4 ; #FD71
    .db $DB ; #FD72
    .db $5B ; #FD73
    .db $EF ; #FD74
    .db $3F ; #FD75
    .db $F1 ; #FD76
    .db $66 ; #FD77
    .db $E3 ; #FD78
    .db $3A ; #FD79
    .db $5F ; #FD7A
    .db $6D ; #FD7B
    .db $56 ; #FD7C
    .db $48 ; #FD7D
    .db $7F ; #FD7E
    .db $37 ; #FD7F
    .db $37 ; #FD80
    .db $04 ; #FD81
    .db $34 ; #FD82
    .db $F9 ; #FD83
    .db $1D ; #FD84
    .db $0E ; #FD85
    .db $05 ; #FD86
    .db $3E ; #FD87
    .db $90 ; #FD88
    .db $51 ; #FD89
    .db $D0 ; #FD8A
    .db $10 ; #FD8B
    .db $4E ; #FD8C
    .db $04 ; #FD8D
    .db $24 ; #FD8E
    .db $85 ; #FD8F
    .db $86 ; #FD90
    .db $40 ; #FD91
    .db $3C ; #FD92
    .db $45 ; #FD93
    .db $A0 ; #FD94
    .db $10 ; #FD95
    .db $08 ; #FD96
    .db $A2 ; #FD97
    .db $C2 ; #FD98
    .db $9E ; #FD99
    .db $01 ; #FD9A
    .db $C8 ; #FD9B
    .db $03 ; #FD9C
    .db $0A ; #FD9D
    .db $80 ; #FD9E
    .db $39 ; #FD9F
    .db $44 ; #FDA0
    .db $5A ; #FDA1
    .db $22 ; #FDA2
    .db $BD ; #FDA3
    .db $21 ; #FDA4
    .db $FD ; #FDA5
    .db $93 ; #FDA6
    .db $BD ; #FDA7
    .db $B3 ; #FDA8
    .db $96 ; #FDA9
    .db $07 ; #FDAA
    .db $EF ; #FDAB
    .db $4F ; #FDAC
    .db $A7 ; #FDAD
    .db $E3 ; #FDAE
    .db $D5 ; #FDAF
    .db $7F ; #FDB0
    .db $30 ; #FDB1
    .db $A5 ; #FDB2
    .db $BB ; #FDB3
    .db $AB ; #FDB4
    .db $DD ; #FDB5
    .db $D9 ; #FDB6
    .db $A7 ; #FDB7
    .db $72 ; #FDB8
    .db $41 ; #FDB9
    .db $DB ; #FDBA
    .db $5C ; #FDBB
    .db $3A ; #FDBC
    .db $5D ; #FDBD
    .db $6D ; #FDBE
    .db $74 ; #FDBF
    .db $43 ; #FDC0
    .db $D0 ; #FDC1
    .db $32 ; #FDC2
    .db $64 ; #FDC3
    .db $7E ; #FDC4
    .db $E1 ; #FDC5
    .db $33 ; #FDC6
    .db $9F ; #FDC7
    .db $00 ; #FDC8
    .db $24 ; #FDC9
    .db $30 ; #FDCA
    .db $01 ; #FDCB
    .db $02 ; #FDCC
    .db $81 ; #FDCD
    .db $34 ; #FDCE
    .db $A2 ; #FDCF
    .db $87 ; #FDD0
    .db $00 ; #FDD1
    .db $B0 ; #FDD2
    .db $0D ; #FDD3
    .db $A8 ; #FDD4
    .db $24 ; #FDD5
    .db $00 ; #FDD6
    .db $00 ; #FDD7
    .db $40 ; #FDD8
    .db $A8 ; #FDD9
    .db $1E ; #FDDA
    .db $C0 ; #FDDB
    .db $60 ; #FDDC
    .db $00 ; #FDDD
    .db $10 ; #FDDE
    .db $44 ; #FDDF
    .db $B5 ; #FDE0
    .db $FF ; #FDE1
    .db $FF ; #FDE2
    .db $BD ; #FDE3
    .db $2E ; #FDE4
    .db $F7 ; #FDE5
    .db $20 ; #FDE6
    .db $59 ; #FDE7
    .db $EF ; #FDE8
    .db $C2 ; #FDE9
    .db $DD ; #FDEA
    .db $FF ; #FDEB
    .db $A8 ; #FDEC
    .db $66 ; #FDED
    .db $57 ; #FDEE
    .db $C7 ; #FDEF
    .db $52 ; #FDF0
    .db $F2 ; #FDF1
    .db $5F ; #FDF2
    .db $A9 ; #FDF3
    .db $FF ; #FDF4
    .db $9F ; #FDF5
    .db $E6 ; #FDF6
    .db $1F ; #FDF7
    .db $2F ; #FDF8
    .db $D7 ; #FDF9
    .db $5A ; #FDFA
    .db $E6 ; #FDFB
    .db $FB ; #FDFC
    .db $EF ; #FDFD
    .db $DB ; #FDFE
    .db $DE ; #FDFF

ResetRoutine:
    LDX #0
    STX PPU_CTRL_REG                    ; Disable NMI.
    STX PPU_MASK_REG                    ; Disable display.
    DEX                                 ; X = #$FF
    TXS                                 ; Set up stack head.

    LDY #4                              ; Number of VBlanks to wait during the start.
VBlankWait1:
    LDA PPU_STATUS_REG
    BPL VBlankWait1                     ; Wait for VBlank, it's indicated by bit 7 of PPU control register.
VBlankWait2:
    LDA PPU_STATUS_REG
    BMI VBlankWait2                     ; Wait until VBlank occurence flag is 0.
    DEY
    BNE VBlankWait1

    STY APU_DMC_REG                     ; Disable DMC IRQs.
    STY APU_CH_CTRL_REG                 ; Disable audio channels.

    LDA #%01000000
    STA APU_FRAME_CTR_REG               ; 4-step APU sequence; Disable interrupts.

ClearZeroPage:
    TYA                                 ; A = Y = #0
ClearZeroPageByteY:
    STA $0000, Y                        ; Clear byte at address Y.
    DEY
    BNE ClearZeroPageByteY              ; Finish when Y becomes 0.

ClearPage:
    INC <$01                            ; Increment MSB of page address.
ClearPageByteY:
    STA [$00], Y                        ; Clear page byte at offset Y.
    INY
    BNE ClearPageByteY                  ; Finish when Y becomes 0.
    LDX <$01                            ; Load MSB of page address.
    CPX #$07
    BNE ClearPage                       ; Finish on page $07; All bytes in $0000 - $0800 became zeroes.

    LDA #SFX_Q_NULL                     ; X == SFX_Q_LEN - 1, which is equal to 7.
SfxQueueCleanupLoop:
    STA <SfxQueue, X
    DEX
    BPL SfxQueueCleanupLoop

    LDA #%00011110                      ; Show background and sprites everywhere.
    STA <PpuMaskVal                     ; Store as ppu mask value.

    LDA #BANK_6
    JSR SetFirstPrgBank                 ; Set first PRG bank to bank #6.

    LDA #%00011110                      ; Vertical Mirroring; Switchable first bank; Separate 4k CHR banks.
    STA $9FFF
    LSR A
    STA $9FFF
    LSR A
    STA $9FFF
    LSR A
    STA $9FFF
    LSR A
    STA $9FFF

    LDA #$00
    JSR SetChrBank0                     ; Set first chr bank to #$00.

    LDA #$10
    JSR SetChrBank1                     ; Set second chr bank to #$10.

    JSR HideSprites                     ; Move all sprites outside the screen.

    LDA #$20
    LDX #$00
    LDY #$00
    JSR FillScreen                      ; Write zeroes to VRAM at $2000 - $23FF

    LDA #$24
    LDX #$00
    LDY #$00
    JSR FillScreen                      ; Write zeroes to VRAM at $2400 - $27FF

    LDA #HIGH(L7_C574)
    STA <$94
    LDA #LOW(L7_C574)
    STA <$93
    LDA #$00
    JSR L7_FED5

    LDA #%10010000                      ; Background pattern table address $1000; Enable NMI.
    STA <PpuCtrlVal


L7_FE8D:
    LDX #$FF
    TXS                                 ; Set up stack pointer cause it might be all messed up. Or is it?

; Wait for NMI to finish. Code is very convoluted.
L7_FE90:
    LDX #$00
    STX <NmiFinishedFlag                ; NmiFinishedFlag = X = 0
    LDY #$04                            ; Y = #$04
L7_FE96:
    LDA <$80, X
    CMP #$04
    BCS L7_FEA6                         ; A >= 4
    INX
    INX
    INX
    INX
    DEY
    BNE L7_FE96
    JMP L7_FE90
L7_FEA6:
    LDA <NmiFinishedFlag
    BNE L7_FE90

; Now <$80[X] >= #4, whatever that means. It's the minimal X with this property.
    DEY
    TYA
    EOR #$03                            ; A = (Y - 1) ^ 3, which is basically (4 - Y), but shorter. Or same as (X >> 2).

    STA <$91                            ; Store that A into <$91. This is clearly an index that will later be transformed back to offset.
    LDY <$80, X                         ; Y = <$80[X]
    LDA #$02
    STA <$80, X                         ; <$80[X] = #2
    CPY #$08
    BNE L7_FEC5                         ; Branch if Y != 8.
    LDA <$82, X                         ; And if it's 8 then ($0082, X) has a memory address in it.
    STA <$93
    LDA <$83, X
    STA <$94                            ; Move address from ($0082, X) to $0093.
    JMP [$0093]                         ; And jump to it unconditionally.
L7_FEC5:
    LDA <$82, X                         ; If Y != 8 then <$82 has old stack pointer that needs to be restores.
    TAX
    TXS

    LDA <$91
    BNE L7_FED0
    JSR ReadJoypadsInput                ; <$80[oldX] == 0 means we need to read inputs? Ok.
L7_FED0:
    PLA
    TAY                                 ; Restore Y from stack.
    PLA
    TAX                                 ; Restore X from stack.
    RTS                                 ; Return.


; A - some value.
L7_FED5:
    JSR ShiftAccTwice                   ; X is a multiple of 4 now.
    LDA <$93 ; #FED8
    STA <$82, X ; #FEDA
    LDA <$94 ; #FEDC
    STA <$83, X                         ; Copy pointer from $0093 to ($0082, X)
    LDA #$08 ; #FEE0
    STA <$80, X ; #FEE2
    RTS


    JSR ShiftAccTwice ; #FEE5
    LDA #$00 ; #FEE8
    STA <$80, X ; #FEEA
    RTS ; #FEEC


    JSR L7_FEF7 ; #FEED
    LDA #$00 ; #FEF0
    STA <$80, X ; #FEF2
    JMP L7_FE8D ; #FEF4

L7_FEF7:
    LDA <$91 ; #FEF7

; X = (A <<= 2)
ShiftAccTwice:
    ASL A                               ; Shift A first time.
    ASL A                               ; Shift A second time.
    TAX                                 ; Copy to X.
    RTS                                 ; Return.


WaitXFrames:
    JSR WaitNmiAndReadInputs
    DEX
    BNE WaitXFrames
    RTS


WaitNmiAndReadInputs:
    LDA #$01 ; #FF04
    STA <$93 ; #FF06
    TXA
    PHA                                 ; Push X to the stack.
    TYA
    PHA                                 ; Push Y to the stack.
    JSR L7_FEF7                         ; X = A = (<$91 << 2), some offset, multiple of 4 + something else.
    LDA <$93 ; #FF0F
    STA <$81, X ; #FF11
    LDA #$01 ; #FF13
    STA <$80, X                         ; Copy address from $0093 to ($0080, X), but one byte of the address is forced to #01.
    TXA
    TAY
    TSX
    STX <$82, Y                         ; Save stack pointer to ($0082, Y), where Y is the offset value from above.
    JMP L7_FE8D


SetChrBank0:
    STA <ChrBank0

    STA $BFFF
    LSR A
    STA $BFFF
    LSR A
    STA $BFFF
    LSR A
    STA $BFFF
    LSR A
    STA $BFFF

    LDA #$00
    STA <NextChrBank0                   ; Chr bank 0 update completed.
    RTS


SetChrBank1:
    STA <ChrBank1

    STA $DFFF
    LSR A
    STA $DFFF
    LSR A
    STA $DFFF
    LSR A
    STA $DFFF
    LSR A
    STA $DFFF

    LDA #$00
    STA <NextChrBank1                   ; Chr bank 1 update completed.
    RTS

; A - number of first PRG bank to set.
SetFirstPrgBank:                        ; TODO Rename, it does something else that is very important.
    STA <CurPrgBank                     ; Store bank number to some places ($F1 and $F4).
    STA <$F4 ; #FF55
    INC <$F5 ; #FF57 What's the point of incrementing this value if it'll be zeroed later?
    STA $FFF0                           ; Select MMC1 PRG ROM bank number A.
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0

    LDA #0                              ; A = #0
    STA <$F5 ; #FF6E ???

    LDA <$F6 ; #FF70
    BNE L7_FF75 ; #FF72
    RTS                                 ; Return from subroutine if $F6 has byte #0.
L7_FF75:
    LDA #$03                            ; Select MMC1 PRG ROM bank number 3.
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0
    LSR A
    STA $FFF0

SfxQueuePollLoop:
    LDX <SfxQueueReadIdx
    LDA <SfxQueue, X
    CMP #SFX_Q_NULL
    BEQ L7_FFA4                         ; Finish if value is already #SFX_Q_NULL.
    PHA                                 ; Preserve current value of SfxQueue[X]
    LDA #SFX_Q_NULL
    STA <SfxQueue, X                    ; SfxQueue[X] = SFX_Q_NULL
    INX
    TXA
    AND #SFX_Q_IDX_MASK
    STA <SfxQueueReadIdx                ; SfxQueueReadIdx = (X + 1) % SFX_Q_LEN
    PLA                                 ; Read preserved value of A, it'll be a parameter for subroutine $8003 in bank 3.
    JSR $8003
    JMP SfxQueuePollLoop

L7_FFA4:
    JSR $8000                           ; Call subroutine $8000 in bank 3.
    LDA #$00                            ; A = #0
    STA <$F6                            ; <$F6 = #0
    LDA <$F4
    JMP SetFirstPrgBank                 ; Restore bank from the original parameter and return.

    .db $A7 ; #FFB0
    .db $40 ; #FFB1
    .db $DF ; #FFB2
    .db $1E ; #FFB3
    .db $4B ; #FFB4
    .db $B7 ; #FFB5
    .db $66 ; #FFB6
    .db $75 ; #FFB7
    .db $55 ; #FFB8
    .db $9D ; #FFB9
    .db $53 ; #FFBA
    .db $FB ; #FFBB
    .db $0B ; #FFBC
    .db $D9 ; #FFBD
    .db $A7 ; #FFBE
    .db $7A ; #FFBF
    .db $56 ; #FFC0
    .db $A4 ; #FFC1
    .db $9D ; #FFC2
    .db $F8 ; #FFC3
    .db $40 ; #FFC4
    .db $41 ; #FFC5
    .db $5E ; #FFC6
    .db $71 ; #FFC7
    .db $01 ; #FFC8
    .db $D0 ; #FFC9
    .db $C0 ; #FFCA
    .db $C2 ; #FFCB
    .db $00 ; #FFCC
    .db $78 ; #FFCD
    .db $80 ; #FFCE
    .db $28 ; #FFCF
    .db $49 ; #FFD0
    .db $65 ; #FFD1
    .db $84 ; #FFD2
    .db $12 ; #FFD3
    .db $24 ; #FFD4
    .db $86 ; #FFD5
    .db $28 ; #FFD6
    .db $05 ; #FFD7
    .db $D5 ; #FFD8
    .db $00 ; #FFD9
    .db $B7 ; #FFDA
    .db $60 ; #FFDB
    .db $25 ; #FFDC
    .db $AC ; #FFDD
    .db $40 ; #FFDE
    .db $08 ; #FFDF

RESET:
IRQ:
    SEI                                 ; Disable interruptions.
    INC $FFE1                           ; Clear the shift register of MMC1 mapper.
    CLD                                 ; Disable decimal mode.
    JMP ResetRoutine                    ; Jump to a longer reset routine.

    .db $00 ; #FFE8
    .db $00 ; #FFE9
    .db $00 ; #FFEA
    .db $00 ; #FFEB
    .db $00 ; #FFEC
    .db $00 ; #FFED
    .db $00 ; #FFEE
    .db $00 ; #FFEF
    .db $AE ; #FFF0
    .db $5F ; #FFF1
    .db $B9 ; #FFF2
    .db $7F ; #FFF3
    .db $33 ; #FFF4
    .db $04 ; #FFF5
    .db $00 ; #FFF6
    .db $00 ; #FFF7
    .db $08 ; #FFF8
    .db $89 ; #FFF9

    .org ENTRY_POINT
    .word NMI
    .word RESET
    .word IRQ